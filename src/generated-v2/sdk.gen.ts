// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { ChannelInstitutionQueryData, ChannelInstitutionQueryResponses, ChannelInstitutionImport1Data, ChannelInstitutionImport1Responses, ChannelInstitutionImportData, ChannelInstitutionImportResponses, EventAuthorizationQueryData, EventAuthorizationQueryResponses, EventClassQueryData, EventClassQueryResponses, EventClassCreateData, EventClassCreateResponses, EventClassUpdateData, EventClassUpdateResponses, EventClassDeleteData, EventClassDeleteResponses, EventClassExamineesCreateData, EventClassExamineesCreateResponses, EventClassExamineesQueryData, EventClassExamineesQueryResponses, EventClassExamineesDeleteData, EventClassExamineesDeleteResponses, EventExamineeImport1Data, EventExamineeImport1Responses, EventExamineeImportData, EventExamineeImportResponses, EventQueryData, EventQueryResponses, EventCloseData, EventCloseResponses, EventCreateData, EventCreateResponses, EventUpdateData, EventUpdateResponses, ExamineeAuditQueryData, ExamineeAuditQueryResponses, QueryExamineeEventsData, QueryExamineeEventsResponses, LongitudinalSegmentDetailQueryData, LongitudinalSegmentDetailQueryResponses, LongitudinalSegmentsQueryData, LongitudinalSegmentsQueryResponses, ExamineeQueryData, ExamineeQueryResponses, ExamineeImport1Data, ExamineeImport1Responses, ExamineeImportData, ExamineeImportResponses, ExamineeDeleteData, ExamineeDeleteResponses, ExamineeRecordQueryData, ExamineeRecordQueryResponses, FormDefinitionImportData, FormDefinitionImportResponses, FormDefinitionQueryData, FormDefinitionQueryResponses, FormQueryData, FormQueryResponses, FormCreateData, FormCreateResponses, FormUpdateData, FormUpdateResponses, FormDeleteData, FormDeleteResponses, GetFormReportsQueryData, GetFormReportsQueryResponses, GetFormResFilesQueryData, GetFormResFilesQueryResponses, GetFormResFilesQueryErrors, InventoryQueryData, InventoryQueryResponses, TestExportQueryData, TestExportQueryResponses, ItemWorkshopImportData, ItemWorkshopImportResponses, ItemWorkshopImportAsyncData, ItemWorkshopImportAsyncResponses, ItemWorkshopQueryData, ItemWorkshopQueryResponses, GetLongitudinalGroupExamineesQueryData, GetLongitudinalGroupExamineesQueryResponses, PostLongitudinalGroupExamineesCreateData, PostLongitudinalGroupExamineesCreateResponses, PutLongitudinalGroupExamineesUpdateData, PutLongitudinalGroupExamineesUpdateResponses, DeleteLongitudinalGroupExamineesDeleteData, DeleteLongitudinalGroupExamineesDeleteResponses, ExamineeQuery1Data, ExamineeQuery1Responses, OrderQueryData, OrderQueryResponses, OrderCreateData, OrderCreateResponses, OrderDeleteData, OrderDeleteResponses, PackageFormsQueryData, PackageFormsQueryResponses, RegistrationImportCreateData, RegistrationImportCreateResponses, RegistrationUpdateData, RegistrationUpdateResponses, PatchRegistrationUpdateData, PatchRegistrationUpdateResponses, RegistrationQueryData, RegistrationQueryResponses, RegistrationDeleteData, RegistrationDeleteResponses, RemoteAdminUrlsQueryData, RemoteAdminUrlsQueryResponses, RemoteExamineeDataQueryData, RemoteExamineeDataQueryResponses, GetRemotePracticeChecksQueryData, GetRemotePracticeChecksQueryResponses, RemoteSessionDataQueryData, RemoteSessionDataQueryResponses, RemoteSessionCreateData, RemoteSessionCreateResponses, RemoteSessionUpdateData, RemoteSessionUpdateResponses, RemoteSessionQueryData, RemoteSessionQueryResponses, RemoteSessionDeleteData, RemoteSessionDeleteResponses, GetRemoteSystemChecksQueryData, GetRemoteSystemChecksQueryResponses, ResultIdentifierQueryData, ResultIdentifierQueryResponses, ResultQueryData, ResultQueryResponses, ResultUpdateData, ResultUpdateResponses, SabbaticalQueryData, SabbaticalQueryResponses, SecureBrowserErrorsQueryData, SecureBrowserErrorsQueryResponses, SecureBrowserTokensValidateData, SecureBrowserTokensValidateResponses, SessionQueryData, SessionQueryResponses, SessionCreateData, SessionCreateResponses, SessionUpdateData, SessionUpdateResponses, SessionDeleteData, SessionDeleteResponses, SignalRDomainQueryData, SignalRDomainQueryResponses, StartTestLoginData, StartTestLoginResponses, StartTestStartData, StartTestStartResponses, TestFormsQueryData, TestFormsQueryResponses, TestPretestReferencesQueryData, TestPretestReferencesQueryResponses, TestPretestReferencesImportData, TestPretestReferencesImportResponses, TestQueryData, TestQueryResponses, TestCreateData, TestCreateResponses, TestDeleteData, TestDeleteResponses, TestUpdateData, TestUpdateResponses, GetTimezoneQueryData, GetTimezoneQueryResponses, QueryUserAccessData, QueryUserAccessResponses, DeleteUserAccessData, DeleteUserAccessResponses, GetUserQueryData, GetUserQueryResponses, DeleteUserDeleteData, DeleteUserDeleteResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * /channel/institutions/query
 * Retrieves institutions.
 */
export const channelInstitutionQuery = <ThrowOnError extends boolean = false>(options: Options<ChannelInstitutionQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ChannelInstitutionQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channel/institutions/query',
        ...options
    });
};

/**
 * /channel/institutions/import
 * Creates institutions.
 */
export const channelInstitutionImport1 = <ThrowOnError extends boolean = false>(options: Options<ChannelInstitutionImport1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ChannelInstitutionImport1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channel/institutions/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /channel/institutions/import
 * Creates institutions.
 */
export const channelInstitutionImport = <ThrowOnError extends boolean = false>(options: Options<ChannelInstitutionImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ChannelInstitutionImportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/channel/institutions/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /event/authorizations/query
 * This method queries event-specific authorization codes. The event must have previously been created, and the user querying must have access. If an authorization code has been used, then result information is also returned.
 */
export const eventAuthorizationQuery = <ThrowOnError extends boolean = false>(options: Options<EventAuthorizationQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventAuthorizationQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event/authorizations/Query',
        ...options
    });
};

/**
 * /event-class/query
 * Retrieves details about a remote session.
 */
export const eventClassQuery = <ThrowOnError extends boolean = false>(options: Options<EventClassQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventClassQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event-class/Query',
        ...options
    });
};

/**
 * /event-class/create
 * Creates an event class. This call is for clients who want to group together examinees into a class for a particular event.
 */
export const eventClassCreate = <ThrowOnError extends boolean = false>(options: Options<EventClassCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EventClassCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event-class/Create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /event-class/update
 * Finds and updates an existing event class from the event-class-id in the object data.
 */
export const eventClassUpdate = <ThrowOnError extends boolean = false>(options: Options<EventClassUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EventClassUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event-class/Update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /event-class/delete
 * Removes all the linked examinees and deletes the Event Class.
 */
export const eventClassDelete = <ThrowOnError extends boolean = false>(options: Options<EventClassDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EventClassDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event-class/Delete',
        ...options
    });
};

/**
 * /event-class/examinees/create
 * Creates an event class examinee record. This call is for clients who want to group together examinees into a class for a particular event.
 */
export const eventClassExamineesCreate = <ThrowOnError extends boolean = false>(options: Options<EventClassExamineesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EventClassExamineesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event-class/examinees/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /event-class/examinees/query
 * Retrieves details about an examinee in an event class.Choose to filter by either event-class-id or a candidate identifier, and if candidate identifier choose 1 of the candidate identifiers (public, system, or examinee)
 */
export const eventClassExamineesQuery = <ThrowOnError extends boolean = false>(options: Options<EventClassExamineesQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventClassExamineesQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event-class/examinees/query',
        ...options
    });
};

/**
 * /event-class/examinees/delete
 * Removes the specified linked examinees.
 */
export const eventClassExamineesDelete = <ThrowOnError extends boolean = false>(options: Options<EventClassExamineesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EventClassExamineesDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event-class/examinees/delete',
        ...options
    });
};

/**
 * /event/examinee/import
 * Creates or updates examinees and adds them to an event. This is a complete overwrite of the examinee in the ITS system. Any parameter not passed is cleared.
 */
export const eventExamineeImport1 = <ThrowOnError extends boolean = false>(options: Options<EventExamineeImport1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<EventExamineeImport1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event/examinee/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /event/examinee/import
 * Creates or updates examinees and adds them to an event. This is a complete overwrite of the examinee in the ITS system. Any parameter not passed is cleared.
 */
export const eventExamineeImport = <ThrowOnError extends boolean = false>(options: Options<EventExamineeImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EventExamineeImportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event/examinee/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /event/query
 * Retrieves details about an event.
 */
export const eventQuery = <ThrowOnError extends boolean = false>(options: Options<EventQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EventQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event/query',
        ...options
    });
};

/**
 * /event/close
 * This method closes a testing event. Closing a testing event will automatically complete all incomplete results, and if inventory is used, release unused inventory. User making the call must have access to the `program-institution-id` associated with the event. This is an asynchronous call that sets a flag on the event telling a service to start the process, and immediately returns, before the service has started.
 */
export const eventClose = <ThrowOnError extends boolean = false>(options: Options<EventCloseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EventCloseResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event/close',
        ...options
    });
};

/**
 * /event/create
 * Creates events
 */
export const eventCreate = <ThrowOnError extends boolean = false>(options: Options<EventCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EventCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /event/update
 * Finds and updates events by matching on supplied identifiers.
 */
export const eventUpdate = <ThrowOnError extends boolean = false>(options: Options<EventUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EventUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/event/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /examinee/audit/query
 * This method queries the examinee audit logs.
 */
export const examineeAuditQuery = <ThrowOnError extends boolean = false>(options: Options<ExamineeAuditQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExamineeAuditQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/audit/query',
        ...options
    });
};

/**
 * /examinee/events/query
 * Retrieves examinee event information.
 */
export const queryExamineeEvents = <ThrowOnError extends boolean = false>(options: Options<QueryExamineeEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QueryExamineeEventsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/events/query',
        ...options
    });
};

/**
 * /examinee/longitudinal-segment-detail/query
 * Retrieves all the information needed to build an examinee's continuous learning dashboard for a specific segment.
 */
export const longitudinalSegmentDetailQuery = <ThrowOnError extends boolean = false>(options: Options<LongitudinalSegmentDetailQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LongitudinalSegmentDetailQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/longitudinal-segment-detail/query',
        ...options
    });
};

/**
 * /examinee/longitudinal-segments/query
 * Retrieves high-level details about examinee segments for a specific longitudinal group.
 */
export const longitudinalSegmentsQuery = <ThrowOnError extends boolean = false>(options: Options<LongitudinalSegmentsQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<LongitudinalSegmentsQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/longitudinal-segments/query',
        ...options
    });
};

/**
 * /examinee/query
 * Retrieves details about examinees in a program.
 */
export const examineeQuery = <ThrowOnError extends boolean = false>(options: Options<ExamineeQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExamineeQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/query',
        ...options
    });
};

/**
 * /examinee/import
 * Creates or updates the examinee within a program. The POST update is a complete overwrite of the examinee in the ITS system. Any parameter not passed is cleared. Use the PATCH verb to update single fields. Please work with your Program Manager to setup the import template.
 */
export const examineeImport1 = <ThrowOnError extends boolean = false>(options: Options<ExamineeImport1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ExamineeImport1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /examinee/import
 * Creates or updates the examinee within a program. The POST update is a complete overwrite of the examinee in the ITS system. Any parameter not passed is cleared. Use the PATCH verb to update single fields. Please work with your Program Manager to setup the import template.
 */
export const examineeImport = <ThrowOnError extends boolean = false>(options: Options<ExamineeImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExamineeImportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /examinee/delete
 * Deletes an examinee from a program.
 */
export const examineeDelete = <ThrowOnError extends boolean = false>(options: Options<ExamineeDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ExamineeDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/delete',
        ...options
    });
};

/**
 * /examinee/record/query
 * This method queries a single audit log.
 */
export const examineeRecordQuery = <ThrowOnError extends boolean = false>(options: Options<ExamineeRecordQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ExamineeRecordQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/examinee/record/query',
        ...options
    });
};

/**
 * /form/definition/import
 * Used to import Base64 encoded Form Definition XML. See schema and example files listed in the appendix.
 */
export const formDefinitionImport = <ThrowOnError extends boolean = false>(options: Options<FormDefinitionImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FormDefinitionImportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/form/definition/Import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /form/definition/query
 * Used to query Form Definition XML. XML is return Base64 encoded.
 */
export const formDefinitionQuery = <ThrowOnError extends boolean = false>(options: Options<FormDefinitionQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FormDefinitionQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/form/definition/Query',
        ...options
    });
};

/**
 * /form/query
 * This method returns the forms an institution is authorized to deliver for an event.
 */
export const formQuery = <ThrowOnError extends boolean = false>(options: Options<FormQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<FormQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Form/Query',
        ...options
    });
};

/**
 * /form/create
 * Creates a form.
 */
export const formCreate = <ThrowOnError extends boolean = false>(options: Options<FormCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FormCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Form/Create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /form/update
 * Updates one or more forms.
 */
export const formUpdate = <ThrowOnError extends boolean = false>(options: Options<FormUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<FormUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Form/Update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /form/delete
 * Deletes one or more forms.  You cannot delete forms linked to a result.
 */
export const formDelete = <ThrowOnError extends boolean = false>(options: Options<FormDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<FormDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Form/Delete',
        ...options
    });
};

/**
 * form/reports/query
 * This method returns the form reporting data for a specific form.
 */
export const getFormReportsQuery = <ThrowOnError extends boolean = false>(options: Options<GetFormReportsQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFormReportsQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/form/reports/Query',
        ...options
    });
};

/**
 * form/res-files/query
 * This method returns the binary encrypted RES file for a specific form.
 */
export const getFormResFilesQuery = <ThrowOnError extends boolean = false>(options: Options<GetFormResFilesQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFormResFilesQueryResponses, GetFormResFilesQueryErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/form/res-files/Query',
        ...options
    });
};

/**
 * /inventory/query
 * Queries the Inventory tables for information on inventory counts.
 */
export const inventoryQuery = <ThrowOnError extends boolean = false>(options: Options<InventoryQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<InventoryQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/inventory/query',
        ...options
    });
};

/**
 * /iw-tool/export/tests/query
 * Retrieves ItemBankXML for the forms for a given test
 */
export const testExportQuery = <ThrowOnError extends boolean = false>(options: Options<TestExportQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestExportQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/iw-tool/export/tests/query',
        ...options
    });
};

/**
 * /iw-tool/import/import
 * Item Workshop synchronous import.
 */
export const itemWorkshopImport = <ThrowOnError extends boolean = false>(options: Options<ItemWorkshopImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ItemWorkshopImportResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/iw-tool/import/import',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * /iw-tool/import/import-async
 * Item Workshop asynchronous import.
 */
export const itemWorkshopImportAsync = <ThrowOnError extends boolean = false>(options: Options<ItemWorkshopImportAsyncData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ItemWorkshopImportAsyncResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/iw-tool/import/import-async',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * /iw-tool/import/query
 * Item Workshop query of import status.
 */
export const itemWorkshopQuery = <ThrowOnError extends boolean = false>(options: Options<ItemWorkshopQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ItemWorkshopQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/iw-tool/import/query',
        ...options
    });
};

/**
 * /longitudinal-group/examinees/query
 * Retrieves details about examinees in a longitudinal group.
 */
export const getLongitudinalGroupExamineesQuery = <ThrowOnError extends boolean = false>(options: Options<GetLongitudinalGroupExamineesQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLongitudinalGroupExamineesQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/longitudinal-group/examinees/query',
        ...options
    });
};

/**
 * /longitudinal-group/examinees/create
 * Enrolls examinees in a longitudinal group.
 */
export const postLongitudinalGroupExamineesCreate = <ThrowOnError extends boolean = false>(options: Options<PostLongitudinalGroupExamineesCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLongitudinalGroupExamineesCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/longitudinal-group/examinees/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /longitudinal-group/examinees/update
 * Finds and updates existing examinees in longitudinal groups by matching on supplied identifiers.
 */
export const putLongitudinalGroupExamineesUpdate = <ThrowOnError extends boolean = false>(options: Options<PutLongitudinalGroupExamineesUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutLongitudinalGroupExamineesUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/longitudinal-group/examinees/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /longitudinal-group/examinees/delete
 * Removes an examinee from a longitudinal group.
 */
export const deleteLongitudinalGroupExamineesDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteLongitudinalGroupExamineesDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLongitudinalGroupExamineesDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/longitudinal-group/examinees/delete',
        ...options
    });
};

/**
 * /message-history/query
 * Endpoint for querying message history
 */
export const examineeQuery1 = <ThrowOnError extends boolean = false>(options?: Options<ExamineeQuery1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExamineeQuery1Responses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/message-history/query',
        ...options
    });
};

/**
 * /order/query
 * Retrieves details about orders.
 */
export const orderQuery = <ThrowOnError extends boolean = false>(options: Options<OrderQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<OrderQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/order/Query',
        ...options
    });
};

/**
 * /order/create
 * Creates orders
 */
export const orderCreate = <ThrowOnError extends boolean = false>(options: Options<OrderCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<OrderCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/order/Create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /order/delete
 * Removes all unused inventory from an order and removes customer access.
 */
export const orderDelete = <ThrowOnError extends boolean = false>(options: Options<OrderDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<OrderDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/order/Delete',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /package/forms/query
 * This method returns the forms an institution is authorized to deliver for an event.
 */
export const packageFormsQuery = <ThrowOnError extends boolean = false>(options: Options<PackageFormsQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PackageFormsQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/package/forms/Query',
        ...options
    });
};

/**
 * /registration/import
 * Creates a new registration or updates all fields for the record if given a program-registration-id.
 */
export const registrationImportCreate = <ThrowOnError extends boolean = false>(options: Options<RegistrationImportCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegistrationImportCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/registration/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /registration/import
 * Updates only the fields given for the record if given a program-registration-id.
 */
export const registrationUpdate = <ThrowOnError extends boolean = false>(options: Options<RegistrationUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RegistrationUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/registration/import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /registration/update
 * This will update a registration to link an examinee to it.
 */
export const patchRegistrationUpdate = <ThrowOnError extends boolean = false>(options: Options<PatchRegistrationUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchRegistrationUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/registration/update',
        ...options
    });
};

/**
 * /registration/query
 * This registration query will return registrations based on the filters provided.
 */
export const registrationQuery = <ThrowOnError extends boolean = false>(options: Options<RegistrationQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RegistrationQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/registration/query',
        ...options
    });
};

/**
 * /registration/delete
 * This will delete registrations that do not have results started for them.
 */
export const registrationDelete = <ThrowOnError extends boolean = false>(options: Options<RegistrationDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RegistrationDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/registration/delete',
        ...options
    });
};

/**
 * /remote/admin-urls/query
 * Retrieves a URL to a proctor session management portal.
 */
export const remoteAdminUrlsQuery = <ThrowOnError extends boolean = false>(options: Options<RemoteAdminUrlsQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RemoteAdminUrlsQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/admin-urls/Query',
        ...options
    });
};

/**
 * /remote/examinee-data/query
 * This call returns URLs to retrieve examinee videos, chat logs, and photos for one or more examinees.
 */
export const remoteExamineeDataQuery = <ThrowOnError extends boolean = false>(options: Options<RemoteExamineeDataQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RemoteExamineeDataQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/examinee-data/Query',
        ...options
    });
};

/**
 * /remote/practice-checks/query
 * Retrieves details about a practice check.
 */
export const getRemotePracticeChecksQuery = <ThrowOnError extends boolean = false>(options: Options<GetRemotePracticeChecksQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemotePracticeChecksQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/practice-checks/Query',
        ...options
    });
};

/**
 * /remote/session-data/query
 * Retrieves videos, chat logs, and photos for one or more examinees.
 */
export const remoteSessionDataQuery = <ThrowOnError extends boolean = false>(options: Options<RemoteSessionDataQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RemoteSessionDataQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/session-data/Query',
        ...options
    });
};

/**
 * /remote/sessions/create
 * Creates remote sessions that are hosted by Program Workshop. This call is for clients who want to create sessions in advance. It should not be used in conjunction with `remote/admin-url/query`, which creates sessions that are embedded in external systems.
 */
export const remoteSessionCreate = <ThrowOnError extends boolean = false>(options: Options<RemoteSessionCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RemoteSessionCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/sessions/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /remote/sessions/update
 * Finds and updates existing remote sessions by matching on supplied identifiers.
 */
export const remoteSessionUpdate = <ThrowOnError extends boolean = false>(options: Options<RemoteSessionUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RemoteSessionUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/sessions/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /remote/sessions/query
 * Retrieves details about a remote session.
 */
export const remoteSessionQuery = <ThrowOnError extends boolean = false>(options: Options<RemoteSessionQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RemoteSessionQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/sessions/query',
        ...options
    });
};

/**
 * /remote/sessions/delete
 * Deletes a remote session.
 */
export const remoteSessionDelete = <ThrowOnError extends boolean = false>(options: Options<RemoteSessionDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoteSessionDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/sessions/delete',
        ...options
    });
};

/**
 * /remote/system-checks/query
 * Retrieves details about a remote system check.
 */
export const getRemoteSystemChecksQuery = <ThrowOnError extends boolean = false>(options: Options<GetRemoteSystemChecksQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetRemoteSystemChecksQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/remote/system-checks/Query',
        ...options
    });
};

/**
 * /result-identifier/Query
 * Retrieves result identifiers that match the requested query.
 */
export const resultIdentifierQuery = <ThrowOnError extends boolean = false>(options: Options<ResultIdentifierQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResultIdentifierQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/result-identifier/Query',
        ...options
    });
};

/**
 * /result/query
 * Retrieves results of a specific testing event.
 */
export const resultQuery = <ThrowOnError extends boolean = false>(options: Options<ResultQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResultQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/result/query',
        ...options
    });
};

/**
 * /result/update
 * Updates parts of a result.
 */
export const resultUpdate = <ThrowOnError extends boolean = false>(options: Options<ResultUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<ResultUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/result/update',
        ...options
    });
};

/**
 * /sabbatical/query
 * Queries the Sabbatical tables for information on an examinee’s sabbatical.
 */
export const sabbaticalQuery = <ThrowOnError extends boolean = false>(options: Options<SabbaticalQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SabbaticalQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sabbatical/Query',
        ...options
    });
};

/**
 * /secure-brower/errors/query
 * This query returns the secure browser errors based on the optional filters.
 */
export const secureBrowserErrorsQuery = <ThrowOnError extends boolean = false>(options: Options<SecureBrowserErrorsQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SecureBrowserErrorsQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/secure-browser/errors/query',
        ...options
    });
};

/**
 * /secure-browser/tokens/validate
 * This API calls our token validator service to respond with whether the token is valid or not
 */
export const secureBrowserTokensValidate = <ThrowOnError extends boolean = false>(options: Options<SecureBrowserTokensValidateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SecureBrowserTokensValidateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/secure-browser/tokens/validate',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /session/query
 * Retrieves details about a remote session.
 */
export const sessionQuery = <ThrowOnError extends boolean = false>(options: Options<SessionQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<SessionQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session/query',
        ...options
    });
};

/**
 * /session/create
 * Creates a session that are hosted by Program Workshop.
 */
export const sessionCreate = <ThrowOnError extends boolean = false>(options: Options<SessionCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SessionCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /session/update
 * Finds and updates an existing session by matching on supplied identifiers.
 */
export const sessionUpdate = <ThrowOnError extends boolean = false>(options: Options<SessionUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<SessionUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /session/delete
 * Soft deletes a session setting its Active flag to FALSE.
 */
export const sessionDelete = <ThrowOnError extends boolean = false>(options: Options<SessionDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<SessionDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/session/delete',
        ...options
    });
};

/**
 * /signalr-domain/query
 * Returns the configured SignalR hostname.
 */
export const signalRDomainQuery = <ThrowOnError extends boolean = false>(options?: Options<SignalRDomainQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<SignalRDomainQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/signalr-domain/query',
        ...options
    });
};

/**
 * /start-test/Login
 * Retrieves a URL that logs an examinee into the specified site. The examinee record is created or updated. The URL is time-sensitive and can be used only once.
 */
export const startTestLogin = <ThrowOnError extends boolean = false>(options?: Options<StartTestLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartTestLoginResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/start-test/Login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * /start-test/Start
 * Retrieves a URL that starts or restarts a test. The URL returned is time-sensitive and can be used only once. If the test is completed and has a score report, the score report is returned. If the test is completed and does not have a score report, the test is restarted on the “end of test display” or the last question of the test, whichever is earlier.
 */
export const startTestStart = <ThrowOnError extends boolean = false>(options?: Options<StartTestStartData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<StartTestStartResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/start-test/Start',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * /test/forms/query
 * Return all forms configured for a test and the active status of those forms.
 */
export const testFormsQuery = <ThrowOnError extends boolean = false>(options?: Options<TestFormsQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TestFormsQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/forms/Query',
        ...options
    });
};

/**
 * /test/pretest-references/query
 * Gets a Pretest References object according to the specified TestIDs.
 */
export const testPretestReferencesQuery = <ThrowOnError extends boolean = false>(options: Options<TestPretestReferencesQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestPretestReferencesQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/pretest-references/Query',
        ...options
    });
};

/**
 * /test/pretest-references/import
 * Imports Pretest Reference objects into the database from the Pretest References object passed in. A 422 error is returned if 1 or more items or sets are not matched up before importing and the whole import is cancelled.
 */
export const testPretestReferencesImport = <ThrowOnError extends boolean = false>(options: Options<TestPretestReferencesImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestPretestReferencesImportResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/test/pretest-references/Import',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /test/query
 * Gets test query result object according to test object spec.
 */
export const testQuery = <ThrowOnError extends boolean = false>(options: Options<TestQueryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TestQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Test/Query',
        ...options
    });
};

/**
 * /test/create
 * Creates a test from the test create request object passed in.
 */
export const testCreate = <ThrowOnError extends boolean = false>(options: Options<TestCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TestCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Test/Create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /test/delete
 * Deletes tests matching test ids.
 */
export const testDelete = <ThrowOnError extends boolean = false>(options: Options<TestDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TestDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Test/Delete',
        ...options
    });
};

/**
 * /test/update
 * Gets test object according to test object spec.
 */
export const testUpdate = <ThrowOnError extends boolean = false>(options: Options<TestUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<TestUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Test/Update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * /timezone/query
 * Sorted list of ITS time zones with their ITS TimeZoneID.
 */
export const getTimezoneQuery = <ThrowOnError extends boolean = false>(options?: Options<GetTimezoneQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTimezoneQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/Timezone/Query',
        ...options
    });
};

/**
 * /user/access/query
 * Retrieves user access information.
 */
export const queryUserAccess = <ThrowOnError extends boolean = false>(options?: Options<QueryUserAccessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<QueryUserAccessResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/access/query',
        ...options
    });
};

/**
 * /user/access/delete
 * Removes access for a user to a program or institution.
 */
export const deleteUserAccess = <ThrowOnError extends boolean = false>(options?: Options<DeleteUserAccessData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteUserAccessResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/user/access/delete',
        ...options
    });
};

/**
 * /user/query
 * List of users and their associated data.
 */
export const getUserQuery = <ThrowOnError extends boolean = false>(options?: Options<GetUserQueryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserQueryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/User/query',
        ...options
    });
};

/**
 * /user/delete
 * Deletes a user.
 */
export const deleteUserDelete = <ThrowOnError extends boolean = false>(options: Options<DeleteUserDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/User/delete',
        ...options
    });
};