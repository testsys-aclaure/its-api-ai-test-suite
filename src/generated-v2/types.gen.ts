// This file is auto-generated by @hey-api/openapi-ts

export type CustomProperties = {
    property?: PropertyItem;
};

export type ImportInstitutionResponse = {
    'institution-id'?: number;
    'program-institution-id'?: string | null;
    status?: string | null;
};

export type Institution = {
    /**
     * The descriptive name of the institution.
     */
    name?: string | null;
    /**
     * Defines the type of institution. Valid values will be provided as part of configuration. This value must be a valid child type of the parent institution.
     */
    'institution-type-code'?: string | null;
    /**
     * The unique identifier for the institution.
     */
    'institution-code'?: string | null;
    /**
     * The program-specific identifier of the institution. If not supplied, the API will set to `institution-code`. This identifier is used to identify an institution in all web API calls.
     */
    'program-institution-id'?: string | null;
    /**
     * The program alternate identifier for the institution.
     */
    'program-alternate-id'?: string | null;
    /**
     * The program billing code for the institution.
     */
    'program-billing-code'?: string | null;
    /**
     * The program campus code for the institution.
     */
    'program-campus-code'?: string | null;
    /**
     * The program’s system identifier of the institution. This is typically a database identifier. This identifier must be unique across all institutions linked to the program.
     */
    'program-system-id'?: string | null;
    /**
     * The alternate identifier for the institution across all programs.
     */
    'alternate-id'?: string | null;
    /**
     * The first line of the institution’s address.
     */
    address1?: string | null;
    /**
     * The second line of the institution’s address.
     */
    address2?: string | null;
    /**
     * The third line of the institution’s address.
     */
    address3?: string | null;
    /**
     * The city of the institution.
     */
    city?: string | null;
    /**
     * The state of the institution.
     */
    state?: string | null;
    /**
     * The country of the institution.
     */
    country?: string | null;
    /**
     * The zip code of the institution.
     */
    'postal-code'?: string | null;
    /**
     * The name of the institution campus.
     */
    campus?: string | null;
    /**
     * The email address of the main contact for the institution.
     */
    'contact-email'?: string | null;
    /**
     * The name of the main contact for the institution.
     */
    'contact-name'?: string | null;
    /**
     * The phone number of the main contact for the institution.
     */
    'contact-phone'?: string | null;
    /**
     * The directions to the institution.
     */
    directions?: string | null;
    /**
     * The lowest grade the institution supports.
     */
    'start-grade'?: number;
    /**
     * The highest grade the institution supports.
     */
    'end-grade'?: number;
    /**
     * The hours the institution is open and available for testing.
     */
    hours?: string | null;
    /**
     * The six-digit identification code used to identify institutions of higher education in the United States.
     */
    'fice-code'?: string | null;
    /**
     * If set to `true`, examinees will skip self-registration and will be anonymous.
     */
    'allow-anonymous-examinees'?: boolean | null;
    /**
     * Windows time zone identifier.
     */
    'time-zone-id'?: number | null;
    /**
     * If set to `true`, daylight savings will be honored.
     */
    'use-daylight-savings'?: boolean;
    /**
     * Should be set to `true` for QA, test, or demonstration locations. If not provided, set to `false`.
     */
    demo?: boolean;
    /**
     * If `false`, this institution will not be allowed to deliver tests. When set to `false`, all children institutions are automatically set to inactive. If not provided, set to `false`.
     */
    active?: boolean;
    /**
     * The collection of properties.
     */
    'custom-properties'?: Array<CustomProperties> | null;
};

export type PropertyItem = {
    /**
     * The program-specific name identifying the property. Property must be a list.
     */
    name?: string | null;
    /**
     * List specific code to set the property to.
     */
    code?: string | null;
};

export type QueryInstitutionResponse = {
    /**
     * ITS database unique identifier for the institution.
     */
    'institution-id'?: number;
    /**
     * The program-specific identifier of the institution. If not supplied, the API will set to `institution-code`. This identifier is used to identify an institution in all web API calls.
     */
    'program-institution-id'?: string | null;
    /**
     * The program-institution-id of the parent institution, one level up only.
     */
    'program-parent-institution-id'?: string | null;
    /**
     * Defines the type of institution. Valid values will be provided as part of configuration. This value must be a valid child type of the parent institution.
     */
    'institution-type-code'?: string | null;
    /**
     * The descriptive name of the institution.
     */
    name?: string | null;
    /**
     * The program billing code for the institution.
     */
    'program-billing-code'?: string | null;
    /**
     * The program campus code for the institution.
     */
    'program-campus-code'?: string | null;
    /**
     * The program alternate identifier for the institution.
     */
    'program-alternate-id'?: string | null;
    /**
     * The first line of the institution’s address.
     */
    address1?: string | null;
    /**
     * The second line of the institution’s address.
     */
    address2?: string | null;
    /**
     * The third line of the institution’s address.
     */
    address3?: string | null;
    /**
     * The city of the institution.
     */
    city?: string | null;
    /**
     * The state of the institution.
     */
    state?: string | null;
    /**
     * The country of the institution.
     */
    country?: string | null;
    /**
     * The zip code of the institution.
     */
    'postal-code'?: string | null;
    /**
     * The name of the institution campus.
     */
    campus?: string | null;
    /**
     * The email address of the main contact for the institution.
     */
    'contact-email'?: string | null;
    /**
     * The name of the main contact for the institution.
     */
    'contact-name'?: string | null;
    /**
     * The phone number of the main contact for the institution.
     */
    'contact-phone'?: string | null;
    /**
     * The directions to the institution.
     */
    directions?: string | null;
    /**
     * The lowest grade the institution supports.
     */
    'start-grade'?: number | null;
    /**
     * The highest grade the institution supports.
     */
    'end-grade'?: number | null;
    /**
     * The hours the institution is open and available for testing.
     */
    hours?: string | null;
    /**
     * The six-digit identification code used to identify institutions of higher education in the United States.
     */
    'fice-code'?: string | null;
    /**
     * Windows time zone identifier.
     */
    'time-zone-id'?: number | null;
    /**
     * If set to `true`, daylight savings will be honored.
     */
    'use-daylight-savings'?: boolean;
    /**
     * Should be set to `true` for QA, test, or demonstration locations. If not provided, set to `false`.
     */
    demo?: boolean;
    /**
     * If `false`, this institution will not be allowed to deliver tests. When set to `false`, all children institutions are automatically set to inactive. If not provided, set to `false`.
     */
    active?: boolean;
    /**
     * The collection of properties.
     */
    'custom-properties'?: Array<CustomProperties> | null;
};

export type Authorization = {
    /**
     * The unique database identifier of the authorization code the examinee must use to access a test.
     */
    'authorization-id'?: number | null;
    /**
     * The authorization code the examinee must use to access a test.
     */
    'authorization-code'?: string | null;
    'expiration-date'?: string | null;
    /**
     * The database identifier of the result.
     */
    'result-id'?: number | null;
    /**
     * The start date and time of the result in UTC.
     */
    'start-utc'?: string | null;
    /**
     * A boolean flag indicating if the result is complete.
     */
    completed?: boolean | null;
    /**
     * The unique database identifier of the examinee.
     */
    'program-examinee-id'?: number | null;
    /**
     * The program’s system identifier of the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program’s public or business identifier of the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The first name of the examinee who used this authorization.
     */
    'first-name'?: string | null;
    /**
     * The last name of the examinee who used this authorization.
     */
    'last-name'?: string | null;
};

export type EventAuthorization = {
    /**
     * Unique database identifier for the event. Must be used for subsequent calls to `event/authorizations/query` or `event/close`.
     */
    'event-id'?: number | null;
    /**
     * Unique textual identifier for the event.
     */
    'event-description'?: string | null;
    /**
     * Collection of authorizations.
     */
    authorizations?: Array<Authorization> | null;
};

export type EventClass = {
    /**
     * Unique event class identifier.
     */
    'event-class-id'?: number | null;
    /**
     * Unique event identifier.
     */
    'event-id'?: number | null;
    /**
     * The program institution’s name.
     */
    'program-institution-id'?: string | null;
    /**
     * The description of the event class.
     */
    description?: string | null;
    /**
     * The period of the class.
     */
    period?: number | null;
    /**
     * UTC date of creating the class.
     */
    'create-utc'?: string | null;
    /**
     * UTC date of modifying the class.
     */
    'modify-utc'?: string | null;
    /**
     * Program unique identifier for the event class.
     */
    'program-class-code'?: string | null;
};

/**
 * Body for event-class/create endpoint with its validation. Inherits from the EventClass object.
 */
export type EventClassCreateRequest = {
    /**
     * Unique event class identifier.
     */
    'event-class-id'?: number | null;
    /**
     * Unique event identifier.
     */
    'event-id'?: number | null;
    /**
     * The program institution’s name.
     */
    'program-institution-id'?: string | null;
    /**
     * The description of the event class.
     */
    description?: string | null;
    /**
     * The period of the class.
     */
    period?: number | null;
    /**
     * UTC date of creating the class.
     */
    'create-utc'?: string | null;
    /**
     * UTC date of modifying the class.
     */
    'modify-utc'?: string | null;
    /**
     * Program unique identifier for the event class.
     */
    'program-class-code'?: string | null;
};

export type EventClassExamineesCreateResponse = {
    'event-class-examinee-id'?: number | null;
    'event-class-id'?: number | null;
    'examinee-id'?: number | null;
    'program-examinee-public-id'?: string | null;
    'program-examinee-system-id'?: string | null;
    status?: string | null;
};

export type EventClassExamineesDeleteResponse = {
    'event-class-examinee-id'?: number | null;
    'event-class-id'?: number | null;
    'examinee-id'?: number | null;
    'program-examinee-public-id'?: string | null;
    'program-examinee-system-id'?: string | null;
    status?: string | null;
};

export type EventClassExamineesQueryResponse = {
    'event-class-examinee-id'?: number | null;
    'event-class-id'?: number | null;
    'examinee-id'?: number | null;
    'program-examinee-public-id'?: string | null;
    'program-examinee-system-id'?: string | null;
    status?: string | null;
};

export type EventClassResponse = {
    'event-class-id'?: number | null;
    description?: string | null;
    period?: number | null;
    'program-class-code'?: string | null;
    status?: string | null;
};

/**
 * Body for event-class/update endpoint with its validation. Inherits from the EventClass object.
 */
export type EventClassUpdateRequest = {
    /**
     * Unique event class identifier.
     */
    'event-class-id'?: number | null;
    /**
     * Unique event identifier.
     */
    'event-id'?: number | null;
    /**
     * The program institution’s name.
     */
    'program-institution-id'?: string | null;
    /**
     * The description of the event class.
     */
    description?: string | null;
    /**
     * The period of the class.
     */
    period?: number | null;
    /**
     * UTC date of creating the class.
     */
    'create-utc'?: string | null;
    /**
     * UTC date of modifying the class.
     */
    'modify-utc'?: string | null;
    /**
     * Program unique identifier for the event class.
     */
    'program-class-code'?: string | null;
};

export type Examinee = {
    'examinee-id'?: number | null;
    'program-examinee-public-id'?: string | null;
    'program-examinee-system-id'?: string | null;
};

export type EventExamineeResponse = {
    /**
     * The unique ITS database identifier of the event.
     */
    'event-id'?: number | null;
    /**
     * Examinee Identifiers
     */
    examinees?: Array<ExamineeResponse> | null;
};

export type Examinee1 = {
    /**
     * The unique ITS database identifier of the examinee. Required for Updates.
     */
    'examinee-id'?: number | null;
    /**
     * The program's system identifier of the examinee. This is typically a database identifier. This identifier must be unique within the uniqueness scope defined for the program. It is required for Creates if `program-examinee-public-id` is not provided. It is required for Updates if `examinee-id` and `program-examinee-public-id` are not provided.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's public or business identifier of the examinee. For instance, this may be a student ID. The identifier must be unique within the uniqueness scope as defined for the program. It is required for Creates if `program-examinee-system-id` is not provided. It is required for Updates if `examinee-id` and `program-examinee-system-id` are not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The program's unique Institutional Examinee identifier. The identifier must be unique within the uniqueness scope as defined for the program. The `program-institution-id` URL parameter is required when using this identifier.
     */
    'program-examinee-institution-id'?: string | null;
    'record-identifier'?: string | null;
    'registration-identifier'?: string | null;
    /**
     * If `true`, the examinee is active.
     */
    active?: boolean | null;
    /**
     * The table below describes each possible examinee status ID.
     * **Examinee Status ID**
     *
     * | Status ID | Description         |
     * |-----------|---------------------|
     * | 1         | Active              |
     * | 2         | Inactive            |
     * | 3         | Suspended           |
     * | 4         | Suspended Read-Only |
     */
    'examinee-status-id'?: number | null;
    /**
     * This is a program defined list. Example: Active, Graduated, …
     */
    'enrollment-status'?: string | null;
    /**
     * The examinee's last name.
     */
    'last-name'?: string | null;
    /**
     * The examinee's first name.
     */
    'first-name'?: string | null;
    /**
     * The examinee's full name. This is used for certificates and score reports.
     */
    'full-name'?: string | null;
    /**
     * The examinee's middle name.
     */
    'middle-name'?: string | null;
    /**
     * A word used to describe the examinee's status or profession. Examples include Mr, Mrs, Doctor, Professor, etc. The set of allowed possible values is configurable for the program.
     */
    title?: string | null;
    /**
     * The enrolled grade of the examinee.
     */
    grade?: string | null;
    /**
     * The academic major of the examinee. The set of allowed possible values is configurable for the program.
     */
    major?: string | null;
    /**
     * The gender of the examinee. The set of allowed possible values is configurable for the program.
     */
    gender?: string | null;
    /**
     * A pipe-separated list of program-specific codes that describe the examinee.
     */
    ethnicity?: string | null;
    /**
     * A pipe-separated list of program-specific codes that describe the examinee.
     */
    race?: string | null;
    /**
     * The three-letter ISO language code.
     */
    language?: string | null;
    /**
     * The examinee's date of birth. MM-DD-YYYY
     */
    'date-of-birth'?: string | null;
    /**
     * Set if the user does not want their information shared. The default is `false`.
     */
    'privacy-protected'?: boolean | null;
    /**
     * Set if a waiver is on file for an examinee.
     */
    waiver?: boolean | null;
    /**
     * The time zone that the examinee is in. See timezone/query for valid ID numbers.
     */
    'time-zone-id'?: number | null;
    /**
     * If `true`, the examinee honors daylights savings.
     */
    'use-daylight-savings'?: boolean | null;
    /**
     * Not Available
     */
    'photo-image'?: string | null;
    /**
     * Not Available
     */
    'photo-format'?: string | null;
    /**
     * The examinee's email address. Must be correctly formatted per RFC 5322.
     */
    email?: string | null;
    /**
     * The examinee's primary phone number.
     */
    'primary-phone'?: string | null;
    /**
     * The examinee's alternative phone number.
     */
    'alternate-phone'?: string | null;
    /**
     * The email addresses of the examinee's parents. This is comma delimited. Must be correctly formatted per RFC 5322.
     */
    'parent-email-addresses'?: string | null;
    /**
     * This is the preferred contact method of the examinee. The default is 1. The table below includes the supported contact methods.
     * **Contact Method**
     *
     * | Value | Description |
     * |-------|-------------|
     * | 1     | Email       |
     * | 4     | SMS         |
     */
    'preferred-contact-method'?: number | null;
    /**
     * The first line of the examinee's address.
     */
    address?: string | null;
    /**
     * The second line of the examinee's address.
     */
    address2?: string | null;
    /**
     * The third line of the examinee's address.
     */
    address3?: string | null;
    /**
     * The city that the examinee lives in.
     */
    city?: string | null;
    /**
     * The state that the examinee lives in.
     */
    state?: string | null;
    /**
     * The examinee's postal code.
     */
    'postal-code'?: string | null;
    /**
     * The examinee's three-letter ISO country code. This is validated to be three characters.
     */
    country?: string | null;
    /**
     * The company that the examinee works for. No additional validation is performed.
     */
    company?: string | null;
    /**
     * The examinee's job title. No additional validation is performed.
     */
    'job-title'?: string | null;
    /**
     * This element can contain an XML hierarchy of custom properties that are returned with the examinee information.
     */
    'custom-properties'?: Array<Property> | null;
    /**
     * If the test is timed, this number will be multiplied against each element that is timed, including overall time, section times, and item times. For instance, a 3 would give the examinee triple time. 1 = no change, this is the default. 0 = ignore timing, the test is untimed.
     */
    'time-factor'?: string | null;
    /**
     * The bit flag that can be used for program options. See program documentation. See options in Appendix A.
     */
    'delivery-options'?: number | null;
    /**
     * The bit flag that can be used for program overrides. See program documentation. See overrides in Appendix B.
     */
    'delivery-overrides'?: number | null;
    /**
     * The collection of institution elements.
     */
    institutions?: Array<Institution1> | null;
    /**
     * The names of the certifications associated with this examinee. Multiple certifications are returned as a pipe | separated list.
     */
    'certification-names'?: Array<string> | null;
};

export type ExamineeDataHolder = {
    /**
     * A collection of one or more examinee objects to create. The examinee object is documented above.
     */
    'examinee-data'?: Array<Examinee1> | null;
};

export type ExamineeResponse = {
    /**
     * The unique ITS database identifier of the examinee.
     */
    'examinee-id'?: number;
    /**
     * The program's system identifier of the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's public or business identifier of the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The delete status of the examinee. Possible values: `deleted`, `skipped-linked-results`.
     */
    status?: string | null;
};

export type Institution1 = {
    /**
     * The unique ITS database identifier of the institution.
     */
    'institution-id'?: number;
    /**
     * The unique program identifier of an institution. Examinees are linked to this institution. The web API client must have access to this institution.
     */
    'program-institution-id'?: string | null;
    /**
     * The institution name.
     */
    name?: string | null;
    /**
     * The program's public or business identifier of the examinee. For instance, this may be a student ID. For programs that use a username to login, this is the username. This identifier must be unique within the uniqueness scope as defined for the program. It is required if `RecordIdentifier` is not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * This is required if the examinee is uniquely identified at the institution level. The table below includes the acceptable enrollment status values.
     * **Enrollment Status**
     *
     * | Value | Description  |
     * |-------|--------------|
     * | 1     | Enrolled     |
     * | 2     | Transferred  |
     * | 3     | Graduated    |
     * | 4     | Not Enrolled |
     */
    'enrollment-status'?: number;
};

export type Property = {
    /**
     * The program-specific names identifying the property.
     */
    name?: string | null;
    /**
     * The program-specific code for the property.
     */
    code?: string | null;
};

export type Event = {
    /**
     * Unique database identifier for the event. Must be used for subsequent calls to event/authorizations/query or event/close.
     */
    'event-id'?: number | null;
    /**
     * Unique textual identifier for the event. Minimum of 1 character and Maximum of 100
     */
    'event-description'?: string | null;
    /**
     * Uniquely identifies test(s) to be delivered. Not required or used for updates. Minimum of 1 character and Maximum of 50
     */
    'package-code'?: string | null;
    /**
     * Not required or used for updates.  Minimum of 1 character and Maximum of 50
     */
    'form-name'?: string | null;
    /**
     * The start date and time of the event in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The end date and time of the event in UTC.
     */
    'end-utc'?: string | null;
    /**
     * The number of examinees. Parameter is required for anonymous or self-registration models (when not uploading examinees). One authorization will be generated for each examinee. Only increases are supported for updates.
     */
    'num-examinees'?: number;
    /**
     * Bitflag. Set bits to enable options. The table below includes the possible values for this parameter. Must be a value from 0 to 2097151 (including)
     * **Event Options**
     *
     * | Bit | (Bit Value) | Description                                                                                                                     |
     * |-----|-------------|---------------------------------------------------------------------------------------------------------------------------------|
     * |  0  | 1         | Enable immediate score report in session                                                                                                                                                                                                              |
     * |  2  | 4         | Automatically add students to event when logging into session                                                                                                                                                                                         |
     * |  3  | 8         | Allow sessions for future events to be created                                                                                                                                                                                                        |
     * |  4  | 16        | Restrict students to one class in event                                                                                                                                                                                                               |
     * |  5  | 32        | Enable PDF downloads for all students                                                                                                                                                                                                                 |
     * |  6  | 64        | Enable answer sheets for all students                                                                                                                                                                                                                 |
     * |  7  | 128       | Require students to have a class in order to test                                                                                                                                                                                                     |
     * |  8  | 256       | Allow classes to be created and modified after the event is closed.                                                                                                                                                                                   |
     * |  9  | 512       | Do not release all unused inventory on close (primary or secondary) if the student did not use primary and secondary inventory. Default behavior is to release inventory if the student did not use primary and secondary inventory.                  |
     * |  10 | 1024      | Release secondary inventory if student does not use secondary inventory. Default behavior is to not release secondary inventory if the student used the primary inventory and to release secondary inventory if the student did not use the primary.  |
     * |  11 | 2048      | Reports are generated on event close                                                                                                                                                                                                                  |
     * |  12 | 4096      | Reports are generated on score completion of all results                                                                                                                                                                                              |
     * |  13 | 8192      | Waiver required.                                                                                                                                                                                                                                      |
     * |  14 | 16384     | When set, StartTest2 will require a secure browser.
     * |  15 | 32768     | When set, event has been overridden by a program level user. Instutition users have limited ability to   edit.   |
     * |  16 | 65536     | Event assignments require candidates to have active registrations.                                                                                                                                                                                    |
     * |  17 | 131072    | Event candidates are anonymous                                                                                                                                                                                                                        |
     * |  18 | 262144    | Suppress pre-test profiles                                                                                                                                                                                                                            |
     * |  19 | 524288    | Require all sessions to be remote proctored.                                                                                                                                                                                                          |
     * |  20 | 1048576   | Practice test administration. Forms are limited to practice forms via the program-specific test   administration setup component.
     */
    'event-options'?: number | null;
    /**
     * If the test is timed, this number will be multiplied against each element that is timed, including overall time, section times, and item times. For instance, a “3” would give the examinee triple time. 1 = no change, this is the default. 0 = ignore timing, the test is untimed.
     */
    'time-factor'?: number | null;
    /**
     * Only used for programs that require inventory. Specific requirements for this element will be provided as part of program configuration. The table below includes the possible values for this parameter.
     * **Inventory Source**
     *
     * | Value | Description                                             |
     * |-------|---------------------------------------------------------|
     * | 1     | None                                                    |
     * | 2     | Event owner institution is responsible for inventory    |
     * | 3     | Event delivery institution is responsible for inventory |
     * | 4     | Institution configuration defines source for inventory  |
     */
    'inventory-source'?: number | null;
    /**
     * If set to true, this event is available to all children institutions of the program-institution-id passed as the input parameter of this call.
     */
    'all-institutions'?: boolean;
    /**
     * Used to determine constructed response scoring priority when passed to third-party scoring system. Recommended values are program-specific and are typically based upon the expected number of business days needed for scoring turn-around. If not set, scoring will use the default priority.
     *
     * Program approval is required to use expedited priority settings.
     */
    'scoring-priority'?: number | null;
    /**
     * A collection of delivery institutions that will have access to this event. This element should not be included if all-institutions is set to true.
     */
    'event-institutions'?: Array<EventInstitution> | null;
    /**
     * The unique identifier of a child institution that will have access to this event. Minimum of 1 character and Maximum of 50
     */
    'delivery-program-institution-id'?: string | null;
};

/**
 * Body for event/create endpoint with its validation. Inherits from the Event object.
 */
export type EventCreateRequest = {
    /**
     * Unique database identifier for the event. Must be used for subsequent calls to event/authorizations/query or event/close.
     */
    'event-id'?: number | null;
    /**
     * Unique textual identifier for the event. Minimum of 1 character and Maximum of 100
     */
    'event-description'?: string | null;
    /**
     * Uniquely identifies test(s) to be delivered. Not required or used for updates. Minimum of 1 character and Maximum of 50
     */
    'package-code'?: string | null;
    /**
     * Not required or used for updates.  Minimum of 1 character and Maximum of 50
     */
    'form-name'?: string | null;
    /**
     * The start date and time of the event in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The end date and time of the event in UTC.
     */
    'end-utc'?: string | null;
    /**
     * The number of examinees. Parameter is required for anonymous or self-registration models (when not uploading examinees). One authorization will be generated for each examinee. Only increases are supported for updates.
     */
    'num-examinees'?: number;
    /**
     * Bitflag. Set bits to enable options. The table below includes the possible values for this parameter. Must be a value from 0 to 2097151 (including)
     * **Event Options**
     *
     * | Bit | (Bit Value) | Description                                                                                                                     |
     * |-----|-------------|---------------------------------------------------------------------------------------------------------------------------------|
     * |  0  | 1         | Enable immediate score report in session                                                                                                                                                                                                              |
     * |  2  | 4         | Automatically add students to event when logging into session                                                                                                                                                                                         |
     * |  3  | 8         | Allow sessions for future events to be created                                                                                                                                                                                                        |
     * |  4  | 16        | Restrict students to one class in event                                                                                                                                                                                                               |
     * |  5  | 32        | Enable PDF downloads for all students                                                                                                                                                                                                                 |
     * |  6  | 64        | Enable answer sheets for all students                                                                                                                                                                                                                 |
     * |  7  | 128       | Require students to have a class in order to test                                                                                                                                                                                                     |
     * |  8  | 256       | Allow classes to be created and modified after the event is closed.                                                                                                                                                                                   |
     * |  9  | 512       | Do not release all unused inventory on close (primary or secondary) if the student did not use primary and secondary inventory. Default behavior is to release inventory if the student did not use primary and secondary inventory.                  |
     * |  10 | 1024      | Release secondary inventory if student does not use secondary inventory. Default behavior is to not release secondary inventory if the student used the primary inventory and to release secondary inventory if the student did not use the primary.  |
     * |  11 | 2048      | Reports are generated on event close                                                                                                                                                                                                                  |
     * |  12 | 4096      | Reports are generated on score completion of all results                                                                                                                                                                                              |
     * |  13 | 8192      | Waiver required.                                                                                                                                                                                                                                      |
     * |  14 | 16384     | When set, StartTest2 will require a secure browser.
     * |  15 | 32768     | When set, event has been overridden by a program level user. Instutition users have limited ability to   edit.   |
     * |  16 | 65536     | Event assignments require candidates to have active registrations.                                                                                                                                                                                    |
     * |  17 | 131072    | Event candidates are anonymous                                                                                                                                                                                                                        |
     * |  18 | 262144    | Suppress pre-test profiles                                                                                                                                                                                                                            |
     * |  19 | 524288    | Require all sessions to be remote proctored.                                                                                                                                                                                                          |
     * |  20 | 1048576   | Practice test administration. Forms are limited to practice forms via the program-specific test   administration setup component.
     */
    'event-options'?: number | null;
    /**
     * If the test is timed, this number will be multiplied against each element that is timed, including overall time, section times, and item times. For instance, a “3” would give the examinee triple time. 1 = no change, this is the default. 0 = ignore timing, the test is untimed.
     */
    'time-factor'?: number | null;
    /**
     * Only used for programs that require inventory. Specific requirements for this element will be provided as part of program configuration. The table below includes the possible values for this parameter.
     * **Inventory Source**
     *
     * | Value | Description                                             |
     * |-------|---------------------------------------------------------|
     * | 1     | None                                                    |
     * | 2     | Event owner institution is responsible for inventory    |
     * | 3     | Event delivery institution is responsible for inventory |
     * | 4     | Institution configuration defines source for inventory  |
     */
    'inventory-source'?: number | null;
    /**
     * If set to true, this event is available to all children institutions of the program-institution-id passed as the input parameter of this call.
     */
    'all-institutions'?: boolean;
    /**
     * Used to determine constructed response scoring priority when passed to third-party scoring system. Recommended values are program-specific and are typically based upon the expected number of business days needed for scoring turn-around. If not set, scoring will use the default priority.
     *
     * Program approval is required to use expedited priority settings.
     */
    'scoring-priority'?: number | null;
    /**
     * A collection of delivery institutions that will have access to this event. This element should not be included if all-institutions is set to true.
     */
    'event-institutions'?: Array<EventInstitution> | null;
    /**
     * The unique identifier of a child institution that will have access to this event. Minimum of 1 character and Maximum of 50
     */
    'delivery-program-institution-id'?: string | null;
};

export type EventInstitution = {
    /**
     * The unique identifier of a child institution that will have access to this event.  Minimum of 1 character and Maximum of 50
     */
    'delivery-program-institution-id'?: string | null;
};

export type EventResponse = {
    /**
     * The create status of the event. Possible values: created, skipped-exists.
     */
    status: string;
    /**
     * The unique ITS database identifier of the event.
     */
    'event-id': number;
    /**
     * The requested start date and time of the event in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The requested end date and time of the event in UTC.
     */
    'end-utc'?: string | null;
};

/**
 * Body for event/update endpoint with its validation. Inherits from the Event object.
 */
export type EventUpdateRequest = {
    /**
     * Unique database identifier for the event. Must be used for subsequent calls to event/authorizations/query or event/close.
     */
    'event-id'?: number | null;
    /**
     * Unique textual identifier for the event. Minimum of 1 character and Maximum of 100
     */
    'event-description'?: string | null;
    /**
     * Uniquely identifies test(s) to be delivered. Not required or used for updates. Minimum of 1 character and Maximum of 50
     */
    'package-code'?: string | null;
    /**
     * Not required or used for updates.  Minimum of 1 character and Maximum of 50
     */
    'form-name'?: string | null;
    /**
     * The start date and time of the event in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The end date and time of the event in UTC.
     */
    'end-utc'?: string | null;
    /**
     * The number of examinees. Parameter is required for anonymous or self-registration models (when not uploading examinees). One authorization will be generated for each examinee. Only increases are supported for updates.
     */
    'num-examinees'?: number;
    /**
     * Bitflag. Set bits to enable options. The table below includes the possible values for this parameter. Must be a value from 0 to 2097151 (including)
     * **Event Options**
     *
     * | Bit | (Bit Value) | Description                                                                                                                     |
     * |-----|-------------|---------------------------------------------------------------------------------------------------------------------------------|
     * |  0  | 1         | Enable immediate score report in session                                                                                                                                                                                                              |
     * |  2  | 4         | Automatically add students to event when logging into session                                                                                                                                                                                         |
     * |  3  | 8         | Allow sessions for future events to be created                                                                                                                                                                                                        |
     * |  4  | 16        | Restrict students to one class in event                                                                                                                                                                                                               |
     * |  5  | 32        | Enable PDF downloads for all students                                                                                                                                                                                                                 |
     * |  6  | 64        | Enable answer sheets for all students                                                                                                                                                                                                                 |
     * |  7  | 128       | Require students to have a class in order to test                                                                                                                                                                                                     |
     * |  8  | 256       | Allow classes to be created and modified after the event is closed.                                                                                                                                                                                   |
     * |  9  | 512       | Do not release all unused inventory on close (primary or secondary) if the student did not use primary and secondary inventory. Default behavior is to release inventory if the student did not use primary and secondary inventory.                  |
     * |  10 | 1024      | Release secondary inventory if student does not use secondary inventory. Default behavior is to not release secondary inventory if the student used the primary inventory and to release secondary inventory if the student did not use the primary.  |
     * |  11 | 2048      | Reports are generated on event close                                                                                                                                                                                                                  |
     * |  12 | 4096      | Reports are generated on score completion of all results                                                                                                                                                                                              |
     * |  13 | 8192      | Waiver required.                                                                                                                                                                                                                                      |
     * |  14 | 16384     | When set, StartTest2 will require a secure browser.
     * |  15 | 32768     | When set, event has been overridden by a program level user. Instutition users have limited ability to   edit.   |
     * |  16 | 65536     | Event assignments require candidates to have active registrations.                                                                                                                                                                                    |
     * |  17 | 131072    | Event candidates are anonymous                                                                                                                                                                                                                        |
     * |  18 | 262144    | Suppress pre-test profiles                                                                                                                                                                                                                            |
     * |  19 | 524288    | Require all sessions to be remote proctored.                                                                                                                                                                                                          |
     * |  20 | 1048576   | Practice test administration. Forms are limited to practice forms via the program-specific test   administration setup component.
     */
    'event-options'?: number | null;
    /**
     * If the test is timed, this number will be multiplied against each element that is timed, including overall time, section times, and item times. For instance, a “3” would give the examinee triple time. 1 = no change, this is the default. 0 = ignore timing, the test is untimed.
     */
    'time-factor'?: number | null;
    /**
     * Only used for programs that require inventory. Specific requirements for this element will be provided as part of program configuration. The table below includes the possible values for this parameter.
     * **Inventory Source**
     *
     * | Value | Description                                             |
     * |-------|---------------------------------------------------------|
     * | 1     | None                                                    |
     * | 2     | Event owner institution is responsible for inventory    |
     * | 3     | Event delivery institution is responsible for inventory |
     * | 4     | Institution configuration defines source for inventory  |
     */
    'inventory-source'?: number | null;
    /**
     * If set to true, this event is available to all children institutions of the program-institution-id passed as the input parameter of this call.
     */
    'all-institutions'?: boolean;
    /**
     * Used to determine constructed response scoring priority when passed to third-party scoring system. Recommended values are program-specific and are typically based upon the expected number of business days needed for scoring turn-around. If not set, scoring will use the default priority.
     *
     * Program approval is required to use expedited priority settings.
     */
    'scoring-priority'?: number | null;
    /**
     * A collection of delivery institutions that will have access to this event. This element should not be included if all-institutions is set to true.
     */
    'event-institutions'?: Array<EventInstitution> | null;
    /**
     * The unique identifier of a child institution that will have access to this event. Minimum of 1 character and Maximum of 50
     */
    'delivery-program-institution-id'?: string | null;
};

export type BigInteger = {
    readonly isPowerOfTwo?: boolean;
    readonly isZero?: boolean;
    readonly isOne?: boolean;
    readonly isEven?: boolean;
    readonly sign?: number;
};

export type CandidateLogClass = {
    /**
     * One row for each log entry.
     */
    Logs?: Array<LogClass> | null;
};

export type DataClass = {
    candidateLog?: CandidateLogClass;
    numRecords: number;
};

export type ErrorClass = {
    /**
     * Unique textual identifier of the test.
     */
    ErrorCode: number;
    /**
     * Unique textual identifier of the test.
     */
    ErrorMessage?: string | null;
};

export type ExamineeAuditResponse = {
    error?: ErrorClass;
    data?: DataClass;
};

export type LogClass = {
    /**
     * Table source.
     */
    Table?: string | null;
    /**
     * RecordID from table.
     */
    RecordID?: number;
    /**
     * Date of record, converted to requested timezone.
     */
    Date?: string | null;
    /**
     * Time of record, converted to requested timezone
     */
    Time?: string | null;
    /**
     * Description of source.
     */
    Description?: string | null;
    /**
     * Specific action or log information.
     */
    Information?: string | null;
    ResultID?: BigInteger;
    /**
     * User, if any.
     */
    User?: string | null;
    /**
     * Sort UTC as returned from database (with milliseconds)
     */
    SortUTC?: string | null;
    /**
     * Time that the record was created; used to measure how long queries are taking
     */
    LogTime?: string | null;
};

/**
 * Examinee Event
 * Represents an event for an examinee.
 */
export type EventResponse1 = {
    /**
     * The unique ITS database identifier of the event.
     */
    'event-id': number;
    /**
     * The description of the event.
     */
    description?: string | null;
    /**
     * The table below contains the possible event-status-id values:
     *
     * | Event Status ID | Description                                                     |
     * | --------------- | --------------------------------------------------------------- |
     * | 1 (Inactive)    | Available for editing only.  Not available for delivery.        |
     * | 2 (Active)      | Available for delivery.                                         |
     * | 3 (Closed)      | Available for reporting only.                                   |
     *
     */
    'event-status-id': number;
    /**
     * The date and time the event is available for delivery in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The date and time the event is no longer available for delivery in UTC.
     */
    'end-utc'?: string | null;
    /**
     * The date and time the event was closed, and reporting became available.
     */
    'close-utc'?: string | null;
    /**
     * The last user to modify event configuration.
     */
    'modify-user-id': number;
    /**
     * The last date and time the event configuration was modified in UTC.
     */
    'modify-utc': string;
};

/**
 * Examinee Events
 * Examinee Events Response
 */
export type ExamineeEventsResponse = {
    /**
     * The unique program identifier of an institution. Examinees are linked to this institution.  The web API client must have access to this institution.
     */
    'program-institution-id'?: string | null;
    /**
     * The unique ITS database identifier of the examinee.
     */
    'examinee-id': number;
    /**
     * The program�s system identifier of the examinee. This is typically a database identifier. This must be unique within the uniqueness scope defined for the program. This is required for creates if program-examinee-public-id is not provided. This is required for updates if examinee-id and program-examinee-public-id are not provided.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program�s public or business identifier of the examinee. For instance, this may be a student ID. This identifier must be unique within the uniqueness scope as defined for the program. This is required for creates if program-examinee-system-id is not provided. This is required for updates if examinee-id and program-examinee-system-id are not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * Collection of events
     */
    readonly events?: Array<EventResponse1> | null;
};

export type ExamineeIdentifierTypEnum = 0 | 1 | 2 | 3;

export type Clones = {
    /**
     * The number of complete clones.
     */
    complete?: number;
    /**
     * The number of correct clones.
     */
    correct?: number;
    /**
     * The number of incomplete clones.
     */
    incomplete?: number;
    /**
     * The number of incorrect clones.
     */
    incorrect?: number;
    /**
     * The raw score if all remaining clones are correct.
     */
    'max-possible-score'?: number;
    /**
     * The percent score if all remaining clones are correct.
     */
    'max-possible-percent-score'?: number;
    /**
     * The number of clone questions.
     */
    questions?: number;
    /**
     * The number of rollover clones.
     */
    rollover?: number;
    /**
     * The sum of clone item scores, affected by forfeited configuration.
     */
    score?: number;
    /**
     * The total number of seconds spent answering questions.
     */
    seconds?: number;
    /**
     * The average time spent per clone question.
     */
    'seconds-average'?: number;
    /**
     * The average time spent on critique/read-only page.
     */
    'seconds-review-average'?: number;
    /**
     * The number of skipped clones.
     */
    skipped?: number;
    /**
     * The total number of points for clone questions regardless of whether the question was answered or correctness. Affected by forfeited configuration.
     */
    'points-all'?: number;
    /**
     * The total number of points for clone questions answered regardless of correctness. Affected by forfeited configuration.
     */
    'points-answered'?: number;
    /**
     * The number of clones visited.
     */
    visited?: number;
    /**
     * The number of clones not visited.
     */
    'not-visited'?: number;
    /**
     * Specified as a number between 0 and 100 affected by forfeited configuration.
     */
    'percent-correct'?: number;
    'num-skipped'?: number;
    /**
     * The total time spent on critique/read-only page.
     */
    'seconds-review'?: number;
    /**
     * Specified as a number between 0 and 100, affected by forfeited configuration.
     */
    'percent-score'?: number;
    /**
     * The number of clone questions excluding unscored and pretest.
     */
    'num-questions-scored'?: number;
};

export type _Error = {
    errorCode?: number;
    errorMessage?: string | null;
};

export type Event1 = {
    /**
     * `False` = Normal close; `True` = Examinee did not complete the test, the exam was closed by system, due to expiration or batch process on export. Auto-closed results are scored normally.
     */
    'auto-close'?: string | null;
    /**
     * ITS unique identifier for the examinee
     */
    'examinee-id'?: number | null;
    /**
     * Program’s unique system identifier for the examinee
     */
    'program-examinee-system-id'?: string | null;
    /**
     * Program’s unique public identifier fo rthe examinee
     */
    'program-examinee-public-id'?: string | null;
    /**
     * Set to `true` if the result is complete.
     */
    completed?: string | null;
    /**
     * The database identifier of the form.
     */
    'form-id'?: string | null;
    /**
     * The description of the form.
     */
    'form-description'?: string | null;
    /**
     * The textual identifier of the form.
     */
    'form-name'?: string | null;
    /**
     * The three-character ISO language code.
     */
    'language-code'?: string | null;
    /**
     * The last date and time in UTC of the test (stored in EST).
     */
    'last-modified-utc'?: string;
    /**
     * The name of the program.
     */
    program?: string | null;
    /**
     * The unique database identifier of the program.
     */
    'program-id'?: string | null;
    /**
     * The unique database identifier of the result.
     */
    'result-id'?: string | null;
    /**
     * The unique database identifier of the test.
     */
    'test-id'?: string | null;
    /**
     * The description of the test delivered.
     */
    'test-description'?: string | null;
    /**
     * The number multiplied against the time. The default is 1.
     */
    'time-factor'?: string | null;
    /**
     * The UTC date and time the test was started.
     */
    'start-utc'?: string;
    /**
     * The UTC date and time the test was completed. The date/time is before examinees complete surveys or view score reports.
     */
    'complete-utc'?: string;
    /**
     * The UTC date and time the test was scored. If scoring is immediate, then this will be the same date/time as `complete-utc`. If scoring is external, this is the date and time the scoring was completed.
     */
    'scoring-complete-utc'?: string;
    /**
     * The UTC date and time the test was exited by the examinee after completing surveys and viewing score reports.
     */
    'end-test-utc'?: string;
    /**
     * If outcome result is rescored, date and time rescored occurred in UTC timezone.
     */
    'rescore-utc'?: string;
};

export type Forfeited = {
    /**
     * Forfeited items are items that were not completed when the result was completed. If non-zero, then the syllabus treats forfeited items as incorrect.
     */
    questions?: number;
    /**
     * Total points lost for forfeited items.
     */
    'points-lost'?: number;
};

export type LongitudinalGroupCycle = {
    /**
     * The database identifier of the longitudinal group.
     */
    id?: string | null;
    /**
     * The name of the longitudinal group.
     */
    name?: string | null;
    /**
     * The sequence of the cycle for the examinee.
     */
    'cycle-num'?: string | null;
    /**
     * The date the examinee cycle started in UTC.
     */
    'cycle-start-utc'?: string;
    /**
     * The description of the longitudinal group.
     */
    description?: string | null;
    /**
     * The identifier of the group of forms available for this longitudinal group.
     */
    'form-group'?: string | null;
    /**
     * The date the examinee was added to the longitudinal group.
     */
    'join-utc'?: string;
    /**
     * The date the run started in UTC.
     */
    'run-start-utc'?: string;
    /**
     * The date the run ended in UTC.
     */
    'run-end-utc'?: string;
    /**
     * The sequence of the run within the longitudinal group.
     */
    'run-num'?: string | null;
    /**
     * The date the segment started in UTC.
     */
    'segment-start-utc'?: string;
    /**
     * The sequence of the segment within the run.
     */
    'segment-num'?: string | null;
    /**
     * The date the segment ended in UTC.
     */
    'segment-end-utc'?: string;
};

export type LongitudinalGroupSegmentDetail = {
    'segment-detail'?: LongitudinalGroupSegmentResults;
};

export type LongitudinalGroupSegmentResults = {
    event?: Event1;
    detail?: LongitudinalGroupCycle;
    timebank?: TimeBank;
    'score-groups'?: Array<LongitudinalGroupSegmentSyllabus> | null;
};

export type LongitudinalGroupSegmentSyllabus = {
    errors?: _Error;
    /**
     * The type of group.  Valid Values: 1 - Cycle, 2 - Run, 3 - Segment
     */
    type?: number | null;
    clones?: Clones;
    pretest?: Pretest;
    primary?: Primary;
    retries?: Retries;
    scored?: Scored;
    skipped?: Skipped;
    total?: Total;
    unscored?: Unscored;
    forfeited?: Forfeited;
};

export type Pretest = {
    /**
     * The number of pretest questions.
     */
    questions?: number;
    /**
     * The number of correct pretest questions.
     */
    correct?: number;
    /**
     * The number of incorrect pretest questions.
     */
    incorrect?: number;
    /**
     * The number of complete pretest questions.
     */
    complete?: number;
    /**
     * The number of incomplete pretest questions.
     */
    incomplete?: number;
    /**
     * The number of pretest questions visited.
     */
    visted?: number;
    /**
     * The number of pretest questions not visited.
     */
    'not-visited'?: number;
    /**
     * The number of skipped pretest questions.
     */
    skipped?: number;
};

export type Primary = {
    /**
     * The number of complete primary questions.
     */
    complete?: number;
    /**
     * The number of correct primary questions.
     */
    correct?: number;
    /**
     * The number of incomplete primary questions.
     */
    incomplete?: number;
    /**
     * The number of incorrect primary questions.
     */
    incorrect?: number;
    /**
     * The raw score if all remaining primary questions are correct.
     */
    'max-possible-score'?: number;
    /**
     * The percent score if all remaining primary questions are correct.
     */
    'max-possible-percent-score'?: number;
    /**
     * The number of primary questions.
     */
    questions?: number;
    /**
     * The number of rollover primary questions.
     */
    rollover?: number;
    /**
     * The sum of primary item scores, affected by forfeited configuration.
     */
    score?: number;
    /**
     * The total number of seconds spent answering primary questions.
     */
    seconds?: number;
    /**
     * The average time spent per primary question.
     */
    'seconds-average'?: number;
    /**
     * The average time spent on critique/read-only page.
     */
    'seconds-review-average'?: number;
    /**
     * The number of skipped primary questions.
     */
    skipped?: number;
    /**
     * The total number of points for primary questions regardless of whether the question was answered or correctness. Affected by forfeited configuration.
     */
    'points-all'?: number;
    /**
     * The total number of points for primary questions answered regardless of correctness. Affected by forfeited configuration.
     */
    'points-answered'?: number;
    /**
     * The number of primary questions visited.
     */
    visited?: number;
    /**
     * The number of primary questions not visited.
     */
    'not-visited'?: number;
    /**
     * Specified as a number between 0 and 100, affected by forfeited configuration.
     */
    'percent-correct'?: number;
    'num-skipped'?: number;
    /**
     * The total time spent on critique/read-only page.
     */
    'seconds-review'?: number;
    /**
     * Specified as a number between 0 and 100, affected by forfeited configuration.
     */
    'percent-score'?: number;
    /**
     * The number of primary questions excluding unscored and pretest.
     */
    'num-questions-scored'?: number;
};

export type Retries = {
    /**
     * The number of complete retry questions.
     */
    complete?: number;
    /**
     * The number of correct retry questions.
     */
    correct?: number;
    /**
     * The number of incomplete retry questions.
     */
    incomplete?: number;
    /**
     * The number of incorrect retry questions.
     */
    incorrect?: number;
    /**
     * The raw score if all remaining retry questions are correct.
     */
    'max-possible-score'?: number;
    /**
     * The percent score if all remaining retry questions are correct.
     */
    'max-possible-percent-score'?: number;
    /**
     * The number of retry questions.
     */
    questions?: number;
    /**
     * The number of rollover retry questions.
     */
    rollover?: number;
    /**
     * The sum of retry item scores, affected by forfeited configuration.
     */
    score?: number;
    /**
     * The total number of seconds spent answering retry questions.
     */
    seconds?: number;
    /**
     * The average time spent per retry question.
     */
    'seconds-average'?: number;
    /**
     * The average time spent on critique/read-only page.
     */
    'seconds-review-average'?: number;
    /**
     * The total number of points for retry questions regardless of whether the question was answered or correctness. Affected by forfeited configuration.
     */
    'points-all'?: number;
    /**
     * The total number of points for retry questions answered regardless of correctness. Affected by forfeited configuration.
     */
    'points-answered'?: number;
    /**
     * The number of retry questions visited.
     */
    visited?: number;
    /**
     * The number of retry questions not visited.
     */
    'not-visited'?: number;
    /**
     * Specified as a number between 0 and 100, affected by forfeited configuration.
     */
    'percent-correct'?: number;
    /**
     * The number of skipped retry questions.
     */
    'num-skipped'?: number;
    /**
     * The total time spent on critique/read-only page.
     */
    'seconds-review'?: number;
    /**
     * Specified as a number between 0 and 100, affected by forfeited configuration.
     */
    'percent-score'?: number;
    /**
     * The number of retry questions excluding unscored and pretest.
     */
    'num-question-scored'?: number;
};

export type Scored = {
    /**
     * The number of complete scored questions.
     */
    complete?: number;
    /**
     * The number of correct scored questions.
     */
    correct?: number;
    /**
     * The number of incomplete scored questions.
     */
    incomplete?: number;
    /**
     * The number of incorrect scored questions.
     */
    incorrect?: number;
    /**
     * The raw score if all remaining scored questions are correct.
     */
    'max-possible-score'?: number;
    /**
     * The percent score if all remaining scored questions are correct.
     */
    'max-possible-percent-score'?: number;
    /**
     * The number of scored questions.
     */
    questions?: number;
    /**
     * The number of rollover scored questions.
     */
    rollover?: number;
    /**
     * The sum of scored item scores, affected by forfeited configuration.
     */
    score?: number;
    /**
     * The total number of seconds spent answering scored questions.
     */
    seconds?: number;
    /**
     * The average time spent per scored question.
     */
    'seconds-average'?: number;
    /**
     * The average time spent on critique/read-only page.
     */
    'seconds-review-average'?: number;
    /**
     * The number of skipped scored questions.
     */
    skipped?: number;
    /**
     * The total number of points for scored questions regardless of whether the question was answered or correctness. Affected by forfeited configuration.
     */
    'points-all'?: number;
    /**
     * The total number of points for scored questions answered regardless of correctness. Affected by forfeited configuration.
     */
    'points-answered'?: number;
    /**
     * The number of scored questions visited.
     */
    visited?: number;
    /**
     * The number of scored questions not visited.
     */
    'not-visited'?: number;
    /**
     * Specified as a number between 0 and 100, affected by forfeited configuration.
     */
    'percent-correct'?: number;
    'num-skipped'?: number;
    /**
     * The total time spent on critique/read-only page.
     */
    'seconds-review'?: number;
    /**
     * Specified as a number between 0 and 100, affected by forfeited configuration.
     */
    'percent-score'?: number;
};

export type Skipped = {
    /**
     * Based on the skip configuration. Maximum number of questions that can be skipped in one cycle. Different values for cycle, run, and segment.
     */
    max?: number;
    count?: number;
    'count-scored'?: number;
    /**
     * Count of unanswered questions that are: (1) not in progress; (2) not rolled over; (3) not forfeited; and (4) do not match one of the skip sources.
     */
    'questions-not-counted'?: number;
    /**
     * SkipMax – Skipped, not less than 0. Not returned for in-progress results.
     */
    remaining?: number;
    /**
     * Specified as a number between 0 and 100. Not returned for in-progress results.
     */
    percentage?: number;
};

export type TimeBank = {
    /**
     * The maximum amount of time allowed for the time bank, traditionally rounded to three decimal places.
     */
    'max-minutes'?: number;
    /**
     * The percentage of time remaining in the time bank, traditionally rounded to three decimal places.
     */
    'percent-remaining'?: number;
    /**
     * The percentage of time used in the time bank, traditionally rounded to three decimal places.
     */
    'percent-used'?: number;
    /**
     * Number between 0-100 of minutes remaining in the time bank, traditionally rounded to three decimal places.
     */
    'remaining-minutes'?: number;
    /**
     * Number between 0-100 of minutes used in the time bank, traditionally rounded to three decimal places.
     */
    'used-minutes'?: number;
};

export type Total = {
    /**
     * The number of questions.
     */
    questions?: number;
    /**
     * Number of questions. Includes pretest and unscored. Includes rollover if incomplete result. Includes Skipped.NotCounted.
     */
    'question-all'?: number;
    /**
     * The number of complete scored questions.
     */
    complete?: number;
    /**
     * The number of correct scored questions.
     */
    incomplete?: number;
    /**
     * The number of questions visited.
     */
    visited?: number;
    /**
     * The number of questions not visited.
     */
    'not-visited'?: number;
    /**
     * The number of questions visited but incomplete.
     */
    'num-skipped'?: number;
    /**
     * The number of rollover questions.
     */
    'num-rollovers'?: number;
    /**
     * The total number of seconds spent answering questions.
     */
    seconds?: number;
    /**
     * The total time spent on critique/read-only page.
     */
    'review-seconds'?: number;
    /**
     * The average time spent on critique/read-only page.
     */
    'average-review-seconds'?: number;
    /**
     * The average time spent per scored question.
     */
    'average-seconds'?: number;
    /**
     * Specified as a number between 0 and 100.
     */
    'percent-complete'?: number;
    /**
     * The number of questions marked.
     */
    marked?: number;
    /**
     * The number of questions marked that were correct.
     */
    'marked-correct'?: number;
    /**
     * The number of questions with notes.
     */
    'num-with-notes'?: number;
    /**
     * The number of questions with comments.
     */
    'num-with-comments'?: number;
};

export type Unscored = {
    /**
     * The number of unscored questions.
     */
    'num-questions'?: number;
    /**
     * The number of correct unscored questions.
     */
    correct?: number;
    /**
     * The number of incorrect unscored questions.
     */
    incorrect?: number;
    /**
     * The number of complete unscored questions.
     */
    complete?: number;
    /**
     * The number of incomplete unscored questions.
     */
    incomplete?: number;
    /**
     * The number of unscored questions visited.
     */
    visted?: number;
    /**
     * The number of unscored questions not visited.
     */
    'not-visited'?: number;
    /**
     * The number of skipped unscored questions.
     */
    'num-skipped'?: number;
};

export type ExamineeSegments = {
    /**
     * The sequence of the cycle for the examinee.
     */
    'cycle-sequence'?: number;
    /**
     * The sequence of the run for the examinee.
     */
    'run-sequence'?: number;
    /**
     * The sequence of the segment for the examinee.
     */
    'segment-sequence'?: number;
    /**
     * The start date of the segment in UTC.
     */
    'segment-start-utc'?: string;
    /**
     * The end date of the segment in UTC.
     */
    'segment-end-utc'?: string;
    /**
     * The table below includes the possible `segment-status` values.
     * **Segment Status**
     *
     * | Segment Status | Description                   |
     * |----------------|-------------------------------|
     * | 1              | The segment is in the past.   |
     * | 2              | The segment is current.       |
     * | 3              | The segment is in the future. |
     */
    'segment-status'?: number;
    /**
     * The sabbatical status for the examinee. False if Sabbatical cancelled or rejected or none taken.
     */
    sabbatical?: boolean;
    /**
     * The unique database identifier of the test result linked to the segment.
     */
    'result-id'?: number;
};

export type Result = {
    /**
     * The unique ITS database identifier of the longitudinal group.
     */
    'longitudinal-group-id'?: number;
    /**
     * The unique textual identifier of the longitudinal group.
     */
    'longitudinal-group-name'?: string | null;
    /**
     * The description of the longitudinal group.
     */
    'longitudinal-group-Description'?: string | null;
    /**
     * The unique ITS database identifier of the examinee.
     */
    'examinee-id'?: number;
    /**
     * The program's public or business identifier of the examinee. For instance, this may be a student ID. This identifier must be unique within the uniqueness scope as defined for the program. This is required for Creates if `program-examinee-system-id` is not provided. This is required for Updates if `examinee-id` and `program-examinee-system-id` are not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The program's system identifier of the examinee. This is typically a database identifier. This must be unique within the uniqueness scope defined for the program. This is required for Creates if `program-examinee-public-id` is not provided. This is required for Updates if `examinee-id` and `program-examinee-public-id` are not provided.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * Collection of segments.
     */
    segments?: Array<ExamineeSegments> | null;
};

export type Examinee2 = {
    /**
     * The unique ITS database identifier of the examinee. Required for Updates.
     */
    'examinee-id'?: number | null;
    /**
     * The program's system identifier of the examinee. This is typically a database identifier. This identifier must be unique within the uniqueness scope defined for the program. It is required for Creates if `program-examinee-public-id` is not provided. It is required for Updates if `examinee-id` and `program-examinee-public-id` are not provided.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's public or business identifier of the examinee. For instance, this may be a student ID. The identifier must be unique within the uniqueness scope as defined for the program. It is required for Creates if `program-examinee-system-id` is not provided. It is required for Updates if `examinee-id` and `program-examinee-system-id` are not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The program's unique Institutional Examinee identifier. The identifier must be unique within the uniqueness scope as defined for the program. The `program-institution-id` URL parameter is required when using this identifier.
     */
    'program-examinee-institution-id'?: string | null;
    'record-identifier'?: string | null;
    'registration-identifier'?: string | null;
    /**
     * If `true`, the examinee is active.
     */
    active?: boolean | null;
    /**
     * The table below describes each possible examinee status ID.
     * **Examinee Status ID**
     *
     * | Status ID | Description         |
     * |-----------|---------------------|
     * | 1         | Active              |
     * | 2         | Inactive            |
     * | 3         | Suspended           |
     * | 4         | Suspended Read-Only |
     */
    'examinee-status-id'?: number | null;
    /**
     * This is a program defined list. Example: Active, Graduated, …
     */
    'enrollment-status'?: string | null;
    /**
     * The examinee's last name.
     */
    'last-name'?: string | null;
    /**
     * The examinee's first name.
     */
    'first-name'?: string | null;
    /**
     * The examinee's full name. This is used for certificates and score reports.
     */
    'full-name'?: string | null;
    /**
     * The examinee's middle name.
     */
    'middle-name'?: string | null;
    /**
     * A word used to describe the examinee's status or profession. Examples include Mr, Mrs, Doctor, Professor, etc. The set of allowed possible values is configurable for the program.
     */
    title?: string | null;
    /**
     * The enrolled grade of the examinee.
     */
    grade?: string | null;
    /**
     * The academic major of the examinee. The set of allowed possible values is configurable for the program.
     */
    major?: string | null;
    /**
     * The gender of the examinee. The set of allowed possible values is configurable for the program.
     */
    gender?: string | null;
    /**
     * A pipe-separated list of program-specific codes that describe the examinee.
     */
    ethnicity?: string | null;
    /**
     * A pipe-separated list of program-specific codes that describe the examinee.
     */
    race?: string | null;
    /**
     * The three-letter ISO language code.
     */
    language?: string | null;
    /**
     * The examinee's date of birth. MM-DD-YYYY
     */
    'date-of-birth'?: string | null;
    /**
     * Set if the user does not want their information shared. The default is `false`.
     */
    'privacy-protected'?: boolean | null;
    /**
     * Set if a waiver is on file for an examinee.
     */
    waiver?: boolean | null;
    /**
     * The time zone that the examinee is in. See timezone/query for valid ID numbers.
     */
    'time-zone-id'?: number | null;
    /**
     * If `true`, the examinee honors daylights savings.
     */
    'use-daylight-savings'?: boolean | null;
    /**
     * Not Available
     */
    'photo-image'?: string | null;
    /**
     * Not Available
     */
    'photo-format'?: string | null;
    /**
     * The examinee's email address. Must be correctly formatted per RFC 5322.
     */
    email?: string | null;
    /**
     * The examinee's primary phone number.
     */
    'primary-phone'?: string | null;
    /**
     * The examinee's alternative phone number.
     */
    'alternate-phone'?: string | null;
    /**
     * The email addresses of the examinee's parents. This is comma delimited. Must be correctly formatted per RFC 5322.
     */
    'parent-email-addresses'?: string | null;
    /**
     * This is the preferred contact method of the examinee. The default is 1. The table below includes the supported contact methods.
     * **Contact Method**
     *
     * | Value | Description |
     * |-------|-------------|
     * | 1     | Email       |
     * | 4     | SMS         |
     */
    'preferred-contact-method'?: number | null;
    /**
     * The first line of the examinee's address.
     */
    address?: string | null;
    /**
     * The second line of the examinee's address.
     */
    address2?: string | null;
    /**
     * The third line of the examinee's address.
     */
    address3?: string | null;
    /**
     * The city that the examinee lives in.
     */
    city?: string | null;
    /**
     * The state that the examinee lives in.
     */
    state?: string | null;
    /**
     * The examinee's postal code.
     */
    'postal-code'?: string | null;
    /**
     * The examinee's three-letter ISO country code. This is validated to be three characters.
     */
    country?: string | null;
    /**
     * The company that the examinee works for. No additional validation is performed.
     */
    company?: string | null;
    /**
     * The examinee's job title. No additional validation is performed.
     */
    'job-title'?: string | null;
    /**
     * This element can contain an XML hierarchy of custom properties that are returned with the examinee information.
     */
    'custom-properties'?: Array<Property> | null;
    /**
     * If the test is timed, this number will be multiplied against each element that is timed, including overall time, section times, and item times. For instance, a 3 would give the examinee triple time. 1 = no change, this is the default. 0 = ignore timing, the test is untimed.
     */
    'time-factor'?: string | null;
    /**
     * The bit flag that can be used for program options. See program documentation. See options in Appendix A.
     */
    'delivery-options'?: number | null;
    /**
     * The bit flag that can be used for program overrides. See program documentation. See overrides in Appendix B.
     */
    'delivery-overrides'?: number | null;
    /**
     * The collection of institution elements.
     */
    institutions?: Array<Institution2> | null;
    /**
     * The names of the certifications associated with this examinee. Multiple certifications are returned as a pipe | separated list.
     */
    'certification-names'?: Array<string> | null;
};

export type ExamineeDataHolder1 = {
    /**
     * A collection of one or more examinee objects to create. The examinee object is documented above.
     */
    'examinee-data'?: Array<Examinee2> | null;
};

export type Institution2 = {
    /**
     * The unique ITS database identifier of the institution.
     */
    'institution-id'?: number;
    /**
     * The unique program identifier of an institution. Examinees are linked to this institution. The web API client must have access to this institution.
     */
    'program-institution-id'?: string | null;
    /**
     * The institution name.
     */
    name?: string | null;
    /**
     * The program's public or business identifier of the examinee. For instance, this may be a student ID. For programs that use a username to login, this is the username. This identifier must be unique within the uniqueness scope as defined for the program. It is required if `RecordIdentifier` is not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * This is required if the examinee is uniquely identified at the institution level. The table below includes the acceptable enrollment status values.
     * **Enrollment Status**
     *
     * | Value | Description  |
     * |-------|--------------|
     * | 1     | Enrolled     |
     * | 2     | Transferred  |
     * | 3     | Graduated    |
     * | 4     | Not Enrolled |
     */
    'enrollment-status'?: number;
};

export type ExamineeRecordResponse = {
    error?: ErrorClass;
    data?: RecordDataClass;
};

export type RecordDataClass = {
    [key: string]: never;
};

export type FormDefinitionModel = {
    /**
     * The unique database identifier of the form.
     */
    'form-id'?: number | null;
    /**
     * XML that defines the test definition. If not NULL, then this is a dynamic test.
     */
    'definition-xml'?: string | null;
    /**
     * A number that is incremented each time the `DefinitionXML` is updated for a rescore. The default value is 1.
     */
    'definition-version'?: number;
    /**
     * The source XML for Forms.DefinitionXML. Clients pass this XML to ITS through the form/definition API call, which transforms it into the format ITD expects and stores it in the Forms.DefinitionXML field.
     */
    'form-definition'?: string | null;
};

export type FormDefinitionResponse = {
    status?: StatusResponse;
};

export type FormDefinitionResponseReturn = {
    'form-definition'?: FormDefinitionResponse;
};

export type FormRequestBody = {
    /**
     * The unique form identifier.
     */
    'form-id': number;
    /**
     * The form-definition object containing all the data used to create the form.
     */
    'form-definition': string;
};

export type StatusResponse = 0 | 1 | 2 | 3 | 4;

export type FormCase = {
    /**
     * The name of the case.
     */
    name?: string | null;
    /**
     * The description of the case.
     */
    description?: string | null;
    /**
     * The rubric associated with the case.
     */
    'rubric-id'?: number;
    readonly 'case-slides'?: Array<FormCaseSlide> | null;
};

export type FormCaseSlide = {
    /**
     * Possible values:
     * | Case Type | Value |
     * | --------- | ----- |
     * | Examinee  | 1     |
     * | Assessor  | 2     |
     *
     */
    type?: number;
    /**
     * The name of case slide.
     */
    name?: string | null;
    /**
     * The display sequence within the case.
     */
    'display-sequence'?: number;
    /**
     * Set for assessor slides/
     */
    scored?: boolean;
};

/**
 * Update Form response
 * Returns the delete status of the form.
 */
export type FormDeleteAsyncResult = {
    /**
     * The unique ITS database identifier of the form.
     */
    'form-id'?: number;
    /**
     * The unique textual identifier of the form.
     */
    'form-name'?: string | null;
    /**
     * The delete status of the form. Possible values: deleted, skipped-linked-result.
     */
    status: string | null;
};

export type FormInsertAsyncRequestBody = {
    /**
     * Name of the form. Must be unique within test.
     */
    'form-name': string;
    /**
     * Unique database identifier of the test.
     */
    'test-id': number;
    /**
     * Alternative name of form.  Returned in result xml.  Also used in form selection if form not found
     */
    'alias-name'?: string | null;
    /**
     * A form description. Used for registration-based programs where the test contains forms that are different tests.
     */
    description: string;
    /**
     * The test driver version associated with this form.
     */
    'test-driver-version'?: string | null;
    /**
     * Used as part of encryption process for forms published from Item Workshop.  Not used for dynamic forms.
     */
    'content-key'?: string | null;
    /**
     * Set if the form is available for selection.
     */
    active?: boolean;
    /**
     * The three-letter ISO language code.  Forms are selected using target language or if this is not set.
     */
    language: string;
    /**
     * Categories are an optional way to balance forms across categories.  When selecting forms, the software will first determine the eligible forms, and if the forms are linked to a category, randomly select a category and select the form from that category to deliver.
     */
    category?: string | null;
    /**
     * Used when load balancing forms.  Forms can be grouped together for registration groups.
     */
    groups?: string | null;
    /**
     * This is the priority of the form.  Used to sort the forms when selecting.  Higher priority forms are selected first.
     */
    priority?: number | null;
    /**
     * Sets are used for rotating sets over time.  If used, each form is linked to a set number, and an active set number will be tracked for the test.  Only forms within the active set-number will be selected.
     */
    'set-number'?: number | null;
    /**
     * The date the form is available to be taken in UTC.
     */
    'start-utc'?: string | null;
    /**
     * End date the form is available in UTC.
     */
    'end-utc'?: string | null;
    /**
     * The target number of results.  Once this number is reached, the form will not be selected.
     */
    'target-number'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms.  This value is the minimum upload speed required to deliver a lab form.  If set, an examinee’s upload speed must be above this value or a non-lab form will be delivered.
     */
    'speed-min-upload'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms.  This value is the minimum download speed required to deliver a lab form.  If set, an examinee’s download speed must be above this value or a non-lab form will be delivered.
     */
    'speed-min-download'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms.  This value is the maximum latency allowed to deliver a lab form.  If set, an examinee’s latency to the lab portal must be below this value or a non-lab form will be delivered.
     */
    'speed-min-latency'?: number | null;
    /**
     * The date the form is available to be taken in UTC.
     */
    'activate-utc'?: string | null;
    /**
     * If Null or set, the form is considered equated, meaning that score reports are available (if any), and aggregate results are also available
     */
    equated?: boolean | null;
    /**
     * The date and time in UTC the form was equated (meaning all rescoring has occurred).
     */
    'equated-utc'?: string | null;
    /**
     * A message to be displayed on informational page at end of test instead of scores when the form is waiting for equating to be completed.
     */
    'equate-message'?: string | null;
    /**
     * If true, this form is accessible.
     */
    accessible?: boolean | null;
    /**
     * If true, this form is only available to practice events.
     */
    practice?: boolean | null;
    /**
     * Used when read-aloud forms is delivered.  Only one per test allowed.
     */
    'read-aloud'?: boolean | null;
    /**
     * If true, the form supports text to speech.
     */
    'text-to-speech'?: boolean | null;
    /**
     * If true, the test delivery system will require a secure browser.
     */
    'require-secure-browser'?: boolean | null;
    /**
     * Name of question pool for definition xml.  Maps to a pool name.
     */
    'question-pool'?: string | null;
};

/**
 * Create Form response
 * Returns the identifiers for the form created.
 */
export type FormInsertAsyncResult = {
    /**
     * The unique ITS database identifier of the form.
     */
    'form-id'?: number;
    /**
     * The unique textual identifier of the form.
     */
    'form-name'?: string | null;
};

export type FormModule = {
    /**
     * description of module.
     */
    description?: string | null;
    /**
     * sequence of module in form.
     */
    sequence?: number;
};

export type FormProject = {
    /**
     * Name of lab.
     */
    name?: string | null;
    /**
     * Sequence of project within form.
     */
    sequence?: number;
    /**
     * Number of tasks within project.
     */
    'num-tasks'?: number;
    /**
     * Number of ALII labs within project.
     */
    'num-alii'?: number;
    /**
     * Number of HTML labs within project.
     */
    'num-html'?: number;
    /**
     * Number of questions linked to project.
     */
    'num-questions'?: number;
    /**
     * Possible values:
     *
     * | Bit Flag                                                        | Bit Value |
     * | --------------------------------------------------------------- | --------- |
     * | 6  = Group all tasks onto one page                              | 32        |
     * | 7  = Display a checkbox for each task                           | 64        |
     * | 8  = Do not allow forward navigation until task(s) are complete | 128       |
     * | 9  = Requires advanced secure browser windowing                 | 256       |
     *
     *
     */
    'item-flags'?: number;
    /**
     * User who created project. Will be notified if ALII scoring sends task names not in project for scoring.
     */
    'create-user-id'?: number;
    /**
     * Last user who modified project. Will be notified if ALII scoring sends task names not in project for scoring.
     */
    'modify-user-id'?: number;
    readonly 'project-tasks'?: Array<FormProjectTask> | null;
    readonly 'project-labs'?: Array<FormProjectLab> | null;
};

export type FormProjectLab = {
    /**
     * The description of the lab used in the user interface.
     */
    description?: string | null;
    /**
     * The sequence of the lab within the project.
     */
    sequence?: number;
    /**
     * The table below shows the possible values for the project lab types attribute.
     *
     * | Lab Type | Value |
     * | -------- | ----- |
     * | URL      | 6     |
     * | ALII     | 7     |
     *
     */
    type?: number;
};

export type FormProjectTask = {
    /**
     * Name of the task (item).
     */
    name?: string | null;
};

/**
 * Query Form response
 * Returns a list of forms.
 */
export type FormQueryByFilterAsyncResult = {
    /**
     * Unique database identifier for the form.
     */
    'form-id': number;
    /**
     * Unique database identifier of the test.
     */
    'test-id': number;
    /**
     * Name of the form. Must be unique within test.
     */
    'form-name': string | null;
    /**
     * Unique textual identifier of the test.
     */
    'test-name': string | null;
    /**
     * Alternative name of form. Returned in result xml.
     */
    'alias-name'?: string | null;
    /**
     * A form description. Used for registration-based programs where the test contains forms that are actually different tests.
     */
    description: string | null;
    /**
     * The test driver version associated with this form.
     */
    'test-driver-version': string | null;
    /**
     * The version of the form.
     */
    'form-version'?: string | null;
    /**
     * Used as part of encryption process for forms published from Item Workshop. Not used for dynamic forms.
     */
    'content-key'?: string | null;
    /**
     * Unique identifier of published location (container and identifier) for forms published from Item Workshop. Not used for dynamic forms.
     */
    urid?: string | null;
    /**
     * Set to 1 for the first version of a dynamic form, and automatically incremented by 1 when a dynamic form is updated.
     */
    'definition-version'?: number | null;
    /**
     * Set if the form is available for selection.
     */
    active: boolean;
    /**
     * The three-letter ISO language code.� Forms are selected using target language or if this is not set.
     */
    language: string | null;
    /**
     * Categories are an optional way to balance forms across categories. When selecting forms, the software will first determine the eligible forms, and if the forms are linked to a category, randomly select a category and select the form from that category to deliver.
     */
    category?: string | null;
    /**
     * Used when load balancing forms.� Forms can be grouped together for registration groups.
     */
    groups?: string | null;
    /**
     * This is the priority of the form.� Used to sort the forms when selecting. Higher priority forms are selected first.
     */
    priority?: number | null;
    /**
     * Sets are used for rotating sets over time. If used, each form is linked to a set number, and an active set number will be tracked for the test. Only forms within the active set-number will be selected.
     */
    'set-number'?: number | null;
    /**
     * The date the form is available to be taken in UTC.
     */
    'start-utc'?: string | null;
    /**
     * End date the form is available in UTC.
     */
    'end-utc'?: string | null;
    /**
     * The target number of results.� Once this number is reached, the form will not be selected.
     */
    'target-number'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms. This value is the minimum upload speed required to deliver a lab form. If set, an examinee's upload speed must be above this value or a non-lab form will be delivered.
     */
    'speed-min-upload'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms. This value is the minimum download speed required to deliver a lab form. If set, an examinee's download speed must be above this value or a non-lab form will be delivered.
     */
    'speed-min-download'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms. This value is the maximum latency allowed to deliver a lab form. If set, an examinee's latency to the lab portal must be below this value or a non-lab form will be delivered.
     */
    'speed-min-latency'?: number | null;
    /**
     * The date the form was created in UTC.
     */
    'create-utc'?: string | null;
    /**
     * The user who created the form.
     */
    'create-user-id'?: number | null;
    /**
     * The date the form information was modified in UTC.
     */
    'modify-utc'?: string | null;
    /**
     * The user who modified the form information.
     */
    'modify-user-id'?: number | null;
    /**
     * The date the form's activation status was modified in UTC.
     */
    'activate-utc'?: string | null;
    /**
     * The user who modified the form's activation status.
     */
    'activate-user-id'?: number | null;
    /**
     * If Null or set, the form is considered equated, meaning that score reports are available (if any), and aggregate results are also available
     */
    equated?: boolean | null;
    /**
     * The date and time in UTC the form was equated (meaning all rescoring has occured).
     */
    'equated-utc'?: string | null;
    /**
     * A message to be displayed on informational page at end of teest instead of scores when the form is waiting for equating to be completed.
     */
    'equate-message'?: string | null;
    /**
     * Number of all questions in form (includes the `y` in select `x` of `y`).
     */
    'num-overall-questions'?: number | null;
    /**
     * Number of questions (based on countme flag) in a test. Meta data, not used for delivery. Uses the `x` in select `x` of `y`.
     */
    'num-questions'?: number | null;
    /**
     * Number of reading passages in form.
     */
    'num-reading-passages'?: number | null;
    /**
     * Number of survey questions in form.
     */
    'num-survey-questions'?: number | null;
    /**
     * Based on all groups, but excludes survey and tutorial groups, and only include groups that have questions.
     */
    'question-seconds'?: number | null;
    /**
     * Based on first object in tree with type=survey
     */
    'survey-seconds'?: number | null;
    /**
     * Overall form timing. If timing is not set, then recursively calculated for each subgroup.
     */
    'total-test-seconds'?: number | null;
    /**
     * Based on first object in tree with type=tutorial.
     */
    'tutorial-seconds'?: number | null;
    /**
     * If true, this form is accessible.
     */
    accessible?: boolean;
    /**
     * If true, this form is only available to practice events.
     */
    practice?: boolean;
    /**
     * Used when read-aloud forms is delivered. Only one per test allowed.
     */
    'read-aloud'?: boolean;
    /**
     * If true, the form supports text to speech.
     */
    'text-to-speech'?: boolean;
    /**
     * If true, the test delivery system will require a secure browser.
     */
    'require-secure-browser'?: boolean;
    /**
     * Name of question pool for definition xml. Maps to a pool name.
     */
    'question-pool'?: string | null;
    readonly questions?: Array<FormQuestion> | null;
    readonly 'reporting-groups'?: Array<FormReporting> | null;
    readonly projects?: Array<FormProject> | null;
    readonly cases?: Array<FormCase> | null;
    readonly sets?: Array<FormSet> | null;
    /**
     * Collection of modules.  Modules are set for dynamic forms built from modules (sections) in existing forms.
     */
    readonly modules?: Array<FormModule> | null;
};

export type FormQuestion = {
    /**
     * The delivery section name that this item was delivered in.
     */
    section?: string | null;
    /**
     * The unique section identifier.
     */
    'section-id'?: number | null;
    /**
     * The sequence of the item in the section as defined.
     */
    'section-sequence'?: unknown;
    /**
     * The sequence that the item was defined within the test.
     */
    sequence?: number | null;
    /**
     * A flag indicating whether the item is active.
     */
    active?: boolean | null;
    /**
     * A flag indicating whether the item is a pretest item.
     */
    pretest?: boolean | null;
    /**
     * A flag indicating whether the item is unscored.
     */
    unscored?: boolean | null;
    /**
     * A flag indicating whether the item is configured to be always correct.
     */
    'always-correct'?: boolean | null;
    /**
     * Possible values:
     *
     * | Used On | Description |
     * | ------- | ----------- |
     * | 1       | Test        |
     * | 2       | Tutorial    |
     * | 3       | Survey      |
     *
     */
    'used-on'?: number | null;
    /**
     * This is present if the item is part of one or more reporting groups.� The names of the reporting groups are �|� delimited.
     */
    'reporting-groups'?: string | null;
    /**
     * Specified as a number between -5 and 5 if IRT, or 0 and 1 if pvalue.
     */
    difficulty?: number | null;
    /**
     * Used for 3-param rasch.
     */
    discrimination?: number | null;
    /**
     * Used for 3-param rasch.
     */
    'guess-probability'?: number | null;
    /**
     * The same item may be published for different languages.
     */
    language?: string | null;
    /**
     * The name of the item.
     */
    name?: string | null;
    /**
     * Clone family name.
     */
    'clone-family'?: string | null;
    /**
     * Pass through from item banking system. Item name (identifier) from external system.
     */
    'external-name'?: string | null;
    /**
     * The description of the question.
     */
    description?: string | null;
    /**
     * The item type being returned. See domain table. Different than ResultAnswers ItemType.
     */
    'item-type-id'?: number | null;
    /**
     * Custom item type code configured in item bank.
     */
    'Item-type-code'?: string | null;
    /**
     * Description of item type.
     */
    'Item-type-description'?: string | null;
    /**
     * Version of the item.
     */
    version?: string | null;
    /**
     * IX.� Language and version independent identifier.
     */
    'iw-item-id'?: number | null;
    /**
     * IX.� Bank identifier.
     */
    'iw-bank-id'?: number | null;
    /**
     * Number of exhibits for item.� Only set if item has exhibits. ITD 12.0+.
     */
    'exhibit-count'?: number | null;
    /**
     * Bitflag. See IW for database.
     */
    'item-flags'?: number | null;
    /**
     * Default GETDATE(). DateTime this record was created or modified.
     */
    'modify-utc'?: string | null;
    /**
     * A flag indicating whether the item is an open-ended item.
     */
    'open-ended'?: boolean | null;
    /**
     * A flag indicating whether the item is a polytomous item.
     */
    polytomous?: boolean | null;
    /**
     * The key for the question. For multiple choice questions, this is a number (1=A, etc). If the question has multiple answers, the key is separated by a comma.� For instance, a key of "1, 2" means that the user must answer A and B to get the item correct.
     */
    key?: string | null;
    /**
     * The maximum score the examinee could have gotten for this question.
     */
    'max-score'?: number | null;
    /**
     * The minimum score the examinee could have gotten for this question.
     */
    'min-score'?: number | null;
    /**
     * Score to set if item is skipped.
     */
    'skip-score'?: number | null;
    /**
     * Minimum score that answering or skipping question receives.
     */
    'min-correct-score'?: number | null;
    /**
     * Possible Values:
     *
     * | Method ID | Description            |
     * | --------- | ---------------------- |
     * | 0         | Standard               |
     * | 1         | Weighted  key          |
     * | 2         | Weighted  answer       |
     * | 3         | Min/Max                |
     * | 4         | Scripted               |
     * | 5         | Placeholder            |
     * | 6         | Multi-key  expressions |
     *
     */
    'scoring-method'?: number | null;
    /**
     * Links to Master.Rubrics.
     */
    'rubric-id'?: number | null;
    /**
     * Set if the item was required.
     */
    required?: boolean | null;
    /**
     * The name of the reading passage.
     */
    'reading-passage-name'?: string | null;
    /**
     * Maximum number of options that can be selected.� Multiple choice only, ITD 12.0+.
     */
    'max-select'?: number | null;
    /**
     * Minimum number of groups that must be answered for item to be considered complete. Matrix only, ITD 12.0+.
     */
    'min-groups'?: number | null;
    /**
     * Minimum number of options that must be selected for complete answer. Multiple choice only, ITD 12.0+.
     */
    'min-select'?: number | null;
    /**
     * Item timing (in seconds).
     */
    'max-time'?: number | null;
    /**
     * Populated if the item links to a set.
     */
    'form-set-id'?: number | null;
    /**
     * The sequence of the item within the set.
     */
    'set-sequence'?: number | null;
};

/**
 * Form Report Query Result
 * Contains form reporting data including groups and raw to scale mappings
 */
export type FormReportQueryResult = {
    groups?: Array<Group> | null;
};

export type FormReporting = {
    /**
     * The group name.� For classifications, this is the IndexCode.
     */
    'group-name'?: string | null;
    /**
     * The group description.� For classifications, this is the description.
     */
    description?: string | null;
    /**
     * Possible values:
     *
     * | Group Type | Description                   |
     * | ---------- | ----------------------------- |
     * | 0          | Test                          |
     * | 1          | Delivery  section             |
     * | 2          | Reporting  group              |
     * | 3          | Essay                         |
     * | 4          | Test  (replaces 0 if present) |
     * | 5  � 99    | External                      |
     *
     */
    'group-type'?: number;
    /**
     * Total number of pretest items.
     */
    'num-pretest'?: number;
    /**
     * Total number of questions.
     */
    'num-questions'?: number;
    /**
     * Determines the type of cut score. Possible values:
     *
     * | Method ID | Description    |
     * | --------- | -------------- |
     * | 0         | None           |
     * | 1         | Raw  score     |
     * | 2         | Scaled  score  |
     * | 3         | Percent  score |
     *
     */
    'pass-method-id'?: number;
    /**
     * The minimum score needed to pass.
     */
    'raw-cut-score'?: number;
    /**
     * The maximum possible score.
     */
    'raw-max-score'?: number;
    /**
     * The minimum possible score.
     */
    'raw-min-score'?: number;
    /**
     * Possible values:
     *
     * | Calculation ID | Description                |
     * | -------------- | -------------------------- |
     * | 1              | Number  correct            |
     * | 2              | Weighted  raw sum          |
     * | 3              | Unweighted  scaled average |
     * | 4              | Unweighted  scaled sum     |
     * | 5              | Scripted                   |
     * | 6              | None                       |
     * | 7              | Average  weighted scores   |
     * | 8              | Rasch  1 parameter (Logit) |
     * | 9              | Rasch  1 parameter (Logit  |
     *
     *
     */
    'raw-score-calculation-id'?: number;
    /**
     * Possible values:
     *
     * | Option Bit                                                                       | Bit Value |
     * | -------------------------------------------------------------------------------- | --------- |
     * | 1  = Examinee must pass this reporting group to pass the parent reporting group. | 1         |
     *
     *
     */
    'reporting-group-options'?: number;
    /**
     * The scaled score the examinee must achieve to pass.
     */
    'scaled-cut-core'?: number;
    /**
     * The maximum possible scaled score.
     */
    'scaled-max-score'?: number;
    /**
     * The minimum possible scaled score.
     */
    'scaled-min-score'?: number;
    /**
     * Possible values:
     *
     * | Method ID | Description         |
     * | --------- | ------------------- |
     * | 0         | None                |
     * | 1         | Raw  score          |
     * | 2         | Percentage  correct |
     * | 3         | Percentage  score   |
     * | 4         | Range               |
     * | 5         | Table               |
     * | 6         | Linear  min         |
     * | 7         | Linear  max         |
     * | 8         | Linear  Bisection   |
     * | 9         | Linear  Min/Max     |
     *
     *
     */
    'scaling-method-id'?: number;
    /**
     * Number of digits to the right of decimal.� Only applies for calculated scores.
     */
    'scaling-precision'?: number;
    /**
     * Only applies for calculated scores.
     * Possible values:
     *
     * | Method ID | Description |
     * | --------- | ----------- |
     * | 0         | None        |
     * | 1         | Traditional |
     * | 2         | Truncate    |
     *
     */
    'scaling-rounding-method-id'?: number;
    /**
     * Optional sort order for reporting groups.
     */
    'sort-order'?: number;
    /**
     * Multiple for raw score.� Applied before RawScore set.
     */
    weight?: number;
};

export type FormSet = {
    /**
     * The unique database identifier of the bank.
     */
    'iw-bank-id'?: number | null;
    /**
     * The unique file identifier within the bank.
     */
    'iw-item-id'?: number | null;
    /**
     * Possible Values:
     *
     * | Form Set Type        | Value |
     * | -------------------- | ----- |
     * | Reading  passage     | 1     |
     * | Article              | 2     |
     * | Case                 | 3     |
     * | Live  in application | 4     |
     * | Lab                  | 5     |
     *
     */
    'form-set-type-id'?: number | null;
    /**
     * The URID of the frameset if it was created in the pool.
     */
    'frameset-urid'?: string | null;
    /**
     * The URID of the reading passage.
     */
    'passage-urid'?: string | null;
    /**
     * Used if the set is an article.
     */
    description?: string | null;
    /**
     * The URID of the article.
     */
    'article-url'?: string | null;
    /**
     * A flag indicating whether the set is grouped on the same page in the user interface.
     */
    'group-for-display'?: boolean | null;
    /**
     * A flag indicating whether the set order is randomized.
     */
    'random-order'?: boolean | null;
    /**
     *
     * | Bit Flag                                                        | Bit Value |
     * | --------------------------------------------------------------- | --------- |
     * | 6  = Group all tasks onto one page                              | 32        |
     * | 7  = Display a checkbox for each task                           | 64        |
     * | 8  = Do not allow forward navigation until task(s) are complete | 128       |
     * | 9  = Requires advanced secure browser windowing                 | 256       |
     *
     */
    'item-flags'?: number | null;
    /**
     * A flag indicating whether the set is inactive.
     */
    inactive?: boolean | null;
    /**
     * A flag indicating whether the set is a pretest set.
     */
    pretest?: boolean | null;
};

export type FormUpdateAsyncRequestBody = {
    /**
     * Unique database identifier for the form.
     */
    'form-id': number;
    /**
     * Name of the form. Must be unique within test.
     */
    'form-name'?: string | null;
    /**
     * Alternative name of form.  Returned in result xml.  Also used in form selection if form not found.
     */
    'alias-name'?: string | null;
    /**
     * A form description. Used for registration-based programs where the test contains forms that are different tests.
     */
    description?: string | null;
    /**
     * The test driver version associated with this form.
     */
    'test-driver-version'?: string | null;
    /**
     * Used as part of encryption process for forms published from Item Workshop.  Not used for dynamic forms.
     */
    'content-key'?: string | null;
    /**
     * Set if the form is available for selection.
     */
    active?: boolean | null;
    /**
     * The three-letter ISO language code.  Forms are selected using target language or if this is not set.
     */
    language?: string | null;
    /**
     * Categories are an optional way to balance forms across categories.  When selecting forms, the software will first determine the eligible forms, and if the forms are linked to a category, randomly select a category and select the form from that category to deliver.
     */
    category?: string | null;
    /**
     * Used when load balancing forms.  Forms can be grouped together for registration groups.
     */
    groups?: string | null;
    /**
     * This is the priority of the form.  Used to sort the forms when selecting.  Higher priority forms are selected first.
     */
    priority?: number | null;
    /**
     * Sets are used for rotating sets over time. If used, each form is linked to a set number, and an active set number will be tracked for the test. Only forms within the active set-number will be selected.
     */
    'set-number'?: number | null;
    /**
     * The date the form is available to be taken in UTC.
     */
    'start-utc'?: string | null;
    /**
     * End date the form is available in UTC.
     */
    'end-utc'?: string | null;
    /**
     * The target number of results. Once this number is reached, the form will not be selected.
     */
    'target-number'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms. This value is the minimum upload speed required to deliver a lab form. If set, an examinee’s upload speed must be above this value or a non-lab form will be delivered.
     */
    'speed-min-upload'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms. This value is the minimum download speed required to deliver a lab form. If set, an examinee’s download speed must be above this value or a non-lab form will be delivered.
     */
    'speed-min-download'?: number | null;
    /**
     * This is used for tests that have statistically equivalent lab and non-lab forms. This value is the maximum latency allowed to deliver a lab form. If set, an examinee’s latency to the lab portal must be below this value or a non-lab form will be delivered.
     */
    'speed-min-latency'?: number | null;
    /**
     * The date the form's activation status was modified in UTC.
     */
    'activate-utc'?: string | null;
    /**
     * If Null or set, the form is considered equated, meaning that score reports are available (if any), and aggregate results are also available
     */
    equated?: boolean | null;
    /**
     * The date and time in UTC the form was equated (meaning all rescoring has occurred).
     */
    'equated-utc'?: string | null;
    /**
     * A message to be displayed on informational page at end of test instead of scores when the form is waiting for equating to be completed.
     */
    'equate-message'?: string | null;
    /**
     * If true, this form is accessible.
     */
    accessible?: boolean | null;
    /**
     * If true, this form is only available to practice events.
     */
    practice?: boolean | null;
    /**
     * Used when read-aloud forms is delivered.  Only one per test allowed.
     */
    'read-aloud'?: boolean | null;
    /**
     * If true, the form supports text to speech.
     */
    'text-to-speech'?: boolean | null;
    /**
     * If true, the test delivery system will require a secure browser.
     */
    'require-secure-browser'?: boolean | null;
};

/**
 * Update Form response
 */
export type FormUpdateAsyncResult = {
    /**
     * The unique ITS database identifier of the form.
     */
    'form-id'?: number;
    /**
     * The unique textual identifier of the form.
     */
    'form-name'?: string | null;
    /**
     * The update status of the form. Possible values: updated, skipped–no-changes.
     */
    status: string | null;
};

export type Group = {
    description?: string | null;
    groupName?: string | null;
    groupType?: number | null;
    numPretest?: number | null;
    numQuestions?: number | null;
    passMethodId?: number | null;
    rawCutScore?: number | null;
    rawMaxScore?: number | null;
    rawMinScore?: number | null;
    rawScoreCalculationId?: number | null;
    reportingGroupOptions?: number | null;
    scaledCutScore?: number | null;
    scaledMaxScore?: number | null;
    scaledMinScore?: number | null;
    scalingMethodId?: number | null;
    scalingPrecision?: number | null;
    scalingRoundingMethodId?: number | null;
    sortOrder?: number | null;
    weight?: number | null;
    rawToScaleMappings?: Array<RawToScaleMapping> | null;
};

/**
 * Raw To Scale Mapping
 * Maps a range of raw scores to a specific scaled score
 */
export type RawToScaleMapping = {
    rawMin?: number | null;
    rawMax?: number | null;
    scaledScore?: number | null;
};

export type ValidationProblemDetails = {
    type?: string | null;
    title?: string | null;
    status?: number | null;
    detail?: string | null;
    instance?: string | null;
    errors?: {
        [key: string]: Array<string>;
    } | null;
    [key: string]: unknown | (string | null) | (string | null) | (number | null) | (string | null) | (string | null) | ({
        [key: string]: Array<string>;
    } | null) | undefined;
};

/**
 * Inventory
 * Model object for Inventory
 */
export type InventoryQueryResponse = {
    /**
     * The package code name.
     */
    'package-code'?: string | null;
    /**
     * The number originally purchased in the order.
     */
    purchased?: number | null;
    /**
     * The number of inventory that is still available.
     */
    available?: number | null;
    /**
     * The number of inventory that has been activated.
     */
    activated?: number | null;
    /**
     * The number of inventory that is now expired.
     */
    expired?: number | null;
    /**
     * The number of inventory that have been removed.
     */
    removed?: number | null;
};

export type IbXmlTestResponse = {
    /**
     * The published test in ItemBankXML format
     */
    'ibxml-string'?: string | null;
    /**
     * UTC date/time of the test publish
     */
    'last-published-utc'?: string | null;
    /**
     * True if the published test is still in preview mode
     */
    preview?: boolean;
};

/**
 * ImportQueryDetail
 * Item Workshop Import Query response detail object.
 */
export type ImportQueryDetail = {
    /**
     * Item, File, or Form.
     */
    'resource-type': string;
    /**
     * The name of the form.
     */
    'resource-name': string;
    /**
     * The language of the import.
     */
    'resource-language': string;
    /**
     * The version of the resource.
     */
    'resource-version': string;
    /**
     * Added, Updated, Unchanged (Skipped), Error.
     */
    status: string;
};

/**
 * ImportQueryError
 */
export type ImportQueryError = {
    'error-type'?: number | null;
    'resource-name'?: string | null;
    'error-description'?: string | null;
};

export type ImportQueryResponse = {
    'import-id'?: number | null;
    /**
     * The format of this import.
     */
    'import-format'?: string | null;
    /**
     * The unique database identifier of the folder where data was imported.
     */
    'folder-id'?: number | null;
    /**
     * The date and time this import call started.
     */
    'start-utc'?: string | null;
    /**
     * The date and time this import call completed.
     */
    'end-utc'?: string | null;
    /**
     * Details about each file imported.
     */
    details: Array<ImportQueryDetail>;
    /**
     * Collection of errors from the import.
     */
    errors?: Array<ImportQueryError> | null;
};

/**
 * Import - Synchronous response
 * Item Workshop Import response for a single, synchronous call.
 */
export type ImportResponse = {
    /**
     * The unique ITS database identifier of the import.
     */
    'import-id'?: number;
    /**
     * The unique ITS database identifier of the bank provided as part of configuration.
     */
    'bank-id'?: number;
    /**
     * The format of this import.
     */
    'import-format': string;
    /**
     * The unique database identifier of the folder where data was imported.
     */
    'folder-id': number;
    /**
     * The date and time this import call started.
     */
    'start-utc': string;
    /**
     * The date and time this import call completed.
     */
    'end-utc': string;
    /**
     * Details about each file imported.
     */
    details: Array<ImportResponseDetail>;
    /**
     * Collection of errors from the import.
     */
    errors?: Array<ImportResponseError> | null;
};

/**
 * Import - Asynchronous response
 * Item Workshop Import response for a batch, asynchronous call.
 */
export type ImportResponseAsync = {
    /**
     * The unique ITS database identifier of the import.
     */
    'import-id'?: number;
    /**
     * The unique ITS database identifier of the bank provided as part of configuration.
     */
    'bank-id'?: number;
};

/**
 * Import response detail object
 * Item Workshop Import response detail object, used in synchronous call.
 */
export type ImportResponseDetail = {
    /**
     * Item, File, or Form.
     */
    'resource-type': string;
    /**
     * The name of the form.
     */
    'resource-name': string;
    /**
     * The language of the import.
     */
    'resource-language': string;
    /**
     * The version of the resource.
     */
    'resource-version': string;
    /**
     * Added, Updated, Unchanged (Skipped), Error.
     */
    status: string;
};

/**
 * Import response error object
 * Item Workshop Import response error object, used in synchronous call.
 */
export type ImportResponseError = {
    /**
     * The type of import error the current error is. Can be the resource type or “General”.
     */
    'error-type'?: string | null;
    /**
     * If this is resource-level error returns resource name of resource in the current folder.
     */
    'resource-name'?: string | null;
    /**
     * Error description.
     */
    'error-description'?: string | null;
};

export type LongitudinalGroupExamineResponse = {
    /**
     * The database identifier of the longitudinal group.
     */
    'longitudinal-group-id'?: number;
    /**
     * The name of the longitudinal group.
     */
    'longitudinal-group-name'?: string | null;
    /**
     * The unique database identifier of the examinee.
     */
    'examinee-id'?: number;
    /**
     * The program's public or business identifier of the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The program's system identifier of the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The status of the examinee in the longitudinal group. Possible values: skipped-not-found, skipped-no-changes, skipped-exists, created, updated, deleted, not-able-to-delete-records-linked, skipped-linked-results, inactivated-results-linked, inactivated.
     */
    status?: string | null;
};

export type LongitudinalGroupExaminee = {
    /**
     * The unique ITS database identifier of the longitudinal group.
     */
    'longitudinal-group-id'?: number | null;
    /**
     * The unique textual identifier of the longitudinal group.
     */
    'longitudinal-group-name'?: string | null;
    'longitudinal-group-description'?: string | null;
    /**
     * The unique ITS database identifier of the examinee.
     */
    'examinee-id'?: number | null;
    /**
     * The program's public or business identifier of the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The program's system identifier of the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The form group that the examinee is assigned to. This determines the forms that are available for the examinee who is within a fixed-form longitudinal group. If this parameter is provided, the examinee receives a form linked to this form group.
     */
    'form-group'?: string | null;
    /**
     * If true, the examinee can test and actively participate.
     */
    active?: boolean;
    /**
     * If true, the examinee is given read-only access to the longitudinal group.
     */
    'read-only'?: boolean;
};

export type Message = {
    /**
     * Unique record identifier for each message sent.
     */
    'message-id'?: number;
    /**
     * Program ID of the examinee that the email was sent to.
     */
    'program-id'?: number;
    /**
     * ITS Unique ID of the examinee
     */
    'examinee-id'?: number;
    /**
     * The program’s system identifier of the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program’s public or business identifier of the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The ID type of message sent.
     */
    'message-type-id'?: number;
    /**
     * The ID of the type of device the message was sent from
     */
    'send-type-id'?: number;
    /**
     * Email address of the examinee (email only)
     */
    'to-email'?: string | null;
    /**
     * Description of the TO email address used. (email only)
     */
    'to-description'?: string | null;
    /**
     * From Address used when sending emails. (email only)
     */
    'from-email'?: string | null;
    /**
     * Description of the FROM email address used. (email only)
     */
    'from-description'?: string | null;
    /**
     * ReplyTo Address that was used when sending emails (email only)
     */
    'to-reply'?: string | null;
    /**
     * Phone number the SMS message was sent to. (SMS message only)
     */
    'phone-number'?: string | null;
    /**
     * Subject text of the email message
     */
    subject?: string | null;
    /**
     * HTML or Text content of the email or text message.
     */
    'message-content'?: string | null;
    /**
     * Date and time the message record was created in UTC
     */
    'create-utc'?: string;
    /**
     * Date and time the message was sent in UTC.
     */
    'sent-utc'?: string;
    /**
     * Date and time the email service replied with a response.  If not set, then service has not notified us whether message has successfully been sent.
     */
    'service-response-utc'?: string;
    /**
     * Delivery/Delivered/Sent status for a successfully sent message, everything else will be the error status sent from the service.
     */
    'status-message'?: string | null;
};

export type Order = {
    /**
     * The program-assigned, alpha-numeric identifier of the order.  Make sure that this is a unique identifier on the program side when creating or updating the order record.
     */
    'order-code'?: string | null;
    /**
     * The unique database identifier of the event.
     */
    'event-id'?: number | null;
    /**
     * The unique database identifier of the user who placed the order. If not provided or if invalid, the username of the user uploading the order is saved instead.
     */
    'user-id'?: number | null;
    /**
     * The unique ITS database identifier of the examinee.
     */
    'examinee-id'?: number | null;
    /**
     * The program's system identifier of the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's public or business identifier of the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * Collection of packages.
     */
    packages: Array<Package>;
    /**
     * The shipping code. Values are defined for the program.
     */
    method?: string | null;
    /**
     * The shipping name for the order.
     */
    name?: string | null;
    /**
     * The shipping organization name for the order.
     */
    organization?: string | null;
    /**
     * The shipping phone number for the order.
     */
    phone?: string | null;
    /**
     * The three-letter ISO country code for the country that the order will be shipped to.
     */
    country?: string | null;
    /**
     * The first line of the shipping address for the order.
     */
    address1?: string | null;
    /**
     * The second line of the shipping address for the order.
     */
    address2?: string | null;
    /**
     * The third line of the shipping address for the order.
     */
    address3?: string | null;
    /**
     * The city that the order will be shipped to.
     */
    city?: string | null;
    /**
     * The state or region that the order will be shipped to.
     */
    'state-region'?: string | null;
    /**
     * The postal code that the order will be shipped to.
     */
    'postal-code'?: string | null;
};

/**
 * Removes all unused inventory from an order and removes customer access.
 */
export type OrderDelete = {
    'order-id'?: number | null;
    'order-code'?: string | null;
    'delete-reason'?: string | null;
};

export type OrderRequest = {
    orders?: Array<Order> | null;
};

export type OrderResponse = {
    /**
     * The unique ITS database identifier of the order.
     */
    'order-id'?: number | null;
    /**
     * The program-assigned, alpha-numeric identifier of the order.  Make sure that this is a unique identifier on the program side when creating or updating the order record.
     */
    'order-code'?: string | null;
    /**
     * The delete status of the order. Possible values: `removed-unused-inventory`, `no-remaining-inventory`.
     */
    status?: string | null;
    message?: string | null;
};

export type Package = {
    /**
     * The program-assigned, alpha-numeric identifier of the package. Packages are not changed when you update an existing order.
     */
    'package-code': string;
    /**
     * The quantity of the package. Package quantities are not changed when you update an existing order.
     */
    quantity: number;
    /**
     * The expiration date of the inventory in UTC.
     */
    'expiration-utc'?: string | null;
};

export type PackageForm = {
    /**
     * Unique database identifier for the test.
     */
    'test-id'?: number | null;
    /**
     * Unique textual identifier for the test.
     */
    'test-name'?: string | null;
    /**
     * Unique identifier for the form. Unique within TestID.
     */
    'form-id'?: number | null;
    /**
     * Name of the form. Must be unique within test.
     */
    'form-name'?: string | null;
    /**
     * A form description. Used for registration-based programs where the test contains forms that are actually different tests.
     */
    description?: string | null;
    /**
     * Forms selected using target language OR NULL for multi-language tests.
     */
    language?: string | null;
    /**
     * Start date the form is accessible.
     */
    'start-utc'?: string | null;
    /**
     * End date the form is accessible.
     */
    'end-utc'?: string | null;
    /**
     * If `true`, this form is accessible.
     */
    accessible?: boolean | null;
    /**
     * If `true`, this form is available only to practice events.
     */
    practice?: boolean | null;
    /**
     * If `true`, the test delivery system will require a secure browser.
     */
    'require-secure-browser'?: boolean | null;
};

export type RegistrationCreateRequest = {
    /**
     * ITS database unique identifier for the examinee.
     */
    'examinee-id'?: number | null;
    /**
     * Program’s unique public identifier for the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * Program’s unique system identifier for the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's unique Institutional Examinee identifier. The identifier must be unique within the uniqueness scope as defined for the program. The program-institution-id URL parameter is required when using this identifier.
     */
    'program-examinee-institution-id'?: string | null;
    /**
     * Program’s registration name.
     */
    'program-registration-id'?: string | null;
    /**
     * Program’s unique order identifier.
     */
    order?: string | null;
    /**
     * Program’s unique session identifier.
     */
    'sales-order-line-number'?: string | null;
    /**
     * If set to 0, then the registration is inactive.
     */
    active?: boolean | null;
    /**
     * An identifier linking one or more forms for form selection.
     */
    group?: string | null;
    /**
     * Room description for the Institution.
     */
    room?: string | null;
    /**
     * Class description or name. ITS database unique identifier for the examinee.
     */
    'class-description'?: string | null;
    /**
     * Course Section Information
     */
    'course-section'?: string | null;
    /**
     * The maximum hours before this test must be completed.
     */
    'max-hours'?: number | null;
    /**
     * Start date of the registration in UTC.
     */
    'start-utc'?: string | null;
    /**
     * End date of the registration in UTC.
     */
    'end-utc'?: string | null;
    /**
     * Date record was created.
     */
    'created-utc'?: string | null;
    /**
     * User who created the registration.
     */
    'created-user-id'?: number | null;
    /**
     * Date record was last modified.
     */
    'modified-utc'?: string | null;
    /**
     * User who modified the registration.
     */
    'modify-user-id'?: number | null;
    /**
     * Date user's activation status last changed.
     */
    'activated-utc'?: string | null;
    /**
     * User who changed the registration's activation status.
     */
    'activate-user-id'?: number | null;
    tests?: Array<TestClass> | null;
};

export type RegistrationCreateUpdateRequest = {
    /**
     * ITS database unique identifier for the examinee.
     */
    'examinee-id'?: number | null;
    /**
     * Program’s unique public identifier for the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * Program’s unique system identifier for the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's unique Institutional Examinee identifier. The identifier must be unique within the uniqueness scope as defined for the program. The program-institution-id URL parameter is required when using this identifier.
     */
    'program-examinee-institution-id'?: string | null;
    /**
     * Program’s registration name.
     */
    'program-registration-id'?: string | null;
    /**
     * Program’s unique order identifier.
     */
    order?: string | null;
    /**
     * Program’s unique session identifier.
     */
    'sales-order-line-number'?: string | null;
    /**
     * If set to 0, then the registration is inactive.
     */
    active?: boolean | null;
    /**
     * An identifier linking one or more forms for form selection.
     */
    group?: string | null;
    /**
     * Room description for the Institution.
     */
    room?: string | null;
    /**
     * Class description or name. ITS database unique identifier for the examinee.
     */
    'class-description'?: string | null;
    /**
     * Course Section Information
     */
    'course-section'?: string | null;
    /**
     * The maximum hours before this test must be completed.
     */
    'max-hours'?: number | null;
    /**
     * Start date of the registration in UTC.
     */
    'start-utc'?: string | null;
    /**
     * End date of the registration in UTC.
     */
    'end-utc'?: string | null;
    /**
     * Date record was created.
     */
    'created-utc'?: string | null;
    /**
     * User who created the registration.
     */
    'created-user-id'?: number | null;
    /**
     * Date record was last modified.
     */
    'modified-utc'?: string | null;
    /**
     * User who modified the registration.
     */
    'modify-user-id'?: number | null;
    /**
     * Date user's activation status last changed.
     */
    'activated-utc'?: string | null;
    /**
     * User who changed the registration's activation status.
     */
    'activate-user-id'?: number | null;
    tests?: Array<TestClass> | null;
    /**
     * ITS database unique identifier for the registration.
     */
    'registration-id'?: number | null;
};

export type RegistrationDeleteStatus = {
    /**
     * The unique ITS database identifier of the registration.
     */
    'registration-id'?: number;
    /**
     * The unique program identifier of the registration.
     */
    'program-registration-id'?: string | null;
    /**
     * The delete status of the remote session. Possible values: deleted, skipped-has-results.
     */
    status?: string | null;
};

export type RegistrationImportResponse = {
    /**
     * ITS database unique identifier for the registration.
     */
    'registration-id'?: number | null;
    /**
     * Program’s registration name.
     */
    'program-registration-id'?: string | null;
    /**
     * The status of the registration's import
     */
    status?: string | null;
};

export type RegistrationQueryResponse = {
    /**
     * ITS database unique identifier for the examinee.
     */
    'examinee-id'?: number | null;
    /**
     * Program’s unique public identifier for the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * Program’s unique system identifier for the examinee.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's unique Institutional Examinee identifier. The identifier must be unique within the uniqueness scope as defined for the program. The program-institution-id URL parameter is required when using this identifier.
     */
    'program-examinee-institution-id'?: string | null;
    /**
     * The unique database identifier of the registration.
     */
    'registration-id'?: number | null;
    /**
     * The program’s unique identifier for the registration.
     */
    'program-registration-id'?: string | null;
    /**
     * Program’s unique order identifier.
     */
    order?: string | null;
    /**
     * Program’s unique session identifier.
     */
    'sales-order-line-number'?: string | null;
    /**
     * If set to 0, then the registration is inactive.
     */
    active?: boolean | null;
    /**
     * An identifier linking one or more forms for form selection.
     */
    group?: string | null;
    /**
     * Room description for the Institution.
     */
    room?: string | null;
    /**
     * Class description or name. ITS database unique identifier for the examinee.
     */
    'class-description'?: string | null;
    /**
     * Course Section Information
     */
    'course-section'?: string | null;
    /**
     * The maximum hours before this test must be completed.
     */
    'max-hours'?: number | null;
    /**
     * Start date of the registration in UTC.
     */
    'start-utc'?: string | null;
    /**
     * End date of the registration in UTC.
     */
    'end-utc'?: string | null;
    /**
     * Date record was created.
     */
    'created-utc'?: string | null;
    /**
     * User who created the registration.
     */
    'created-user-id'?: number | null;
    /**
     * Date record was last modified.
     */
    'modified-utc'?: string | null;
    /**
     * User who modified the registration.
     */
    'modify-user-id'?: number | null;
    /**
     * Date user's activation status last changed.
     */
    'activated-utc'?: string | null;
    /**
     * User who changed the registration's activation status.
     */
    'activate-user-id'?: number | null;
    tests?: Array<TestClass> | null;
};

export type RegistrationUpdateResponse = {
    /**
     * ITS database unique identifier for the registration.
     */
    'registration-id'?: number | null;
    /**
     * Program’s registration name.
     */
    'program-registration-id'?: string | null;
    /**
     * The unique ITS database identifier of the examinee.
     */
    'examinee-id'?: number | null;
    /**
     * The update status of the remote session. Possible values: skipped-exists, skipped-not-found, and updated
     */
    status?: string | null;
};

export type TestClass = {
    /**
     * The name of the test. Unique within program.
     */
    'test-name'?: string | null;
    /**
     * Name of the form. Must be unique within test.
     */
    'form-name'?: string | null;
    /**
     * Set if the test is a demonstration or sample test.
     */
    'test-demo'?: boolean | null;
    /**
     * The order in which the tests show up in the examinee's portal.
     */
    'test-display-sequence'?: number | null;
    /**
     * The three-letter ISO language code.
     */
    language?: string | null;
    /**
     * Possible bit flags that can be set to turn on or off options.
     */
    options?: number | null;
    /**
     * Possible bit flags that can be set to override configuration options that were made in the test or item.
     */
    overrides?: number | null;
    /**
     * The order in which the examinee has to take the test
     */
    'delivery-sequence'?: number | null;
    /**
     * If the test is timed, this number will be multiplied against each element that is timed, including overall time, section times, and item times. For instance, a “3” would give the examinee triple time. 1 = no change, this is the default. 0 = ignore timing, the test is untimed.
     */
    'time-factor'?: number | null;
    /**
     * A bit flag of remote proctor services that will be enabled for this registration test.
     */
    'remote-proctor-options'?: number | null;
    /**
     * A link to the RPVendorServices table, a table storing ITS’ supported remote proctoring vendor services.  If set, the exam will be delivered using this remote proctor vendor service.
     */
    'remote-vendor-id'?: number | null;
};

export type EventData = {
    'category-id'?: number | null;
    /**
     * Comments logged by the remote proctor.
     */
    comment?: string | null;
    /**
     * System identifier of the video that the event was recorded for.
     */
    'video-id'?: number | null;
    /**
     * Number of seconds into the video where the event happened.
     */
    'segment-anchor'?: number | null;
};

export type SessionData = {
    /**
     * The internal database identifier of the examinee.
     */
    'examinee-id'?: number;
    /**
     * The public identifier of the examinee. For example, a student identifier. Returned if available.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The external system identifier for the examinee. This is typically a database identifier. Returned if available.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * Collection of videos.
     */
    videos?: Array<VideoData> | null;
    /**
     * A URL that will return a JSON object containing the chat messages between a proctor and examinee during a remote proctor session. If `url-available-hours` is passed, the URL will expire within the value specified in the `url-available-hours` input parameter.
     */
    'chat-log-url'?: string | null;
    /**
     * A URL returning the photo of the examinee taken during remote proctor check-in. If `url-available-hours` is passed, the URL will expire within the value specified in the `url-available-hours` input parameter.
     */
    'photo-url'?: string | null;
    'photo-id-front-url'?: string | null;
    'photo-id-back-url'?: string | null;
    /**
     * Collection of events that were logged for the session.
     */
    events?: Array<EventData> | null;
};

export type VideoData = {
    /**
     * The unique identifier of the video.
     */
    'video-id'?: number;
    /**
     * If `true`, the video was flagged as suspicious. The video may contain evidence of cheating.
     */
    flagged?: boolean;
    /**
     * The url to retrieve a video. If `url-available-hours` is passed, the URL will expire within the value specified in the `url-available-hours` input parameter.
     */
    url?: string | null;
    /**
     * The date and time the video recording started.
     */
    'start-utc'?: string | null;
    /**
     * The date and time the video recording ended.
     */
    'end-utc'?: string | null;
    /**
     * The sequence of the video recording across all video recordings for the examinee within the session.
     */
    sequence?: number;
};

export type RemotePracticeCheck = {
    /**
     * The unique identifier of the system check.
     */
    'practice-check-id'?: number | null;
    /**
     * The program’s public or business identifier of the examinee.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
     */
    'program-institution-id'?: string | null;
    /**
     * The date and time the check was initiated.
     */
    'created-utc'?: string | null;
    /**
     * The browser or rendering engine used when the check was completed.
     */
    browser?: string | null;
    /**
     * Browser version of browser (or rendering engine) used.
     */
    'browser-version'?: string | null;
    /**
     * The webkit version of the browser.
     */
    'webkit-version'?: string | null;
    /**
     * The operating system used for the check.
     */
    'operating-system'?: string | null;
    /**
     * The WAN IP of the network connection.
     */
    'ip-address'?: string | null;
    /**
     * The agent string of the browser used.
     */
    'agent-string'?: string | null;
    /**
     * If true, the check was completed inside a secure browser or app.
     */
    'is-secure-browser'?: boolean | null;
    /**
     * Version of the secure browser if used.
     */
    'secure-browser-version'?: string | null;
    /**
     * Identifier of the secure browser found in the agent string.
     */
    'secure-browser-identifier'?: string | null;
    /**
     * Detected network upload speed.
     */
    'upload-speed-kbps'?: number | null;
    /**
     * Detected network download speed.
     */
    'download-speed-kbps'?: number | null;
    /**
     * The program’s unique identifier for the registration.
     */
    'program-registration-id'?: string | null;
    /**
     * If true, the examinee used the ITS Remote Proctor Connect mobile app as part of the system check.
     */
    'mobile-app-used'?: boolean | null;
    /**
     * If true, the network was able to connect to the streaming servers. If not returned, the check was not performed.
     */
    'passed-aws-check'?: boolean | null;
    /**
     * If true, the examinee indicated they were able to hear sound. If not returned, the check was not performed.
     */
    'passed-speaker-check'?: boolean | null;
    /**
     * If true, the audible input was detected from the microphone. If not returned, the check was not performed.
     */
    'passed-microphone-check'?: boolean | null;
    /**
     * If true, access to the camera was granted. If not returned, the check was not performed.
     */
    'passed-camera-check'?: boolean | null;
    /**
     * If true, the user’s stream was able to be successfully played back. If not returned, the check was not performed.
     */
    'passed-stream-check'?: boolean | null;
    /**
     * If true, all checks passed. If not returned, not all checks were completed.
     */
    'passed-all-checks'?: boolean | null;
};

export type Session = {
    /**
     * The unique identifier of the remote session. This parameter is required to update a remote session.
     */
    'session-code'?: string | null;
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description?: string | null;
    /**
     * The start date and time of the session in UTC.
     */
    'start-utc'?: string;
    /**
     * The end date and time of the session in UTC.
     */
    'end-utc'?: string;
    /**
     * The number of examinees participating in the remote session.
     */
    'reserve-number'?: number;
    /**
     * The number of minutes that the session is offset from UTC. This parameter is used only if `end-utc` is not provided. If it is provided, the session expiration is `end-utc`. If it is not provided, the expiration is midnight of the current day based on the offset, or eight hours after the start of the session, whichever is later. If `minutes-offset` is not provided, the offset is EST (-300) / EDT (-240).
     */
    'minutes-offset'?: number;
    /**
     * Limits the proctor to only see sessions linked to this `group-identifier`.
     */
    'group-identifier'?: string | null;
    /**
     * The ITS database identifier for the Event.
     */
    'event-id'?: number | null;
    /**
     * Bit flag to set different options. Leave blank to use the preconfigured Global Options set for your program. Talk to your program manager on why you would use this field.
     *
     * Bit Information:
     *
     * |     Bit Flag                   |     Bit Value |
     * |--------------------------------|---------------|
     * |     0=Examinee Login with first name, last name, and date of birth                            |     1         |
     * |     1=Show terms of agreement                                                                 |     2         |
     * |     2=Get photograph                                                                          |     4         |
     * |     3=Get identification card photos                                                          |     8         |
     * |     4=Disable recordings                                                                      |     16        |
     * |     5=Create new sessions from management page                                                |     32        |
     * |     6=Enable pause functionality                                                              |     64        |
     * |     7=Examinee login with registration and password                                           |     128       |
     * |     8=Mobile option if no camera available on device                                          |     256       |
     * |     9=Check-in / Greeter Tab                                                                  |     512       |
     * |     12=Approve all on check-in / Greeter Tab                                                  |     4096      |
     * |     13=Assign examinee to proctors                                                            |     8192      |
     * |     14=Assign roles to proctors                                                               |     16384     |
     * |     16=Require two cameras for the examinee                                                   |     65536     |
     * |     17=Filter out the ability to use virtual cameras. Requires ITS Secure Browsers            |     131072    |
     * |     19=Enable a secondary institution consent form. Requires configuration within the system. |     524288    |
     */
    'examinee-portal-options'?: number | null;
};

export type SessionCreateRequest = {
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description: string;
    /**
     * The start date and time of the session in UTC.
     */
    'start-utc': string;
    /**
     * The end date and time of the session in UTC.
     */
    'end-utc'?: string;
    /**
     * The ITS database identifier for the Event.
     */
    'event-id'?: number | null;
    /**
     * The number of examinees participating in the remote session.
     */
    'reserve-number'?: number;
    /**
     * The number of minutes that the session is offset from UTC. This parameter is used only if `end-utc` is not provided. If it is provided, the session expiration is `end-utc`. If it is not provided, the expiration is midnight of the current day based on the offset, or eight hours after the start of the session, whichever is later. If `minutes-offset` is not provided, the offset is EST (-300) / EDT (-240).
     */
    'minutes-offset'?: number;
    /**
     * Limits the proctor to only see sessions linked to this `group-identifier`.
     */
    'group-identifier'?: string | null;
    /**
     * Bit flag to set different options. Leave blank to use the preconfigured Global Options set for your program. Talk to your program manager on why you would use this field.
     *
     * Bit Information:
     *
     * |     Bit Flag                   |     Bit Value |
     * |--------------------------------|---------------|
     * |     0=Examinee Login with first name, last name, and date of birth                            |     1         |
     * |     1=Show terms of agreement                                                                 |     2         |
     * |     2=Get photograph                                                                          |     4         |
     * |     3=Get identification card photos                                                          |     8         |
     * |     4=Disable recordings                                                                      |     16        |
     * |     5=Create new sessions from management page                                                |     32        |
     * |     6=Enable pause functionality                                                              |     64        |
     * |     7=Examinee login with registration and password                                           |     128       |
     * |     8=Mobile option if no camera available on device                                          |     256       |
     * |     9=Check-in / Greeter Tab                                                                  |     512       |
     * |     12=Approve all on check-in / Greeter Tab                                                  |     4096      |
     * |     13=Assign examinee to proctors                                                            |     8192      |
     * |     14=Assign roles to proctors                                                               |     16384     |
     * |     16=Require two cameras for the examinee                                                   |     65536     |
     * |     17=Filter out the ability to use virtual cameras. Requires ITS Secure Browsers            |     131072    |
     * |     19=Enable a secondary institution consent form. Requires configuration within the system. |     524288    |
     */
    'examinee-portal-options'?: number | null;
    /**
     * The unique identifier of the remote session. This parameter is required to update a remote session.
     */
    'session-code'?: string | null;
};

export type SessionResponse = {
    /**
     * The unique identifier of the remote session.
     */
    'session-code': string;
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description: string;
    /**
     * The create status of the remote session. Possible values: `created`, `skipped–exists`.
     */
    status: string;
};

export type SessionUpdateRequest = {
    'user-id': number;
    code: number;
    /**
     * The unique identifier of the remote session. This parameter is required to update a remote session.
     */
    'session-code': string;
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description: string;
    /**
     * The start date and time of the session in UTC.
     */
    'start-utc': string;
    /**
     * The end date and time of the session in UTC.
     */
    'end-utc'?: string;
    /**
     * The number of examinees participating in the remote session.
     */
    'reserve-number'?: number;
    /**
     * The number of minutes that the session is offset from UTC. This parameter is used only if `end-utc` is not provided. If it is provided, the session expiration is `end-utc`. If it is not provided, the expiration is midnight of the current day based on the offset, or eight hours after the start of the session, whichever is later. If `minutes-offset` is not provided, the offset is EST (-300) / EDT (-240).
     */
    'minutes-offset'?: number;
};

export type SystemsCheckRecord = {
    /**
     * The unique identifier of the system check.
     */
    'system-check-id'?: number;
    /**
     * The date and time the check was initiated.
     */
    'created-utc'?: string;
    /**
     * The browser or rendering engine used when the check was completed.
     */
    browser?: string | null;
    /**
     * Browser version of browser (or rendering engine) used
     */
    'browser-version'?: string | null;
    /**
     * The webkit version of the browser.
     */
    'webkit-version'?: string | null;
    /**
     * The operating system used for the check.
     */
    'operating-system'?: string | null;
    /**
     * The WAN IP of the network connection.
     */
    'ip-address'?: string | null;
    /**
     * The agent string of the browser used.
     */
    'agent-string'?: string | null;
    /**
     * If true, the check was completed inside a secure browser or app.
     */
    'is-secure-browser'?: boolean;
    /**
     * Version of the secure browser if used
     */
    'secure-browser-version'?: string | null;
    /**
     * Identifier of the secure browser found in the agent string
     */
    'secure-browser-identifier'?: string | null;
    /**
     * Detected network upload speed
     */
    'upload-speed-kbps'?: number;
    /**
     * Detected network download speed
     */
    'download-speed-kbps'?: number;
    /**
     * If true, the examinee used the ITS Remote Proctor Connect mobile app as part of the system check.
     */
    'mobile-app-used'?: boolean;
    /**
     * If true, the network was able to connect to the streaming servers. If not returned, the check was not performed.
     */
    'passed-aws-check'?: boolean;
    /**
     * If true, the examinee indicated they were able to hear sound. If not returned, the check was not performed.
     */
    'passed-speaker-check'?: boolean;
    /**
     * If true, the audible input was detected from the microphone. If not returned, the check was not performed.
     */
    'passed-microphone-check'?: boolean;
    /**
     * If true, access to the camera was granted. If not returned, the check was not performed.
     */
    'passed-camera-check'?: boolean;
    /**
     * If true, the user’s stream was able to be successfully played back. If not returned, the check was not performed.
     */
    'passed-stream-check'?: boolean;
    /**
     * If true, all checks passed. If not returned, not all checks were completed.
     */
    'passed-all-checks'?: boolean;
};

export type ResultIds = {
    /**
     * The unique identifier of the result.
     */
    'result-id'?: Array<number> | null;
};

export type ResultUpdateResponse = {
    /**
     * The unique identifier of the result.
     */
    'result-id'?: number;
    /**
     * The update status of the remote session. Possible values: `updated`, `skipped–no-changes`, `skipped-error`.
     */
    status?: string | null;
};

/**
 * Sabbatical Model
 * Information for single Sabbatical
 */
export type Sabbatical = {
    /**
     * The unique ITS database identifier of the examinee’s sabbatical.
     */
    'examinee-sabbatical-id'?: number | null;
    /**
     * The unique ITS database identifier of the examinee.
     */
    'examinee-id'?: number | null;
    /**
     * The program’s system identifier of the examinee. This is typically a database identifier. This must be unique within the uniqueness scope defined for the program. This is required for creates if program-examinee-public-id is not provided. This is required for updates if examinee-id and program-examinee-public-id are not provided.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program’s public or business identifier of the examinee. For instance, this may be a student ID. This identifier must be unique within the uniqueness scope defined for the program. This is required for creates if program-examinee-system-id is not provided. This is required for updates if examinee-id and program-examinee-system-id are not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * Optional user-entered text for admin-elected sabbaticals.
     */
    request?: string | null;
    /**
     * Flag to show rejected or not. 0 or NULL is false and 1 is true or rejected.
     */
    rejected?: boolean | null;
    /**
     * Reason for the rejection of the sabbatical.
     */
    'reject-reason'?: string | null;
    /**
     * Notes for the sabbatical.
     */
    notes?: string | null;
    /**
     * The UTC date/time of the start of the sabbatical.
     */
    'start-utc'?: string | null;
    /**
     * The UTC date/time of the end of the sabbatical.
     */
    'end-utc'?: string | null;
    /**
     * Automatically generated Date/time when the sabbatical was originally created in UTC.
     */
    'created-utc'?: string;
    /**
     * Flag to show if the sabbatical was cancelled or not.
     */
    cancelled?: boolean | null;
    /**
     * Date/time in UTC when the sabbatical was cancelled. Automatically generated when the cancelled flag is set to 1.
     */
    'cancel-utc'?: string | null;
    /**
     * Sequence number of the Segment the sabbatical is for, if it is a Segment Sabbatical.
     */
    sequence?: number | null;
    /**
     * Flag for who created the sabbatical: 1 = Examinee, 0 or NULL = Admin
     */
    'sabbatical-option'?: boolean | null;
};

/**
 * Error
 * The object containing error information.
 */
export type Error1 = {
    /**
     * Unique record identifier for each Secure Browser Error.
     */
    'sb-error-id': number;
    /**
     * The customer’s unique Institution Code.
     */
    'program-institution-id'?: string | null;
    /**
     * Customer’s unique registration identifier.
     */
    'external-registration-id'?: string | null;
    /**
     * Agent Identifier of the Secure Browser.
     */
    'agent-id'?: string | null;
    /**
     * Name of the process causing the error.
     */
    'process-name'?: string | null;
    /**
     * The date and time in UTC of the error recorded.
     */
    'error-utc'?: string;
    /**
     * The number representing the error type.
     */
    'error-type'?: number;
    /**
     * The number representing the error list type.
     */
    'error-list'?: number;
    /**
     * State of the browser.
     */
    'browser-state'?: number;
    /**
     * Internal IP address of the machine running the Secure Browser.
     */
    'ip-address'?: string | null;
    /**
     * Secure Browser version that was used.
     */
    'version-id'?: string | null;
};

/**
 * Token
 * Request representing a token
 */
export type Token = {
    /**
     * The Environment to check the token against
     */
    environment: string | null;
    /**
     * The random string seed that was used to generate the original token in the GetToken() Secure Browser call.
     */
    'random-string': string | null;
    /**
     * The encrypted key returned by the GetToken() call made to the Secure Browser.
     */
    'encrypted-key': string | null;
    /**
     * The Agent Identifier associated with the Secure Browser.
     */
    'agent-identifier': string | null;
    /**
     * The version of the Secure Browser.
     */
    'sb-version': string | null;
};

export type Session1 = {
    /**
     * The program's unique identifier
     */
    'program-id'?: number;
    /**
     * The program’s name for the institution that is referenced
     */
    'program-institution-id'?: string | null;
    /**
     * The unique identifier of the remote session. This parameter is required to update a remote session.
     */
    'session-code'?: string | null;
    /**
     * The ITS database identifier for the Event.
     */
    'event-id'?: number | null;
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description?: string | null;
    /**
     * The start date and time of the session in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The end date and time of the session in UTC.
     */
    'end-utc'?: string | null;
    /**
     * Designate a single subject to restrict test delivery in the session to only those tests associated with the matching subject. Subject must exist and be linked to one or more tests via products.
     */
    subject?: string | null;
    /**
     * Options for the session's score reports:
     * 0: None
     * 1: Without Review
     * 2: Review without solutions
     * 3: eview with solutions(correct/incorrect displayed)
     */
    'score-report-options'?: number | null;
};

export type SessionCreateInput = {
    /**
     * The program's unique identifier
     */
    'program-id'?: number;
    /**
     * The program’s name for the institution that is referenced
     */
    'program-institution-id'?: string | null;
    /**
     * The unique identifier of the remote session. This parameter is required to update a remote session.
     */
    'session-code'?: string | null;
    /**
     * The ITS database identifier for the Event.
     */
    'event-id'?: number | null;
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description?: string | null;
    /**
     * The start date and time of the session in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The end date and time of the session in UTC.
     */
    'end-utc'?: string | null;
    /**
     * Designate a single subject to restrict test delivery in the session to only those tests associated with the matching subject. Subject must exist and be linked to one or more tests via products.
     */
    subject?: string | null;
    /**
     * Options for the session's score reports:
     * 0: None
     * 1: Without Review
     * 2: Review without solutions
     * 3: eview with solutions(correct/incorrect displayed)
     */
    'score-report-options'?: number | null;
};

export type SessionResponse1 = {
    /**
     * The unique identifier of the session.
     */
    'session-code'?: string | null;
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description?: string | null;
    /**
     * The status of the session
     */
    status?: string | null;
};

export type SessionUpdateInput = {
    /**
     * The program's unique identifier
     */
    'program-id'?: number;
    /**
     * The program’s name for the institution that is referenced
     */
    'program-institution-id'?: string | null;
    /**
     * The unique identifier of the remote session. This parameter is required to update a remote session.
     */
    'session-code'?: string | null;
    /**
     * The ITS database identifier for the Event.
     */
    'event-id'?: number | null;
    /**
     * The description of the session. This is displayed in the user interface for proctors.
     */
    description?: string | null;
    /**
     * The start date and time of the session in UTC.
     */
    'start-utc'?: string | null;
    /**
     * The end date and time of the session in UTC.
     */
    'end-utc'?: string | null;
    /**
     * Designate a single subject to restrict test delivery in the session to only those tests associated with the matching subject. Subject must exist and be linked to one or more tests via products.
     */
    subject?: string | null;
    /**
     * Options for the session's score reports:
     * 0: None
     * 1: Without Review
     * 2: Review without solutions
     * 3: eview with solutions(correct/incorrect displayed)
     */
    'score-report-options'?: number | null;
};

export type QuerySignalRDomainQueryResponse = {
    hostname?: string | null;
};

export type Examinee3 = {
    /**
     * The program's system identifier of the examinee. This is typically a database identifier. This identifier must be unique within the uniqueness scope defined for the program. It is required for Creates if `program-examinee-public-id` is not provided. It is required for Updates if `examinee-id` and `program-examinee-public-id` are not provided.
     */
    'program-examinee-system-id'?: string | null;
    /**
     * The program's public or business identifier of the examinee. For instance, this may be a student ID. The identifier must be unique within the uniqueness scope as defined for the program. It is required for Creates if `program-examinee-system-id` is not provided. It is required for Updates if `examinee-id` and `program-examinee-system-id` are not provided.
     */
    'program-examinee-public-id'?: string | null;
    /**
     * The examinee's email address.
     */
    email?: string | null;
    /**
     * The examinee's first name.
     */
    'first-name'?: string | null;
    /**
     * The examinee's middle name.
     */
    'middle-name'?: string | null;
    /**
     * The examinee's last name.
     */
    'last-name'?: string | null;
    /**
     * The first line of the examinee's address.
     */
    address1?: string | null;
    /**
     * The second line of the examinee's address.
     */
    address2?: string | null;
    /**
     * The third line of the examinee's address.
     */
    address3?: string | null;
    /**
     * The city that the examinee lives in.
     */
    city?: string | null;
    /**
     * The state that the examinee lives in.
     */
    state?: string | null;
    /**
     * The examinee's postal code.
     */
    postal?: string | null;
    /**
     * The examinee's three-letter ISO country code. This is validated to be three characters.
     */
    country?: string | null;
    /**
     * The examinee's primary phone number.
     */
    'primary-phone'?: string | null;
    /**
     * The examinee's alternative phone number.
     */
    'alternate-phone'?: string | null;
    /**
     * Not Available
     */
    'photo-image'?: string | null;
    /**
     * Not Available
     */
    'photo-format'?: string | null;
};

export type Property1 = {
    /**
     * Name of the property.
     */
    name?: string | null;
    /**
     * Value of the property.
     */
    value?: string | null;
};

export type Segment = {
    /**
     * Each segment must be specified in sequential order.
     */
    'segment-number'?: number | null;
    /**
     * If specified, then a timing block will be inserted around the segment's questions (outside of introduction displays) with this period for this segment.  If 0 is specified, then no overall timing will be enforced.  And if max-minutes is not passed in, then max-minutes will be set to the number of minutes based on the timed sections and groups within the segment, plus the break-minutes.
     */
    'max-minutes'?: number | null;
    /**
     * If specified, then this value will be used for break-minutes for this segment.  If not set, then the software will calculate the percentage of time allocated to this segment compared to all other segments, and set the break-minutes to the that percentage of the value set on the overall test.
     */
    'break-minutes'?: number | null;
    /**
     * Number from 1 to n where n is equal to or less than the number of sections in the test. This value specifies the starting section that will be delivered within this segment.  For the purpose of this parameter, a section is defined as a "DeliveryGroup" in the form specification of type 1 (standard section).
     */
    'start-delivery-section'?: number | null;
    /**
     * Number from 1 to n where n is equal to or less than the number of sections in the test. This value specifies the ending section that will be delivered within this segment. For the purpose of this parameter, a section is defined as a "DeliveryGroup" in the form specification of type 1 (standard section).  If not specified, then segment will be delivered to the end of test. This number can be the same as the start-delivery-section, which would be true in the case of a one section segment.  Sections can only be referenced in one segment.  For instance, you can not have a segment spanning 2-4 and 3-5 because sections 3 and 4 are referenced in two segments.
     */
    'end-delivery-section'?: number | null;
};

export type StartTestDataHolder = {
    examinee?: Examinee3;
    readonly 'examinee-xml'?: string | null;
    delivery?: StartTestDelivery;
    readonly 'delivery-xml'?: string | null;
    'program-registration-id'?: string | null;
    'start-test-options'?: number | null;
    'site-code'?: string | null;
};

export type StartTestDelivery = {
    /**
     * The unique identifier for the form.
     */
    'form-id'?: number | null;
    /**
     * The unique textual identifier of the test. Required if `product-code` is not supplied.
     */
    'test-name'?: string | null;
    /**
     * The unique form name. If this is not provided, the form is automatically selected. If this is provided, the form is validated to ensure it is active and authorized.
     */
    'form-name'?: string | null;
    /**
     * Forms may be linked one or more groups.  If specified, then form selection will only match forms that are linked to the form-group passed in.
     */
    'form-group'?: string | null;
    /**
     * Used in two ways. First, delivery groups can be linked to a pretest group. At delivery time, all delivery groups with a pretest-group reference are ignored if this pretest-group parameter on start does not match. Second, delivery groups can be linked to a pretest reference, which is dynamically used to match pretest items or sets managed outside of the test definition. When set on the delivery group, the delivery software will query the pretest references for items or sets that match the reference identifier and this pretest-group. If the pretest group is not passed in on start, then the delivery software will query for pretest references that match the reference identifier and are not linked to a pretest group. See the web service interface for managing pretest references for more information.
     */
    'pretest-group'?: string | null;
    /**
     * The unique textual identifier of the product to deliver.
     */
    'product-code'?: string | null;
    /**
     * The three-letter ISO language code. For multi-language tests, this is the code for the starting test language.
     */
    language?: string | null;
    /**
     * If timing is enabled and configured, this factor will be multiplied against the time set on all breaks.  For instance, “2” would provide double time on every break.  Break factor of 0 turns off the timing.  If not set, then time-factor will be used as the factor on breaks.
     */
    'break-factor'?: number | null;
    /**
     * The number of minutes allowed for break time.  Replaces test configuration with shared break time.  This value is not modified by break-factor if also passed in.
     */
    'break-minutes'?: number | null;
    /**
     * If the test is timed, this number will be multiplied against each element that is timed, including overall time, section times, and item times. For instance, a “3” would give the examinee triple time. 1 = no change, this is the default. 0 = ignore timing, the test is untimed.
     */
    'time-factor'?: number | null;
    /**
     *
     * In pipe delimited format for the following categories, in seconds.  Categories are all optional.  So, if timing was set for discrete items only, it might look like this: “30||60”.  This timing overrides test configuration for questions.  This is the only way to set timing for retries, pre-question dialogs, post-question surveys, and critique.  Categories:
     *
     * ·          Question - Discrete
     *
     * ·          Question - Set (any group with a reading or an article)
     *
     * ·          Question Retry- Discrete
     *
     * ·          Question Retry- Set
     *
     * ·          Post-question survey
     *
     *
     */
    'timing-defaults'?: string | null;
    /**
     * The software will compare this value to the overall time of the test, and calculate a time-factor that affects all timed areas including items.  Ignored if time-factor passed in.
     */
    'time-minutes-adjustment'?: number | null;
    /**
     * ?? Not supported
     */
    'time-extension'?: number | null;
    /**
     * The bit flag that enables test delivery options. See options in Appendix A.
     */
    options?: number | null;
    /**
     * The bit flag that allows test- or item-configured options to be overridden. See overrides in Appendix B.
     */
    overrides?: number | null;
    /**
     * When an examinee completes a test, this URL is called. This URL closes the secure browser if one is used.
     */
    'complete-url'?: string | null;
    /**
     * When an examinee pauses a test, this URL is called. This URL closes the secure browser if one is used.
     */
    'pause-url'?: string | null;
    /**
     * API-related errors navigate to this URL. If this is not provided, a built-in error page is used.
     */
    'error-url'?: string | null;
    /**
     * The table below includes the possible values for this parameter.
     * **Enforce Secure Browser**
     *
     * | Value | Description                                                            |
     * |-------|------------------------------------------------------------------------|
     * | 0     | Do not enforce the use of the ITS Secure Browser. This is the default. |
     * | 1     | Enforce the use of the ITS Secure Browser.                             |
     *
     */
    'enforce-secure-browser'?: boolean | null;
    /**
     * If a secure browser is required and if the API call is not made within a secure browser or app, this URL is called.
     */
    'secure-browser-error-url'?: string | null;
    /**
     * Enumeration. Provided from ITS. A default value is set if not provided.
     */
    'delivery-model-id'?: number | null;
    /**
     * The unique external identifier of the registration.
     */
    'external-registration-id'?: string | null;
    /**
     * The unique external identifier of the center delivering the test.
     */
    'external-center-id'?: string | null;
    /**
     * Unique external identifier of the order.
     */
    'external-order-id'?: string | null;
    /**
     * Unique external identifier of the session.
     */
    'external-session-id'?: string | null;
    /**
     * Station identifier.
     */
    'station-id'?: string | null;
    /**
     * Used to ensure that third party remote proctoring system is running correctly.  Test will stop if process is not running at any point during test delivery.
     */
    'process-name'?: string | null;
    /**
     * Test will stop if process-name is not process-id during test startup.
     */
    'process-id'?: string | null;
    /**
     * Test will stop if process-name does not have the hashed process-hash.
     */
    'process-hash'?: string | null;
    /**
     * Used for multi-segment delivery only.  Sent for multi-segment exams or exams that are delivered in multiple segments in a segment (for instance, a morning session and an afternoon session).  A collection of "segments" must be included for first segment started (which does not need to be the first segment), which will be used to define the test definition (this collection is only used for the initial start of the test).  At the time the test is started, normal random selection and ordering will be performed (if configured).  Once the order of delivery groups and questions and selection of pretest has been completed, the delivery software will break the delivery up across multiple segments based on the collection of segments that is passed in.
     */
    segment?: number | null;
    /**
     * The unique database identifier of the event.
     */
    'event-id'?: number | null;
    /**
     * Used for multi-segment delivery only.  A segments array is provided for multi-segment exams to define how to divide the test definition over the multiple segment period.  The segments array is only considered on the first launch of the test, and is used in conjunction with the segment parameter. While a form may consist of N sections, it is not required that all sections be included.  For instance, the segments can be limited to just section 3 of a form.
     */
    segments?: Array<Segment> | null;
    /**
     * A variables array is provided to the UI and can be used to pass customization information to the user interface.  The variables array must be sent for each start.
     */
    variables?: Array<Variable> | null;
    /**
     * Properties are passed through to result xml/json. Properties are converted to XML for Result XML.
     */
    'pass-through-properties'?: Array<Property1> | null;
};

export type Variable = {
    /**
     * Name of the variable.
     */
    name?: string | null;
    /**
     * Value of the variable.
     */
    value?: string | null;
};

/**
 * Query TestForms Response
 * Returns a list of test forms.
 */
export type TestFormsQueryResponse = {
    /**
     * Unique test identifier.
     */
    'test-id': number;
    /**
     * The name of the test. Unique within program.
     */
    'test-name': string | null;
    /**
     * Unique database identifier for the form.
     */
    'form-id': number;
    /**
     * Name of the form. The combination of name and language must be unique within a test.
     */
    'form-name': string | null;
    /**
     * The letter ISO code of the form language.
     */
    language: string | null;
    /**
     * A form description. Used for registration-based programs where the test contains forms that are actually different tests.
     */
    description?: string | null;
    /**
     * A flag indicating whether the form is active at the moment the API call was made.
     */
    active: boolean;
    /**
     * 1 = Outside active date range; 2 = Flagged as inactive.
     */
    'inactive-reason'?: number;
};

export type Institution3 = {
    /**
     * ID to join back to the form dates
     */
    'form-date-id'?: number | null;
    /**
     * A flag indicating whether all children institution have access to this form.
     */
    'all-children'?: boolean | null;
    /**
     * The unique program identifier of an institution. Only forms accessible by this institution are returned.  The web API client must have access to this institution.
     */
    'program-institution-id'?: string | null;
};

export type Item = {
    /**
     * Name of the Form Set/Item
     */
    name: string;
    /**
     * Pretest group the Form Set/Item is under
     */
    'pretest-group'?: string | null;
    /**
     * If true, this means the set/item is active and can be used as part of a Pretest.
     */
    active?: boolean;
};

/**
 * Pretest Reference Model
 * Information for single Pretest Reference
 */
export type PretestReference = {
    /**
     * Unique Identifier for the items or sets being updated, associated with a FormQuestionID or FormSetID.
     */
    identifier?: string;
    /**
     * List of items that belong to this identifier.
     */
    items?: Array<Item> | null;
    /**
     * List of form sets that belong to this identifier.
     */
    sets?: Array<_Set> | null;
};

/**
 * Pretest References Model
 * List of  Pretest Reference objects returned from a query or set to be imported.
 */
export type PretestReferences = {
    /**
     * List of Pretest Reference objects.
     */
    'pretest-references': Array<PretestReference>;
};

/**
 * A form set under a Pretest Reference Identifier
 */
export type _Set = {
    /**
     * Name of the Form Set/Item
     */
    name: string;
    /**
     * Pretest group the Form Set/Item is under
     */
    'pretest-group'?: string | null;
    /**
     * If true, this means the set/item is active and can be used as part of a Pretest.
     */
    active?: boolean;
};

export type TestCreateRequest = {
    /**
     * Description of the test.  This is the description shown by StartTest.  Note that description is varchar. Localized version in Translations.
     */
    description?: string | null;
    /**
     * The languages the test is available in.  This is a comma delimited list.
     */
    languages?: string | null;
    /**
     * Program specific version associated with test.  If used by a program, must be populated either by a database trigger or custom publishing sproc.
     */
    'program-version'?: string | null;
    /**
     * Set if the test is a demonstration or sample test.
     */
    demo?: boolean | null;
    /**
     * If true, this test can be used by our ITS test simulation software.
     */
    simulation?: boolean | null;
    /**
     * The type of test (test, quiz, tutorial, survey, dynamic pool, flex pool, adaptive pool). Maps to dbo.TestTypes in the IW database.
     *
     * | TestTypeID | Code          |
     * |------------|---------------|
     * | 0          | Test          |
     * | 1          | Section       |
     * | 2          | Tutorial      |
     * | 3          | Survey        |
     * | 4          | Test Template |
     * | 5          | Quiz          |
     * | 6          | Dynamic Test  |
     * | 7          | Dynamic Pool  |
     * | 8          | Flex Pool     |
     * | 9          | Adaptive Pool |
     * | 10         | Article Block |
     * | 11         | Content Block |
     *
     */
    'test-type-id'?: number | null;
    /**
     * Bit flag for test usages
     *
     * | Bit Flag                                                  | Bit Value |
     * |-----------------------------------------------------------|-----------|
     * | 1 = Class assignment (home / proctored)                   | 1         |
     * | 2 = Scheduled administrations                             | 2         |
     * | 3 = Cohort administrations                                | 4         |
     * | 4 = Class practice (always available)                     | 8         |
     * | 5 = Class proctored assignment                            | 16        |
     * | 6 = Sample test for system verification                   | 32        |
     * | 7 = Simulation test                                       | 64        |
     * | 8 = System check test                                     | 128       |
     * | 9 = Program test available for institution administrators | 256       |
     * | 10 = Remote proctor onboarding test                       | 512       |
     * | 11 = Survey UI                                            | 1024      |
     *
     */
    'test-usages'?: number | null;
    /**
     * The number of hours before a test is considered abandoned.  If NULL, then no restartable results are considered abandoned.  If 0, then all restartable results are considered abandoned, unless active within 30 minutes.
     */
    'abandoned-hours'?: number | null;
    /**
     * The date form selection delivery counts should begin from in UTC.
     */
    'form-selection-start-utc'?: string | null;
    /**
     * Number of days that a set is active before rotating to next set.
     */
    'set-days'?: number | null;
    /**
     * Current set number. Must be set for sets to be considered in form selection.
     */
    'set-number'?: number | null;
    /**
     * Start date when current set was selected in UTC
     */
    'set-start-utc'?: string | null;
    /**
     * All variations will select the form least seen by examinee.
     *
     * | Value | Description                                        |
     * |-------|----------------------------------------------------|
     * | 1     | balance based on counts of delivery                |
     * | 2     | random form selection (used for very high volumes) |
     * | 3     | institutions dates, then do random form selection  |
     *
     */
    'test-form-selection-id'?: number | null;
    /**
     * Period for tracking max attempts.
     */
    'max-attempts-days'?: number | null;
    /**
     * Total number of attempts to pass that an examinee gets within max-attempt-days.
     */
    'max-attempts'?: number | null;
    /**
     * Minimum number of days that must elapsed before an examinee can retest on any form of the test.
     */
    'min-test-retake-days'?: number | null;
    /**
     * The number of days that must pass before a person can see a form again.
     */
    'min-retest-days'?: number | null;
    /**
     * Links category to a subject. Subjects may be program or institution defined. Institution subjects may be defined anywhere in the hierarchy,and are available to the institution and its children.
     */
    'subject-id'?: number | null;
    /**
     * Difficulty of test.
     * **Possible Values**
     *
     * | Test Difficulty | Value |
     * |-----------------|-------|
     * | Easy            | 1     |
     * | Moderate        | 2     |
     * | Hard            | 4     |
     *
     */
    'test-difficulty-id'?: number | null;
    /**
     * Used for Live in Application exams. For Windows, this is the class code.
     */
    'application-identifier-windows'?: string | null;
    /**
     * Used for Live in Application exams.
     */
    'application-identifier-mac'?: string | null;
    /**
     * If set, then test is linked to a subprogram. Subprograms allows reporting systems to determine method of reporting, and tests that can be reported on.
     */
    'sub-program-id'?: number | null;
    /**
     * The restrictions set on test data.
     * **Possible Values**
     *
     * | Bit Flag                                        | Bit Value |
     * |-------------------------------------------------|-----------|
     * | 1 = Question information                        | 1         |
     * | 2 = Group scores except scaled score and timing | 2         |
     * | 3 = Personal identifying information            | 4         |
     *
     */
    'test-export-restrictions'?: number | null;
    /**
     * Links to specific test category. Test categories are used for content security. Also used for grouping tests in the My Classes assignment picker.
     */
    'test-category-id'?: number | null;
    /**
     * Used for sorting tests within category.
     */
    'sort-key'?: string | null;
    /**
     * Used for delivery overrides.
     */
    'test-group-id'?: number | null;
    /**
     * The number of hours after the last modification before a result is automatically closed.  This requires the “Test Complete Service” to be running for the program.  Should be NULL if not set, but 0 will be ignored by service.
     */
    'max-hours'?: number | null;
    /**
     * The number of days after the last modification before a result is automatically closed.  This requires the “Test Complete Service” to be running for the program.  Should be NULL if not set, but 0 will be ignored by service.
     */
    'num-days'?: number | null;
    /**
     * Continuous Learning. If set, then test delivery will be limited to this value per day.
     */
    'max-questions-per-day'?: number | null;
    /**
     * Continuous Learning. If set, then test delivery will be limited to this value per week. Weeks are defined as Monday through Sunday.
     */
    'max-questions-per-week'?: number | null;
    /**
     * If set, max questions (daily or weekly) is ignored if this number of days or less is remaining in the testing period.
     */
    'max-questions-days-remaining'?: number | null;
    /**
     * Days examinees are notified.  This configuration can be overridden at the examinee level.
     * **Possible Values**
     *
     * | Bit Flag      | Bit Value |
     * |---------------|-----------|
     * | 1 = Monday    | 1         |
     * | 2 = Tuesday   | 2         |
     * | 3 = Wednesday | 4         |
     * | 4 = Thursday  | 8         |
     * | 5 = Friday    | 16        |
     * | 6 = Saturday  | 32        |
     * | 7 = Sunday    | 64        |
     *
     */
    'notification-days-default'?: number | null;
    /**
     * Continuous Learning. The recommended minutes per question.
     */
    'recommended-minutes-per-question'?: number | null;
    /**
     * Observational.  Number of minutes after scheduled start that examiner will participate in assessment. This value may be scaled if a TimeFactor is applied. If NULL, then assessor-offset-scaled is assumed to be 0.  Used to display start time on schedule UI for assessor.
     */
    'assessor-offset-scaled'?: number | null;
    /**
     * Observational. Number of fixed minutes after scheduled start that examiner will participate in assessment. If NULL, then assessor-offset-fixed is assumed to be 0. Used to display start time on schedule UI for assessor (see above).
     */
    'assessor-offset-fixed'?: number | null;
    /**
     * Observational.  Number of minutes after participation start (see above) offset that assessor will be expected to remain in event.  Used to display end time on schedule UI.
     */
    'assessor-duration'?: number | null;
    /**
     * Used for dynamic tests only.  Must map to an existing test template that will include user interface, questional styles, optional tutorials and intro screens, and options end of test screens. (note: may change for multi-segment)
     */
    'template-name'?: string | null;
    /**
     * Used for dynamic tests that are may be delivered as a multi-segment result.  Must map to the name of a test template.  Used for the first segment in the result.  If not set, then form cannot be used for multi-segment testing.  If not set, this can be configured outside of the web service, and updates will not overwrite the configuration.  The user interface and styles from the first segment is used for all segments.
     */
    'template-first'?: string | null;
    /**
     * Same as template-first, except used for the middle segments in a multi-segment result.
     */
    'template-middle'?: string | null;
    /**
     * Same as template-first, except used for the last segment in a multi-segment result.
     */
    'template-last'?: string | null;
    /**
     * Name of dynamic pretest pool. Maps to a pool name.
     */
    'pretest-pool'?: string | null;
    /**
     * The name of the test.  Unique within program.
     */
    'test-name': string;
    /**
     * If true, this test can be used by the System Check software.
     */
    'system-check'?: boolean | null;
    /**
     * Default 0. When set, result will be put on an automatic hold when delivered by StartTest.
     */
    'auto-hold'?: boolean | null;
    /**
     * Name of question pool for definition xml. Maps to a pool name.
     */
    'question-pool'?: string | null;
    /**
     * Name of display pool for definition xml. Maps to a pool name.
     */
    'display-pool'?: string | null;
    /**
     * A collection of dates associated within the form.
     */
    'form-dates'?: Array<TestFormDate> | null;
};

export type TestFormDate = {
    /**
     * The unique ID for a test
     */
    'test-id'?: number | null;
    /**
     * The unique ID for a FormDate
     */
    'form-date-id'?: number | null;
    /**
     * The date the form is available to be taken in UTC.
     */
    'start-utc'?: string | null;
    /**
     * End date the form is available in UTC.
     */
    'end-utc'?: string | null;
    /**
     * An identifier linking one or more forms for form selection.
     */
    group?: string | null;
    /**
     * A flag indicating whether all institutions have access to this form.  If not set, only the institutions specification in the collection of institutions below will have access to the form.
     */
    'all-institutions'?: boolean | null;
    /**
     * Collection of Institutions within Form Date (Required if all-institutions is set to false.)
     */
    institutions?: Array<Institution3> | null;
};

export type TestQueryResult = {
    /**
     * Description of the test.  This is the description shown by StartTest.  Note that description is varchar. Localized version in Translations.
     */
    description?: string | null;
    /**
     * The languages the test is available in.  This is a comma delimited list.
     */
    languages?: string | null;
    /**
     * Program specific version associated with test.  If used by a program, must be populated either by a database trigger or custom publishing sproc.
     */
    'program-version'?: string | null;
    /**
     * Set if the test is a demonstration or sample test.
     */
    demo?: boolean | null;
    /**
     * If true, this test can be used by our ITS test simulation software.
     */
    simulation?: boolean | null;
    /**
     * The type of test (test, quiz, tutorial, survey, dynamic pool, flex pool, adaptive pool). Maps to dbo.TestTypes in the IW database.
     *
     * | TestTypeID | Code          |
     * |------------|---------------|
     * | 0          | Test          |
     * | 1          | Section       |
     * | 2          | Tutorial      |
     * | 3          | Survey        |
     * | 4          | Test Template |
     * | 5          | Quiz          |
     * | 6          | Dynamic Test  |
     * | 7          | Dynamic Pool  |
     * | 8          | Flex Pool     |
     * | 9          | Adaptive Pool |
     * | 10         | Article Block |
     * | 11         | Content Block |
     *
     */
    'test-type-id'?: number | null;
    /**
     * Bit flag for test usages
     *
     * | Bit Flag                                                  | Bit Value |
     * |-----------------------------------------------------------|-----------|
     * | 1 = Class assignment (home / proctored)                   | 1         |
     * | 2 = Scheduled administrations                             | 2         |
     * | 3 = Cohort administrations                                | 4         |
     * | 4 = Class practice (always available)                     | 8         |
     * | 5 = Class proctored assignment                            | 16        |
     * | 6 = Sample test for system verification                   | 32        |
     * | 7 = Simulation test                                       | 64        |
     * | 8 = System check test                                     | 128       |
     * | 9 = Program test available for institution administrators | 256       |
     * | 10 = Remote proctor onboarding test                       | 512       |
     * | 11 = Survey UI                                            | 1024      |
     *
     */
    'test-usages'?: number | null;
    /**
     * The number of hours before a test is considered abandoned.  If NULL, then no restartable results are considered abandoned.  If 0, then all restartable results are considered abandoned, unless active within 30 minutes.
     */
    'abandoned-hours'?: number | null;
    /**
     * The date form selection delivery counts should begin from in UTC.
     */
    'form-selection-start-utc'?: string | null;
    /**
     * Number of days that a set is active before rotating to next set.
     */
    'set-days'?: number | null;
    /**
     * Current set number. Must be set for sets to be considered in form selection.
     */
    'set-number'?: number | null;
    /**
     * Start date when current set was selected in UTC
     */
    'set-start-utc'?: string | null;
    /**
     * All variations will select the form least seen by examinee.
     *
     * | Value | Description                                        |
     * |-------|----------------------------------------------------|
     * | 1     | balance based on counts of delivery                |
     * | 2     | random form selection (used for very high volumes) |
     * | 3     | institutions dates, then do random form selection  |
     *
     */
    'test-form-selection-id'?: number | null;
    /**
     * Period for tracking max attempts.
     */
    'max-attempts-days'?: number | null;
    /**
     * Total number of attempts to pass that an examinee gets within max-attempt-days.
     */
    'max-attempts'?: number | null;
    /**
     * Minimum number of days that must elapsed before an examinee can retest on any form of the test.
     */
    'min-test-retake-days'?: number | null;
    /**
     * The number of days that must pass before a person can see a form again.
     */
    'min-retest-days'?: number | null;
    /**
     * Links category to a subject. Subjects may be program or institution defined. Institution subjects may be defined anywhere in the hierarchy,and are available to the institution and its children.
     */
    'subject-id'?: number | null;
    /**
     * Difficulty of test.
     * **Possible Values**
     *
     * | Test Difficulty | Value |
     * |-----------------|-------|
     * | Easy            | 1     |
     * | Moderate        | 2     |
     * | Hard            | 4     |
     *
     */
    'test-difficulty-id'?: number | null;
    /**
     * Used for Live in Application exams. For Windows, this is the class code.
     */
    'application-identifier-windows'?: string | null;
    /**
     * Used for Live in Application exams.
     */
    'application-identifier-mac'?: string | null;
    /**
     * If set, then test is linked to a subprogram. Subprograms allows reporting systems to determine method of reporting, and tests that can be reported on.
     */
    'sub-program-id'?: number | null;
    /**
     * The restrictions set on test data.
     * **Possible Values**
     *
     * | Bit Flag                                        | Bit Value |
     * |-------------------------------------------------|-----------|
     * | 1 = Question information                        | 1         |
     * | 2 = Group scores except scaled score and timing | 2         |
     * | 3 = Personal identifying information            | 4         |
     *
     */
    'test-export-restrictions'?: number | null;
    /**
     * Links to specific test category. Test categories are used for content security. Also used for grouping tests in the My Classes assignment picker.
     */
    'test-category-id'?: number | null;
    /**
     * Used for sorting tests within category.
     */
    'sort-key'?: string | null;
    /**
     * Used for delivery overrides.
     */
    'test-group-id'?: number | null;
    /**
     * The number of hours after the last modification before a result is automatically closed.  This requires the “Test Complete Service” to be running for the program.  Should be NULL if not set, but 0 will be ignored by service.
     */
    'max-hours'?: number | null;
    /**
     * The number of days after the last modification before a result is automatically closed.  This requires the “Test Complete Service” to be running for the program.  Should be NULL if not set, but 0 will be ignored by service.
     */
    'num-days'?: number | null;
    /**
     * Continuous Learning. If set, then test delivery will be limited to this value per day.
     */
    'max-questions-per-day'?: number | null;
    /**
     * Continuous Learning. If set, then test delivery will be limited to this value per week. Weeks are defined as Monday through Sunday.
     */
    'max-questions-per-week'?: number | null;
    /**
     * If set, max questions (daily or weekly) is ignored if this number of days or less is remaining in the testing period.
     */
    'max-questions-days-remaining'?: number | null;
    /**
     * Days examinees are notified.  This configuration can be overridden at the examinee level.
     * **Possible Values**
     *
     * | Bit Flag      | Bit Value |
     * |---------------|-----------|
     * | 1 = Monday    | 1         |
     * | 2 = Tuesday   | 2         |
     * | 3 = Wednesday | 4         |
     * | 4 = Thursday  | 8         |
     * | 5 = Friday    | 16        |
     * | 6 = Saturday  | 32        |
     * | 7 = Sunday    | 64        |
     *
     */
    'notification-days-default'?: number | null;
    /**
     * Continuous Learning. The recommended minutes per question.
     */
    'recommended-minutes-per-question'?: number | null;
    /**
     * Observational.  Number of minutes after scheduled start that examiner will participate in assessment. This value may be scaled if a TimeFactor is applied. If NULL, then assessor-offset-scaled is assumed to be 0.  Used to display start time on schedule UI for assessor.
     */
    'assessor-offset-scaled'?: number | null;
    /**
     * Observational. Number of fixed minutes after scheduled start that examiner will participate in assessment. If NULL, then assessor-offset-fixed is assumed to be 0. Used to display start time on schedule UI for assessor (see above).
     */
    'assessor-offset-fixed'?: number | null;
    /**
     * Observational.  Number of minutes after participation start (see above) offset that assessor will be expected to remain in event.  Used to display end time on schedule UI.
     */
    'assessor-duration'?: number | null;
    /**
     * Used for dynamic tests only.  Must map to an existing test template that will include user interface, questional styles, optional tutorials and intro screens, and options end of test screens. (note: may change for multi-segment)
     */
    'template-name'?: string | null;
    /**
     * Used for dynamic tests that are may be delivered as a multi-segment result.  Must map to the name of a test template.  Used for the first segment in the result.  If not set, then form cannot be used for multi-segment testing.  If not set, this can be configured outside of the web service, and updates will not overwrite the configuration.  The user interface and styles from the first segment is used for all segments.
     */
    'template-first'?: string | null;
    /**
     * Same as template-first, except used for the middle segments in a multi-segment result.
     */
    'template-middle'?: string | null;
    /**
     * Same as template-first, except used for the last segment in a multi-segment result.
     */
    'template-last'?: string | null;
    /**
     * Name of dynamic pretest pool. Maps to a pool name.
     */
    'pretest-pool'?: string | null;
    /**
     * Unique test identifier.
     */
    'test-id': number;
    /**
     * The name of the test.  Unique within program.
     */
    'test-name': string;
    /**
     * If true, this test can be used by the System Check software.
     */
    'system-check': boolean;
    /**
     * The date this record was created in UTC.
     */
    'create-utc': string;
    /**
     * The userID who created this record.
     */
    'create-user-id': number;
    /**
     * The date this record was last modified in UTC.
     */
    'modify-utc': string;
    /**
     * The userID who last modified this record.
     */
    'modify-user-id': number;
    /**
     * Default 0. When set, result will be put on an automatic hold when delivered by StartTest.
     */
    'auto-hold': boolean;
    /**
     * Name of question pool for definition xml. Maps to a pool name.
     */
    'question-pool'?: string | null;
    /**
     * Name of display pool for definition xml. Maps to a pool name.
     */
    'display-pool'?: string | null;
    /**
     * A collection of dates associated within the form.
     */
    'form-dates'?: Array<TestFormDate> | null;
};

/**
 * Response for Test endpoint
 * Includes error
 */
export type TestResponse = {
    /**
     * ID for test being updated
     */
    'test-id': number;
    /**
     * Name for test being updated
     */
    'test-name'?: string | null;
    /**
     * Status for update and delete endpoints
     */
    status?: string | null;
};

export type TestUpdateRequest = {
    /**
     * Description of the test.  This is the description shown by StartTest.  Note that description is varchar. Localized version in Translations.
     */
    description?: string | null;
    /**
     * The languages the test is available in.  This is a comma delimited list.
     */
    languages?: string | null;
    /**
     * Program specific version associated with test.  If used by a program, must be populated either by a database trigger or custom publishing sproc.
     */
    'program-version'?: string | null;
    /**
     * Set if the test is a demonstration or sample test.
     */
    demo?: boolean | null;
    /**
     * If true, this test can be used by our ITS test simulation software.
     */
    simulation?: boolean | null;
    /**
     * The type of test (test, quiz, tutorial, survey, dynamic pool, flex pool, adaptive pool). Maps to dbo.TestTypes in the IW database.
     *
     * | TestTypeID | Code          |
     * |------------|---------------|
     * | 0          | Test          |
     * | 1          | Section       |
     * | 2          | Tutorial      |
     * | 3          | Survey        |
     * | 4          | Test Template |
     * | 5          | Quiz          |
     * | 6          | Dynamic Test  |
     * | 7          | Dynamic Pool  |
     * | 8          | Flex Pool     |
     * | 9          | Adaptive Pool |
     * | 10         | Article Block |
     * | 11         | Content Block |
     *
     */
    'test-type-id'?: number | null;
    /**
     * Bit flag for test usages
     *
     * | Bit Flag                                                  | Bit Value |
     * |-----------------------------------------------------------|-----------|
     * | 1 = Class assignment (home / proctored)                   | 1         |
     * | 2 = Scheduled administrations                             | 2         |
     * | 3 = Cohort administrations                                | 4         |
     * | 4 = Class practice (always available)                     | 8         |
     * | 5 = Class proctored assignment                            | 16        |
     * | 6 = Sample test for system verification                   | 32        |
     * | 7 = Simulation test                                       | 64        |
     * | 8 = System check test                                     | 128       |
     * | 9 = Program test available for institution administrators | 256       |
     * | 10 = Remote proctor onboarding test                       | 512       |
     * | 11 = Survey UI                                            | 1024      |
     *
     */
    'test-usages'?: number | null;
    /**
     * The number of hours before a test is considered abandoned.  If NULL, then no restartable results are considered abandoned.  If 0, then all restartable results are considered abandoned, unless active within 30 minutes.
     */
    'abandoned-hours'?: number | null;
    /**
     * The date form selection delivery counts should begin from in UTC.
     */
    'form-selection-start-utc'?: string | null;
    /**
     * Number of days that a set is active before rotating to next set.
     */
    'set-days'?: number | null;
    /**
     * Current set number. Must be set for sets to be considered in form selection.
     */
    'set-number'?: number | null;
    /**
     * Start date when current set was selected in UTC
     */
    'set-start-utc'?: string | null;
    /**
     * All variations will select the form least seen by examinee.
     *
     * | Value | Description                                        |
     * |-------|----------------------------------------------------|
     * | 1     | balance based on counts of delivery                |
     * | 2     | random form selection (used for very high volumes) |
     * | 3     | institutions dates, then do random form selection  |
     *
     */
    'test-form-selection-id'?: number | null;
    /**
     * Period for tracking max attempts.
     */
    'max-attempts-days'?: number | null;
    /**
     * Total number of attempts to pass that an examinee gets within max-attempt-days.
     */
    'max-attempts'?: number | null;
    /**
     * Minimum number of days that must elapsed before an examinee can retest on any form of the test.
     */
    'min-test-retake-days'?: number | null;
    /**
     * The number of days that must pass before a person can see a form again.
     */
    'min-retest-days'?: number | null;
    /**
     * Links category to a subject. Subjects may be program or institution defined. Institution subjects may be defined anywhere in the hierarchy,and are available to the institution and its children.
     */
    'subject-id'?: number | null;
    /**
     * Difficulty of test.
     * **Possible Values**
     *
     * | Test Difficulty | Value |
     * |-----------------|-------|
     * | Easy            | 1     |
     * | Moderate        | 2     |
     * | Hard            | 4     |
     *
     */
    'test-difficulty-id'?: number | null;
    /**
     * Used for Live in Application exams. For Windows, this is the class code.
     */
    'application-identifier-windows'?: string | null;
    /**
     * Used for Live in Application exams.
     */
    'application-identifier-mac'?: string | null;
    /**
     * If set, then test is linked to a subprogram. Subprograms allows reporting systems to determine method of reporting, and tests that can be reported on.
     */
    'sub-program-id'?: number | null;
    /**
     * The restrictions set on test data.
     * **Possible Values**
     *
     * | Bit Flag                                        | Bit Value |
     * |-------------------------------------------------|-----------|
     * | 1 = Question information                        | 1         |
     * | 2 = Group scores except scaled score and timing | 2         |
     * | 3 = Personal identifying information            | 4         |
     *
     */
    'test-export-restrictions'?: number | null;
    /**
     * Links to specific test category. Test categories are used for content security. Also used for grouping tests in the My Classes assignment picker.
     */
    'test-category-id'?: number | null;
    /**
     * Used for sorting tests within category.
     */
    'sort-key'?: string | null;
    /**
     * Used for delivery overrides.
     */
    'test-group-id'?: number | null;
    /**
     * The number of hours after the last modification before a result is automatically closed.  This requires the “Test Complete Service” to be running for the program.  Should be NULL if not set, but 0 will be ignored by service.
     */
    'max-hours'?: number | null;
    /**
     * The number of days after the last modification before a result is automatically closed.  This requires the “Test Complete Service” to be running for the program.  Should be NULL if not set, but 0 will be ignored by service.
     */
    'num-days'?: number | null;
    /**
     * Continuous Learning. If set, then test delivery will be limited to this value per day.
     */
    'max-questions-per-day'?: number | null;
    /**
     * Continuous Learning. If set, then test delivery will be limited to this value per week. Weeks are defined as Monday through Sunday.
     */
    'max-questions-per-week'?: number | null;
    /**
     * If set, max questions (daily or weekly) is ignored if this number of days or less is remaining in the testing period.
     */
    'max-questions-days-remaining'?: number | null;
    /**
     * Days examinees are notified.  This configuration can be overridden at the examinee level.
     * **Possible Values**
     *
     * | Bit Flag      | Bit Value |
     * |---------------|-----------|
     * | 1 = Monday    | 1         |
     * | 2 = Tuesday   | 2         |
     * | 3 = Wednesday | 4         |
     * | 4 = Thursday  | 8         |
     * | 5 = Friday    | 16        |
     * | 6 = Saturday  | 32        |
     * | 7 = Sunday    | 64        |
     *
     */
    'notification-days-default'?: number | null;
    /**
     * Continuous Learning. The recommended minutes per question.
     */
    'recommended-minutes-per-question'?: number | null;
    /**
     * Observational.  Number of minutes after scheduled start that examiner will participate in assessment. This value may be scaled if a TimeFactor is applied. If NULL, then assessor-offset-scaled is assumed to be 0.  Used to display start time on schedule UI for assessor.
     */
    'assessor-offset-scaled'?: number | null;
    /**
     * Observational. Number of fixed minutes after scheduled start that examiner will participate in assessment. If NULL, then assessor-offset-fixed is assumed to be 0. Used to display start time on schedule UI for assessor (see above).
     */
    'assessor-offset-fixed'?: number | null;
    /**
     * Observational.  Number of minutes after participation start (see above) offset that assessor will be expected to remain in event.  Used to display end time on schedule UI.
     */
    'assessor-duration'?: number | null;
    /**
     * Used for dynamic tests only.  Must map to an existing test template that will include user interface, questional styles, optional tutorials and intro screens, and options end of test screens. (note: may change for multi-segment)
     */
    'template-name'?: string | null;
    /**
     * Used for dynamic tests that are may be delivered as a multi-segment result.  Must map to the name of a test template.  Used for the first segment in the result.  If not set, then form cannot be used for multi-segment testing.  If not set, this can be configured outside of the web service, and updates will not overwrite the configuration.  The user interface and styles from the first segment is used for all segments.
     */
    'template-first'?: string | null;
    /**
     * Same as template-first, except used for the middle segments in a multi-segment result.
     */
    'template-middle'?: string | null;
    /**
     * Same as template-first, except used for the last segment in a multi-segment result.
     */
    'template-last'?: string | null;
    /**
     * Name of dynamic pretest pool. Maps to a pool name.
     */
    'pretest-pool'?: string | null;
    /**
     * Unique test identifier.
     */
    'test-id': number;
    /**
     * The name of the test.  Unique within program.
     */
    'test-name'?: string | null;
    /**
     * If true, this test can be used by the System Check software.
     */
    'system-check'?: boolean | null;
    /**
     * Default 0. When set, result will be put on an automatic hold when delivered by StartTest.
     */
    'auto-hold'?: boolean | null;
};

/**
 * TimeZone
 * The time zone response.
 */
export type TimeZoneResponse = {
    /**
     * The unique ITS database identifier for the time zone.
     */
    'time-zone-id'?: number;
    /**
     * The standard nomenclature of time zones from the SQL server.
     */
    'standard-name'?: string | null;
    /**
     * Descriptive text of the time zone, which includes the UTC -+ hours information.
     */
    'description-text'?: string | null;
    /**
     * The flag that shows if that time zone is in daylight savings time adjustment.
     */
    'is-currently-dst'?: boolean;
};

/**
 * Test Override
 * A security override for tests within a program.
 */
export type AccessOverride = {
    /**
     * The unique database identifier of the test.
     */
    'test-id': number | null;
    /**
     * The category identifier of the test.
     */
    'test-category-id'?: number | null;
    /**
     * The name of the test.
     */
    'test-name': string | null;
    /**
     * The description of the test.
     */
    'test-description'?: string | null;
    /**
     * The description of the test category.
     */
    'test-category-description'?: string | null;
    /**
     * The override result access given to a user for a specific program.
     *
     * | Value | Description                                                                      |
     * | ----- | -------------------------------------------------------------------------------- |
     * | 0     | The user has no access to results.                                               |
     * | 1     | User can see result information but cannot see PII information or scores.        |
     * | 2     | User can see result information including scores but cannot see PII information. |
     * | 3     | User can see all result information including PII and score data.                |
     * | 4     | User can see result information including PII data but cannot see scores.        |
     *
     */
    'result-access-id': number;
    /**
     * The override content access given to a user for a specific program.
     *
     * | Value | Description                                                     |
     * | ----- | --------------------------------------------------------------- |
     * | 0     | The user has no access to content.                              |
     * | 1     | The user can see scrambled content.                             |
     * | 2     | The user can see scrambled content with the option to override. |
     * | 3     | The user has full access to content.                            |
     *
     */
    'content-access-id': number;
    /**
     * The date and time access expires.
     */
    'expires-utc'?: string | null;
    /**
     * The date and time the security override was created.
     */
    'created-utc'?: string | null;
    /**
     * The date and time the security override was modified.
     */
    'modified-utc'?: string | null;
};

/**
 * Access Rights
 * Access rights for the user within a program. These access rights override the default access of the user.
 */
export type AccessRight = {
    /**
     * The override result access given to a user for a specific program.
     *
     * | Value | Description                                                                      |
     * | ----- | -------------------------------------------------------------------------------- |
     * | 0     | The user has no access to results.                                               |
     * | 1     | User can see result information but cannot see PII information or scores.        |
     * | 2     | User can see result information including scores but cannot see PII information. |
     * | 3     | User can see all result information including PII and score data.                |
     * | 4     | User can see result information including PII data but cannot see scores.        |
     *
     */
    'result-access-id': number;
    /**
     * The override content access given to a user for a specific program.
     *
     * | Value | Description                                                     |
     * | ----- | --------------------------------------------------------------- |
     * | 0     | The user has no access to content.                              |
     * | 1     | The user can see scrambled content.                             |
     * | 2     | The user can see scrambled content with the option to override. |
     * | 3     | The user has full access to content.                            |
     *
     */
    'content-access-id': number;
    /**
     * The date and time access expires.
     */
    'expires-utc'?: string | null;
    /**
     * The date and time the security override was created.
     */
    'created-utc'?: string | null;
    /**
     * The date and time the security override was modified.
     */
    'modified-utc'?: string | null;
    /**
     * A collection of security overrides for tests within a program.
     */
    readonly 'test-overrides'?: Array<AccessOverride> | null;
};

/**
 * Institution
 * An institution a user can access.
 */
export type Institution4 = {
    /**
     * The unique database identifier of the institution.
     */
    'institution-id'?: number;
    /**
     * The name of the institution.
     */
    'institution-name'?: string | null;
    /**
     * The program's unique identifier of the institution.
     */
    'program-institution-id': string | null;
};

/**
 * Program
 * A program within the sponsor the user can access.
 */
export type Program = {
    /**
     * The unique database identifier of the program.
     */
    'program-id': number;
    /**
     * The unique textual identifier of the program.
     */
    name: string | null;
    /**
     * The vendor’s unique textual identifier of the program.
     */
    'vendor-program-id': string | null;
    /**
     * The unique database identifier of the role.
     */
    'role-id': number | null;
    /**
     * The unique textual identifier of the role.
     */
    'role-code': string | null;
    /**
     * The name of the role.
     */
    'role-name': string | null;
    /**
     * The description of the role.
     */
    'role-description'?: string | null;
    /**
     * A collection of access rights for the user within a program. These access rights override the default access of the user.
     */
    readonly 'access-rights'?: Array<AccessRight> | null;
    /**
     * A collection of institutions a user can access.
     */
    readonly institutions?: Array<Institution4> | null;
};

/**
 * Sponsor
 * A sponsor a user can access.
 */
export type Sponsor = {
    /**
     * The unique database identifier of the sponsor.
     */
    'sponsor-id': number;
    /**
     * The name of the sponsor.
     */
    'sponsor-name': string | null;
    /**
     * A collection of programs within the sponsor the user can access.
     */
    readonly programs?: Array<Program> | null;
};

/**
 * UserAccessDeleteResponse
 * Returns the delete status of the user's access to the given `program-id` or `program-institution-id`.
 */
export type UserAccessDeleteResponse = {
    /**
     * The unique ITS database identifier of the user.
     */
    'user-id'?: number | null;
    /**
     * The unique program identifier of the user.
     */
    'program-user-system-id'?: string | null;
    /**
     * The unique program user public identifier of the user.
     */
    'program-user-public-id'?: string | null;
    /**
     * The unique program identifier.
     */
    'program-id'?: number | null;
    /**
     * The unique program institution identifier.
     */
    'program-institution-id'?: string | null;
    /**
     * The delete status of the remote session. Possible values: `deleted`.
     */
    readonly status?: string | null;
};

/**
 * User Access Object
 * Markdown enabled object description.
 */
export type UserAccessQueryResponse = {
    /**
     * The unique ITS database identifier of the user.
     */
    'user-id'?: number;
    /**
     * The program's system-generated unique identifier of the user. Used to link the ITS system with the program's system for SSO and system-to-system imports.
     */
    'program-user-system-id'?: string | null;
    /**
     * The program's public identifier of a user. For example, the users Board ID.
     */
    'program-user-public-id'?: string | null;
    /**
     *
     * | User Type | Description |
     * | --------- | ----------- |
     * | 2         | Vendor      |
     * | 3         | Sponsor     |
     * | 4         | Institution |
     */
    'user-type-id'?: number;
    /**
     * This is only applicable for institution users. This is the unique database identifier of the institution administrator role.
     */
    'institution-admin-role-id'?: number | null;
    /**
     * This is only applicable for institution users. This is the unique textual identifier of the institution administrator role.
     */
    'institution-admin-role-code'?: string | null;
    /**
     * The default result access given to a user.
     *
     * | Value | Description                                                                      |
     * | ----- | -------------------------------------------------------------------------------- |
     * | 0     | The user has no access to results.                                               |
     * | 1     | User can see result information but cannot see PII information or scores.        |
     * | 2     | User can see result information including scores but cannot see PII information. |
     * | 3     | User can see all result information including PII and score data.                |
     * | 4     | User can see result information including PII data but cannot see scores.        |
     *
     */
    'result-access-id'?: number;
    /**
     * The override content access given to a user for a specific program.
     *
     * | Value | Description                                                     |
     * | ----- | --------------------------------------------------------------- |
     * | 0     | The user has no access to content.                              |
     * | 1     | The user can see scrambled content.                             |
     * | 2     | The user can see scrambled content with the option to override. |
     * | 3     | The user has full access to content.                            |
     *
     */
    'content-access-id'?: number;
    /**
     * The date of the last login for this user.
     */
    'last-login-utc'?: string | null;
    /**
     * The number of logins for this user.
     */
    'num-logins'?: number | null;
    /**
     * A collection of sponsors a user can access.
     */
    readonly sponsors?: Array<Sponsor> | null;
    /**
     * The status of the user.
     */
    status?: string | null;
    /**
     * Shows Item Workshop access.
     */
    'iw-active'?: boolean;
};

export type UserStatusFlags = 0 | 1 | 2 | 4;

/**
 * User
 * The user object.
 */
export type UserResponse = {
    /**
     * Unique user identifier. System generated.
     */
    'user-id'?: number | null;
    /**
     * Links user to a specific vendor. This is not set for system administrators.
     */
    'vendor-id'?: number | null;
    /**
     * Only set for sponsor users.
     */
    'sponsor-id'?: number | null;
    /**
     * Links this user to a specific institution.
     */
    'institution-id'?: number | null;
    /**
     * Username used for the login.
     */
    username?: string | null;
    /**
     * The external, system identifier for a PW/IW user. The primary use will be to store an identity provider's ID.
     */
    'program-user-system-id'?: string | null;
    /**
     * Optional. Unique public external identifier (e.g., employee ID, Board ID).
     */
    'program-user-public-id'?: string | null;
    /**
     * User type.
     */
    'user-type'?: number;
    /**
     * First name of the user.
     */
    'first-name'?: string | null;
    /**
     * Middle name of the user.
     */
    'middle-name'?: string | null;
    /**
     * Last name of the user.
     */
    'last-name'?: string | null;
    /**
     * 1 = Mr, 2 = Ms, 3 = Professor, 4 = Dr.
     */
    prefix?: number | null;
    /**
     * Title
     */
    title?: string | null;
    /**
     * Company name.
     */
    company?: string | null;
    /**
     * Job title.
     */
    'job-title'?: string | null;
    /**
     * Must be a valid email format based on RFC5322 section 3.4.1.
     */
    email?: string | null;
    /**
     * Must be in the E.164 format [+][country code][area code][local phone number] and can have a maximum of fifteen digits. "[+][country code]" are optional.
     */
    'work-phone'?: string | null;
    /**
     * The extension of the user's work telephone number.
     */
    'work-phone-ext'?: string | null;
    /**
     * Must be in the E.164 format [+][country code][area code][local phone number] and can have a maximum of fifteen digits. [+][country code] are optional.
     */
    'mobile-phone'?: string | null;
    /**
     * The first line of the user's street address.
     */
    address?: string | null;
    /**
     * The second line of the user's street address.
     */
    address2?: string | null;
    /**
     * The third line of the user's street address.
     */
    address3?: string | null;
    /**
     * The city of the user's address.
     */
    city?: string | null;
    /**
     * If `country` = `US`, State is the two-letter code. If `country` <> `US`, then this field is the region/province.
     */
    'state-region'?: string | null;
    /**
     * The postal code for the user's address.
     */
    'postal-code'?: string | null;
    /**
     * The ISO-AlphaThree country code for the user's address.
     */
    country?: string | null;
    /**
     * The department the user is a member of.
     */
    department?: string | null;
    /**
     * If set, user is a technical contact.
     */
    'technical-contact'?: boolean | null;
    /**
     * If set, user is an administrative contact.
     */
    'administrative-contact'?: boolean | null;
    /**
     * Default ET = 23. For institution users, initially set based on institution configuration. May be overridden by user UI. Use `timezone/query` for possible `timezone-id` values.
     */
    'timezone-id'?: number;
    /**
     * The default is `true`. For institution users, initially set based on institution configuration. May be overridden by user UI.
     */
    'use-daylight-savings'?: boolean | null;
    /**
     * Language user logged in with.
     */
    language?: string | null;
    /**
     * Date record was created.
     */
    'created-utc'?: string;
    /**
     * User who created the user.
     */
    'create-user-id'?: number;
    /**
     * Date record was last modified.
     */
    'modified-utc'?: string;
    /**
     * User who modified the user.
     */
    'modify-user-id'?: number;
    /**
     * Date user's activation status last changed.
     */
    'activated-utc'?: string;
    /**
     * User who changed the user's activation status.
     */
    'activate-user-id'?: number;
    /**
     * Date to inactivate users.
     */
    'inactivation-utc'?: string;
    /**
     * Last login date.
     */
    'last-date-login'?: string | null;
    /**
     * The default is 0. If set, this user is an administrator.
     */
    administrator?: boolean;
    /**
     * The default is 0. If set, the user has access to all programs for this entity.
     */
    'all-programs'?: boolean;
    /**
     * The default is 0. 1 = All tests. 2 = SSO Login (disable profile view/edit).
     */
    options?: number;
    /**
     * Set when an institution user accepts the program agreement.
     */
    'agreement-accepted'?: boolean | null;
    /**
     * User's agreement date.
     */
    'agreement-accepted-utc'?: string;
    /**
     * Shows Item Workshop access.
     */
    'iw-active'?: boolean;
    /**
     * The default is 0. If set, then can’t change user profile information.
     */
    'externally-managed'?: boolean | null;
    /**
     * The status of the user.
     */
    status?: string | null;
};

export type UsersDeleteResponse = {
    /**
     * The unique ITS database identifier of the user.
     */
    'user-id'?: number;
    /**
     * The unique program identifier of the user.
     */
    'program-user-system-id'?: string | null;
    /**
     * The unique program user public identifier of the user.
     */
    'program-user-public-id'?: string | null;
    /**
     * The delete status of the remote session. Possible values: `deleted`.
     */
    readonly status?: string | null;
};

export type ChannelInstitutionQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The institutions imported will be children of this parent institution. The web API client must have access to this institution, or a parent of this institution.
         */
        'program-institution-id'?: string;
        /**
         * The number of examinee objects to return. By default, this call returns a maximum of 500 objects. The limit can be set to any number less than 500.
         */
        limit?: number;
        /**
         * A specific `examinee-id`. The API returns objects with `examinee-id`s that precede `before-id`. This parameter cannot be used if `after-id` is used.
         */
        'before-id'?: number;
        /**
         * A specific `examinee-id`. The API returns objects with `examinee-id`s that follow `after-id`. This parameter cannot be used if `before-id` is used.
         */
        'after-id'?: number;
    };
    url: '/channel/institutions/query';
};

export type ChannelInstitutionQueryResponses = {
    /**
     * OK
     */
    200: Array<QueryInstitutionResponse>;
};

export type ChannelInstitutionQueryResponse = ChannelInstitutionQueryResponses[keyof ChannelInstitutionQueryResponses];

export type ChannelInstitutionImport1Data = {
    body?: Institution;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The institutions imported will be children of this parent institution. The web API client must have access to this institution or a parent of this institution. This parameter is required if the web API client is an institution-level client.
         */
        'parent-program-institution-id'?: string;
    };
    url: '/channel/institutions/import';
};

export type ChannelInstitutionImport1Responses = {
    /**
     * OK
     */
    200: ImportInstitutionResponse;
};

export type ChannelInstitutionImport1Response = ChannelInstitutionImport1Responses[keyof ChannelInstitutionImport1Responses];

export type ChannelInstitutionImportData = {
    body?: Institution;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The institutions imported will be children of this parent institution. The web API client must have access to this institution or a parent of this institution. This parameter is required if the web API client is an institution-level client.
         */
        'parent-program-institution-id'?: string;
    };
    url: '/channel/institutions/import';
};

export type ChannelInstitutionImportResponses = {
    /**
     * OK
     */
    200: ImportInstitutionResponse;
};

export type ChannelInstitutionImportResponse = ChannelInstitutionImportResponses[keyof ChannelInstitutionImportResponses];

export type EventAuthorizationQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. If supplied, all events linked to this institution or its children will be returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the event. If not supplied, `event-description` is required.
         */
        'event-id'?: number;
        /**
         * The unique textual identifier of the event. If not supplied, `event-id` is required.
         */
        'event-description'?: string;
        /**
         * The number of event-authorization objects to return. By default, this call returns a maximum of 500 objects. The limit can be set to any number less than 500.
         */
        limit?: number;
        /**
         * A specific `authorization-id`. The API returns objects with `authorization-id`s that precede `before-id`. This parameter cannot be used if `after-id` is used.
         */
        'before-id'?: number;
        /**
         * A specific `authorization-id`. The API returns objects with `authorization-id`s that follow `after-id`. This parameter cannot be used if `before-id` is used.
         */
        'after-id'?: number;
    };
    url: '/event/authorizations/Query';
};

export type EventAuthorizationQueryResponses = {
    /**
     * OK
     */
    200: EventAuthorization;
};

export type EventAuthorizationQueryResponse = EventAuthorizationQueryResponses[keyof EventAuthorizationQueryResponses];

export type EventClassQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The program institution's name.
         */
        'program-institution-id': string;
        /**
         * The unique identifier of the event class.
         */
        'event-class-id'?: number;
        /**
         * Includes all sessions starting on or after this date. This parameter and end-utc are required if session-code is not supplied.
         */
        'event-id'?: number;
        /**
         * Program unique identifier for the event class.
         */
        'program-class-code'?: string;
    };
    url: '/event-class/Query';
};

export type EventClassQueryResponses = {
    /**
     * OK
     */
    200: Array<EventClass>;
};

export type EventClassQueryResponse = EventClassQueryResponses[keyof EventClassQueryResponses];

export type EventClassCreateData = {
    body: EventClassCreateRequest;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The Web API client must have access to this institution.
         */
        'program-institution-id': string;
    };
    url: '/event-class/Create';
};

export type EventClassCreateResponses = {
    /**
     * OK
     */
    200: EventClassResponse;
};

export type EventClassCreateResponse = EventClassCreateResponses[keyof EventClassCreateResponses];

export type EventClassUpdateData = {
    body: EventClassUpdateRequest;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id': string;
    };
    url: '/event-class/Update';
};

export type EventClassUpdateResponses = {
    /**
     * OK
     */
    200: EventClassResponse;
};

export type EventClassUpdateResponse = EventClassUpdateResponses[keyof EventClassUpdateResponses];

export type EventClassDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique identifier of the event class.
         */
        'event-class-id': number;
    };
    url: '/event-class/Delete';
};

export type EventClassDeleteResponses = {
    /**
     * OK
     */
    200: EventClassResponse;
};

export type EventClassDeleteResponse = EventClassDeleteResponses[keyof EventClassDeleteResponses];

export type EventClassExamineesCreateData = {
    body?: Array<Examinee>;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id': string;
        'event-class-id': number;
        ExamineeIds?: Array<number>;
        ProgramExamineeSystemIds?: Array<string>;
        ProgramExamineePublicIds?: Array<string>;
    };
    url: '/event-class/examinees/create';
};

export type EventClassExamineesCreateResponses = {
    /**
     * OK
     */
    200: Array<EventClassExamineesCreateResponse>;
};

export type EventClassExamineesCreateResponse2 = EventClassExamineesCreateResponses[keyof EventClassExamineesCreateResponses];

export type EventClassExamineesQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique identifier of the event class.
         */
        'event-class-id'?: number;
        /**
         * ITS unique identifier for the examinee.
         */
        'examinee-id'?: number;
        /**
         * The program’s system identifier of the examinee.
         */
        'program-examinee-system-id'?: string;
        /**
         * The program’s public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: string;
    };
    url: '/event-class/examinees/query';
};

export type EventClassExamineesQueryResponses = {
    /**
     * OK
     */
    200: Array<EventClassExamineesQueryResponse>;
};

export type EventClassExamineesQueryResponse2 = EventClassExamineesQueryResponses[keyof EventClassExamineesQueryResponses];

export type EventClassExamineesDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * Deletes the individual Event Class Examinee record.
         */
        'event-class-examinee-id'?: number;
        /**
         * Deletes all of the Event Class Examinee records for the event-class-id.
         */
        'event-class-id'?: number;
    };
    url: '/event-class/examinees/delete';
};

export type EventClassExamineesDeleteResponses = {
    /**
     * OK
     */
    200: Array<EventClassExamineesDeleteResponse>;
};

export type EventClassExamineesDeleteResponse2 = EventClassExamineesDeleteResponses[keyof EventClassExamineesDeleteResponses];

export type EventExamineeImport1Data = {
    body?: ExamineeDataHolder;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Examinees are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the event.
         */
        'event-id': number;
    };
    url: '/event/examinee/import';
};

export type EventExamineeImport1Responses = {
    /**
     * OK
     */
    200: EventExamineeResponse;
};

export type EventExamineeImport1Response = EventExamineeImport1Responses[keyof EventExamineeImport1Responses];

export type EventExamineeImportData = {
    body?: ExamineeDataHolder;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Examinees are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the event.
         */
        'event-id': number;
    };
    url: '/event/examinee/import';
};

export type EventExamineeImportResponses = {
    /**
     * OK
     */
    200: EventExamineeResponse;
};

export type EventExamineeImportResponse = EventExamineeImportResponses[keyof EventExamineeImportResponses];

export type EventQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. If supplied, all events linked to this institution, or its children will be returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the event.
         */
        'event-id'?: string;
        /**
         * Unique textual identifier for the event.
         */
        'event-description'?: string;
        /**
         * If true, only events that haven't expired will be returned. The api will return events where end-utc is in the future.
         */
        'active-only'?: boolean;
        /**
         * The number of event objects to return. By default, this call returns a maximum of 500 objects. The limit can be set to any number less than 500.
         */
        limit?: number;
        /**
         * A specific `event-id`. The API returns objects with event-ids that precede `before-id`. This parameter cannot be used if `after-id` is used.
         */
        'before-id'?: number;
        /**
         * A specific `event-id`. The API returns objects with event-ids that follow `after-id`. This parameter cannot be used if `before-id` is used.
         */
        'after-id'?: number;
    };
    url: '/event/query';
};

export type EventQueryResponses = {
    /**
     * OK
     */
    200: Array<Event>;
};

export type EventQueryResponse = EventQueryResponses[keyof EventQueryResponses];

export type EventCloseData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. If supplied, all events linked to this institution, or its children will be returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the event.
         */
        'event-id'?: string;
        /**
         * Unique textual identifier for the event.
         */
        'event-description'?: string;
    };
    url: '/event/close';
};

export type EventCloseResponses = {
    /**
     * OK
     */
    200: Array<EventResponse>;
};

export type EventCloseResponse = EventCloseResponses[keyof EventCloseResponses];

export type EventCreateData = {
    body?: Array<EventCreateRequest>;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. This identifier is required for all institution tests. If supplied the testing event is only available to this institution and its children. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/event/create';
};

export type EventCreateResponses = {
    /**
     * OK
     */
    200: Array<EventResponse>;
};

export type EventCreateResponse = EventCreateResponses[keyof EventCreateResponses];

export type EventUpdateData = {
    body?: Array<EventUpdateRequest>;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. This identifier is required for all institution tests. If supplied the testing event is only available to this institution and its children. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/event/update';
};

export type EventUpdateResponses = {
    /**
     * OK
     */
    200: Array<EventResponse>;
};

export type EventUpdateResponse = EventUpdateResponses[keyof EventUpdateResponses];

export type ExamineeAuditQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: number;
        /**
         * The program’s system identifier of the examinee.
         */
        'program-examinee-system-id'?: string;
        /**
         * The program’s public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: string;
        /**
         * The start date >= of the audit log records in UTC.
         */
        'start-utc'?: string;
        /**
         * The end date <= of the audit log records in UTC.
         */
        'end-utc'?: string;
        /**
         * Defaults to ID=30 – UTC. Use the timezone/query to find the ID of the timezone you want to have the date and time values converted into.
         */
        timezoneId: number;
        /**
         * Required if a timezone-id is given.
         */
        useDaylightSavings: boolean;
        /**
         * Three-character language code (default is ENU) of language to return.  Currently only affects the "Secure Browser Errors" table query
         */
        languageCode?: string;
        /**
         * Bit flag for any information you wish to include in the forms object. If include-flag is not requested, all information is included.
         * Example: To include general form information and informational meta data, use 65 to represent 1+ 64.
         * Bit Information:
         *
         * | Bit Flag                       | Bit Value |
         * | ------------------------------ | --------- |
         * | 1 = General Form Information   | 1         |
         * | 3 = Form Selection             | 2         |
         * | 4 = Audits                     | 4         |
         * | 5 = Equating                   | 8         |
         * | 6 = Informational Meta Data    | 16        |
         * | 7 = Delivery Information       | 32        |
         * | 8 = Questions                  | 64        |
         * | 9 = Reporting Groups / Scoring | 128       |
         * | 10 = Projects                  | 256       |
         * | 11 = Project Tasks             | 512       |
         * | 12 = Project Labs              | 1024      |
         * | 13 = Cases                     | 2048      |
         * | 14 = Case Slides               | 4096      |
         * | 15 = Sets                      | 8192      |
         *
         */
        includeBitFlag: number;
    };
    url: '/examinee/audit/query';
};

export type ExamineeAuditQueryResponses = {
    /**
     * OK
     */
    200: ExamineeAuditResponse;
};

export type ExamineeAuditQueryResponse = ExamineeAuditQueryResponses[keyof ExamineeAuditQueryResponses];

export type QueryExamineeEventsData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. If supplied, all events linked to this institution, or its children will be returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: Array<number>;
        /**
         * The program's system identifier of the examinee.
         */
        'program-examinee-system-id'?: Array<string>;
        /**
         * The program's public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: Array<string>;
        IDType?: ExamineeIdentifierTypEnum;
    };
    url: '/examinee/events/query';
};

export type QueryExamineeEventsResponses = {
    /**
     * OK
     */
    200: Array<ExamineeEventsResponse>;
};

export type QueryExamineeEventsResponse = QueryExamineeEventsResponses[keyof QueryExamineeEventsResponses];

export type LongitudinalSegmentDetailQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique ITS database identifier of the longitudinal group.
         */
        'longitudinal-group-id'?: number;
        /**
         * The unique textual identifier of the longitudinal group.
         */
        'longitudinal-group-name'?: string;
        /**
         * **One of the examinee identifiers below must be supplied**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: number;
        /**
         * The program's system identifier of the examinee.
         */
        'program-examinee-system-id'?: string;
        /**
         * The program's public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: string;
        /**
         * Bit flag that represents any information you wish to include in the result.
         * Example: To include examinee and longitudinal information, use 5 to represent 1 + 4.
         * **Bit Information**
         *
         * | Bit Flag                  | Bit Value |
         * |---------------------------|-----------|
         * | 1=Event Information       | 1         |
         * | 2=Detail Information      | 2         |
         * | 3=Score Group Information | 4         |
         * | 4=Time Bank Information   | 8         |
         */
        'include-flag'?: number;
        /**
         * The unique ITS database identifier of the test result. If this is not supplied, the last result taken by the examinee is returned.
         */
        'result-id'?: number;
    };
    url: '/examinee/longitudinal-segment-detail/query';
};

export type LongitudinalSegmentDetailQueryResponses = {
    /**
     * OK
     */
    200: LongitudinalGroupSegmentDetail;
};

export type LongitudinalSegmentDetailQueryResponse = LongitudinalSegmentDetailQueryResponses[keyof LongitudinalSegmentDetailQueryResponses];

export type LongitudinalSegmentsQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique ITS database identifier of the longitudinal group. If `longitudinal-group-id` and `longitudinal-group-name` are not supplied, all longitudinal groups for the matched examinees are returned.
         */
        'longitudinal-group-id'?: number;
        /**
         * The unique textual identifier of the longitudinal group. If `longitudinal-group-id` and `longitudinal-group-name` are not supplied, all longitudinal groups for the matched examinees are returned.
         */
        'longitudinal-group-name'?: string;
        /**
         * Filter for the start date to query from. Must include an end-utc date. Looks for all segments that start in this date range.
         */
        'start-utc'?: string;
        /**
         * Filter for the end date to query to. Must include an end-utc date. Looks for all segments that start in this date range.
         */
        'end-utc'?: string;
        /**
         * The cycle sequence number.
         */
        'cycle-num'?: number;
        /**
         * The run sequence number. Must include a cycle number.
         */
        'run-num'?: number;
        /**
         * The segment sequence number. Must include a cycle and run number.
         */
        'segment-num'?: number;
        /**
         * **One of the examinee identifiers below must be supplied**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: number;
        /**
         * The program's system identifier of the examinee.
         */
        'program-examinee-system-id'?: string;
        /**
         * The program's public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: string;
    };
    url: '/examinee/longitudinal-segments/query';
};

export type LongitudinalSegmentsQueryResponses = {
    /**
     * OK
     */
    200: Array<Result>;
};

export type LongitudinalSegmentsQueryResponse = LongitudinalSegmentsQueryResponses[keyof LongitudinalSegmentsQueryResponses];

export type ExamineeQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. The API matches examinees linked to this institution and the institution's children. The web API client must have access to this institution.
         */
        'program-institution-id'?: Array<string>;
        /**
         * The unique ITS database identifier of the examinee. Use a comma-separated list to query on multiple examinees.
         */
        'examinee-id'?: Array<number>;
        /**
         * The program's system identifier of the examinee. Use a comma-separated list to query on multiple examinees.
         */
        'program-examinee-system-id'?: Array<string>;
        /**
         * The program's public or business identifier of the examinee. Use a comma-separated list to query on multiple examinees.
         */
        'program-examinee-public-id'?: Array<string>;
        'return-fields'?: number;
        /**
         * Bit flag for any information you wish to include in the examinee object. If neither `include-flag` or `exclude-flag` are returned, all information is included. This parameter cannot be used if the exclude-flag parameter is used. Example: To include profile, address, and institution information, use 1096 to represent 8 + 64 + 1024. Bit Information
         *
         * | Bit Flag                            | Bit Value |
         * |-------------------------------------|-----------|
         * | 1 = Examinee status                 | 1         |
         * | 2 = Enrollment status               | 2         |
         * | 3 = Login information               | 4         |
         * | 4 = Profile information             | 8         |
         * | 5 = Examinee photo                  | 16        |
         * | 6 = Contact information             | 32        |
         * | 7 = Address                         | 64        |
         * | 8 = Job information                 | 218       |
         * | 9 = Program specific properties     | 256       |
         * | 10 = Delivery options and overrides | 512       |
         * | 11 = Institutions                   | 1024      |
         * | 12 = Certifications                 | 2048      |
         */
        'include-flag'?: number;
        /**
         * Bit flag for any information you wish to exclude from the examinee object. This parameter cannot be used if the `include-flag` parameter is used. See the `include-flag` parameter for a list of supported bits.
         */
        'exclude-flag'?: number;
        /**
         * The number of examinee objects to return. By default, this call returns a maximum of 500 objects. The limit can be set to any number less than 500.
         */
        limit?: number;
        /**
         * A specific `examinee-id`. The API returns objects with `examinee-id`s that precede `before-id`. This parameter cannot be used if `after-id` is used.
         */
        'before-id'?: number;
        /**
         * A specific `examinee-id`. The API returns objects with `examinee-id`s that follow `after-id`. This parameter cannot be used if `before-id` is used.
         */
        'after-id'?: number;
    };
    url: '/examinee/query';
};

export type ExamineeQueryResponses = {
    /**
     * OK
     */
    200: Array<Examinee2>;
};

export type ExamineeQueryResponse = ExamineeQueryResponses[keyof ExamineeQueryResponses];

export type ExamineeImport1Data = {
    body?: ExamineeDataHolder1;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Examinees are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/examinee/import';
};

export type ExamineeImport1Responses = {
    /**
     * OK
     */
    200: Array<ExamineeResponse>;
};

export type ExamineeImport1Response = ExamineeImport1Responses[keyof ExamineeImport1Responses];

export type ExamineeImportData = {
    body?: ExamineeDataHolder1;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Examinees are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/examinee/import';
};

export type ExamineeImportResponses = {
    /**
     * OK
     */
    200: Array<ExamineeResponse>;
};

export type ExamineeImportResponse = ExamineeImportResponses[keyof ExamineeImportResponses];

export type ExamineeDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. The API matches examinees linked to this institution and the institution's children. The web API client must have access to this institution.
         */
        'program-institution-id'?: Array<string>;
        /**
         * The unique ITS database identifier of the examinee. One of the three examinee identifiers are required.
         */
        'examinee-id'?: Array<number>;
        /**
         * The program's public or business identifier of the examinee. One of the three examinee identifiers are required.
         */
        'program-examinee-public-id'?: Array<string>;
        /**
         * The program's system identifier of the examinee. One of the three examinee identifiers are required.
         */
        'program-examinee-system-id'?: Array<string>;
        'delete-reason': string;
    };
    url: '/examinee/delete';
};

export type ExamineeDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ExamineeRecordQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique ITS database table name from the audit/query
         */
        'table-name': string;
        /**
         * The unique ITS database ID number for the record from the audit/query.
         */
        'record-id': number;
    };
    url: '/examinee/record/query';
};

export type ExamineeRecordQueryResponses = {
    /**
     * OK
     */
    200: ExamineeRecordResponse;
};

export type ExamineeRecordQueryResponse = ExamineeRecordQueryResponses[keyof ExamineeRecordQueryResponses];

export type FormDefinitionImportData = {
    body?: FormRequestBody;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/form/definition/Import';
};

export type FormDefinitionImportResponses = {
    /**
     * OK
     */
    200: FormDefinitionResponseReturn;
};

export type FormDefinitionImportResponse = FormDefinitionImportResponses[keyof FormDefinitionImportResponses];

export type FormDefinitionQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the form.
         */
        'form-id'?: number;
    };
    url: '/form/definition/Query';
};

export type FormDefinitionQueryResponses = {
    /**
     * OK
     */
    200: Array<FormDefinitionModel>;
};

export type FormDefinitionQueryResponse = FormDefinitionQueryResponses[keyof FormDefinitionQueryResponses];

export type FormQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Only forms accessible by this institution are returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the form.
         */
        'form-id'?: Array<number>;
        /**
         * The UTC date/time to find all new or updated forms since that date/time.
         */
        'last-modified-utc'?: string;
        /**
         * The number of result objects to return. By default, this call will return a maximum of 1000 form objects. The limit can be set to any number less than 1000.
         */
        limit?: number;
        /**
         * The form-id is the pagination ID used for this resource. Form objects with IDs immediately before this ID are returned. This parameter cannot be used if after-id is used.
         */
        'before-id'?: number;
        /**
         * The form-id is the pagination ID used for this resource. Form objects with IDs immediately after this ID are returned. This parameter cannot be used if before-id is used.
         */
        'after-id'?: number;
        /**
         * Bit flag for any information you wish to include in the forms object. If include-flag is not requested, all information is included.
         * Example: To include general form information and informational meta data, use 65 to represent 1+ 64.
         * Bit Information:
         *
         * | Bit Flag                       | Bit Value |
         * | ------------------------------ | --------- |
         * | 1 = General Form Information   | 1         |
         * | 3 = Form Selection             | 2         |
         * | 4 = Audits                     | 4         |
         * | 5 = Equating                   | 8         |
         * | 6 = Informational Meta Data    | 16        |
         * | 7 = Delivery Information       | 32        |
         * | 8 = Questions                  | 64        |
         * | 9 = Reporting Groups / Scoring | 128       |
         * | 10 = Projects                  | 256       |
         * | 11 = Project Tasks             | 512       |
         * | 12 = Project Labs              | 1024      |
         * | 13 = Cases                     | 2048      |
         * | 14 = Case Slides               | 4096      |
         * | 15 = Sets                      | 8192      |
         *
         */
        'include-flag'?: number;
    };
    url: '/Form/Query';
};

export type FormQueryResponses = {
    /**
     * OK
     */
    200: Array<FormQueryByFilterAsyncResult>;
};

export type FormQueryResponse = FormQueryResponses[keyof FormQueryResponses];

export type FormCreateData = {
    body: FormInsertAsyncRequestBody;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Only forms accessible by this institution are returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/Form/Create';
};

export type FormCreateResponses = {
    /**
     * OK
     */
    200: FormInsertAsyncResult;
};

export type FormCreateResponse = FormCreateResponses[keyof FormCreateResponses];

export type FormUpdateData = {
    body: FormUpdateAsyncRequestBody;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Only forms accessible by this institution are returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/Form/Update';
};

export type FormUpdateResponses = {
    /**
     * OK
     */
    200: FormUpdateAsyncResult;
};

export type FormUpdateResponse = FormUpdateResponses[keyof FormUpdateResponses];

export type FormDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Only forms accessible by this institution are returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the form.
         */
        'form-id': Array<number>;
    };
    url: '/Form/Delete';
};

export type FormDeleteResponses = {
    /**
     * OK
     */
    200: Array<FormDeleteAsyncResult>;
};

export type FormDeleteResponse = FormDeleteResponses[keyof FormDeleteResponses];

export type GetFormReportsQueryData = {
    body?: never;
    path?: never;
    query: {
        'program-id': number;
        'test-id': number;
        'form-id': number;
    };
    url: '/form/reports/Query';
};

export type GetFormReportsQueryResponses = {
    /**
     * OK
     */
    200: FormReportQueryResult;
};

export type GetFormReportsQueryResponse = GetFormReportsQueryResponses[keyof GetFormReportsQueryResponses];

export type GetFormResFilesQueryData = {
    body?: never;
    path?: never;
    query: {
        'program-id': number;
        'form-id': number;
    };
    url: '/form/res-files/Query';
};

export type GetFormResFilesQueryErrors = {
    /**
     * Unprocessable Content
     */
    422: ValidationProblemDetails;
};

export type GetFormResFilesQueryError = GetFormResFilesQueryErrors[keyof GetFormResFilesQueryErrors];

export type GetFormResFilesQueryResponses = {
    /**
     * OK
     */
    200: Blob | File;
};

export type GetFormResFilesQueryResponse = GetFormResFilesQueryResponses[keyof GetFormResFilesQueryResponses];

export type InventoryQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id': string;
        /**
         * Comma delimited list of order-ids.
         */
        'order-id'?: Array<number>;
        /**
         * Comma delimited list of program-order-ids.
         */
        'program-order-id'?: Array<string>;
        /**
         * If specified, returns inventory for the specified packages only.
         */
        'package-code'?: Array<number>;
        /**
         * The start date >= of the order field of the order record. Used in conjunction with the end-order-utc.
         */
        'start-order-utc'?: string;
        /**
         * The end date <= of the order field of the order record. Used in conjunction with the start-order-utc.
         */
        'end-order-utc'?: string;
        /**
         * Bit flag for the counts you wish to include in the Inventory object.
         * Bit Information:
         *
         * | Bit Flag                       | Bit Value |
         * | ------------------------------ | --------- |
         * | Purchased                      | 1         |
         * | Available                      | 2         |
         * | Activated                      | 4         |
         * | Expired                        | 8         |
         * | Removed                        | 16        |
         *
         */
        'include-flag'?: number;
    };
    url: '/inventory/query';
};

export type InventoryQueryResponses = {
    /**
     * OK
     */
    200: Array<InventoryQueryResponse>;
};

export type InventoryQueryResponse2 = InventoryQueryResponses[keyof InventoryQueryResponses];

export type TestExportQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * BankId for the bank from which to retrieve published form.
         */
        'bank-id': number;
        /**
         * FormId of the published form to be returned.
         */
        'form-id': number;
    };
    url: '/iw-tool/export/tests/query';
};

export type TestExportQueryResponses = {
    /**
     * OK
     */
    200: IbXmlTestResponse;
};

export type TestExportQueryResponse = TestExportQueryResponses[keyof TestExportQueryResponses];

export type ItemWorkshopImportData = {
    body?: {
        'import-data'?: Blob | File;
    };
    path?: never;
    query: {
        /**
         * The unique ITS database identifier of the bank provided as part of configuration.
         */
        'bank-id': number;
        /**
         * The three-letter ISO language code.
         */
        language: string;
        /**
         * The unique ITS database identifier of the folder where the data will be imported.
         */
        'folder-id': number;
    };
    url: '/iw-tool/import/import';
};

export type ItemWorkshopImportResponses = {
    /**
     * OK
     */
    200: ImportResponse;
};

export type ItemWorkshopImportResponse = ItemWorkshopImportResponses[keyof ItemWorkshopImportResponses];

export type ItemWorkshopImportAsyncData = {
    body?: {
        'import-data'?: Blob | File;
    };
    path?: never;
    query: {
        /**
         * The unique ITS database identifier of the bank provided as part of configuration.
         */
        'bank-id': number;
        /**
         * The three-letter ISO language code.
         */
        language: string;
        /**
         * The unique ITS database identifier of the folder where the data will be imported.
         */
        'folder-id': number;
        /**
         * The URL to call when the import is complete. If this is not supplied, the notification that the import is complete is sent to the URL configured for ITS event notifications.
         */
        'callback-url'?: string;
    };
    url: '/iw-tool/import/import-async';
};

export type ItemWorkshopImportAsyncResponses = {
    /**
     * OK
     */
    200: ImportResponseAsync;
};

export type ItemWorkshopImportAsyncResponse = ItemWorkshopImportAsyncResponses[keyof ItemWorkshopImportAsyncResponses];

export type ItemWorkshopQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique ITS database identifier of the bank provided as part of configuration.
         */
        'bank-id': number;
        /**
         * The unique ITS database identifier of the import.
         */
        'import-id': number;
    };
    url: '/iw-tool/import/query';
};

export type ItemWorkshopQueryResponses = {
    /**
     * OK
     */
    200: ImportQueryResponse;
};

export type ItemWorkshopQueryResponse = ItemWorkshopQueryResponses[keyof ItemWorkshopQueryResponses];

export type GetLongitudinalGroupExamineesQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique ITS database identifier of the longitudinal group. If `longitudinal-group-id` and `longitudinal-group-name` are not supplied, all longitudinal groups for the matched examinees are returned.
         */
        'longitudinal-group-id'?: number;
        /**
         * The unique textual identifier of the longitudinal group. If `longitudinal-group-id` and `longitudinal-group-name` are not supplied, all longitudinal groups for the matched examinees are returned.
         */
        'longitudinal-group-name'?: string;
        /**
         * **One of the examinee identifiers below must be supplied**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: Array<number>;
        /**
         * The program's system identifier of the examinee.
         */
        'program-examinee-system-id'?: Array<string>;
        /**
         * The program's public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: Array<string>;
        /**
         * The number of Longitudinal Group Examinee objects to return. By default, this call returns a maximum of 500 objects. The limit can be set to any number less than 500.
         */
        limit?: number;
        /**
         * A specific examinee-id. The API returns objects with examinee-ids that precede before-id. This parameter cannot be used if after-id is used.
         */
        'before-id'?: number;
        /**
         * A specific examinee-id. The API returns objects with examinee-ids that follow after-id. This parameter cannot be used if before-id is used.
         */
        'after-id'?: number;
    };
    url: '/longitudinal-group/examinees/query';
};

export type GetLongitudinalGroupExamineesQueryResponses = {
    /**
     * OK
     */
    200: Array<LongitudinalGroupExaminee>;
};

export type GetLongitudinalGroupExamineesQueryResponse = GetLongitudinalGroupExamineesQueryResponses[keyof GetLongitudinalGroupExamineesQueryResponses];

export type PostLongitudinalGroupExamineesCreateData = {
    body?: LongitudinalGroupExaminee;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
    };
    url: '/longitudinal-group/examinees/create';
};

export type PostLongitudinalGroupExamineesCreateResponses = {
    /**
     * OK
     */
    200: LongitudinalGroupExamineResponse;
};

export type PostLongitudinalGroupExamineesCreateResponse = PostLongitudinalGroupExamineesCreateResponses[keyof PostLongitudinalGroupExamineesCreateResponses];

export type PutLongitudinalGroupExamineesUpdateData = {
    body?: LongitudinalGroupExaminee;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
    };
    url: '/longitudinal-group/examinees/update';
};

export type PutLongitudinalGroupExamineesUpdateResponses = {
    /**
     * OK
     */
    200: LongitudinalGroupExamineResponse;
};

export type PutLongitudinalGroupExamineesUpdateResponse = PutLongitudinalGroupExamineesUpdateResponses[keyof PutLongitudinalGroupExamineesUpdateResponses];

export type DeleteLongitudinalGroupExamineesDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique ITS database identifier of the longitudinal group. This is required if longitudinal-group-name is not supplied. If no optional filters are supplied, all examinees linked to the group are removed.
         */
        'longitudinal-group-id'?: number;
        /**
         * The unique textual identifier of the longitudinal group. This is required if longitudinal-group-id is not supplied. If no optional filters are supplied, all examinees linked to the group are removed.
         */
        'longitudinal-group-name'?: string;
        /**
         * **One of the examinee identifiers below must be supplied**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: Array<number>;
        /**
         * The program's system identifier of the examinee.
         */
        'program-examinee-system-id'?: Array<string>;
        /**
         * The program's public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: Array<string>;
        /**
         * The default is false. This option is available only if the examinee has not taken any results within the longitudinal group. If true, the records are deleted from the database. If false, the examinee's longitudinal group is set to inactive.
         */
        'permanent-delete'?: boolean;
    };
    url: '/longitudinal-group/examinees/delete';
};

export type DeleteLongitudinalGroupExamineesDeleteResponses = {
    /**
     * OK
     */
    200: Array<LongitudinalGroupExamineResponse>;
};

export type DeleteLongitudinalGroupExamineesDeleteResponse = DeleteLongitudinalGroupExamineesDeleteResponses[keyof DeleteLongitudinalGroupExamineesDeleteResponses];

export type ExamineeQuery1Data = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The program's unique identifier
         */
        'program-id'?: number;
        /**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: number;
        /**
         * The program’s system identifier of the examinee.
         */
        'program-examinee-system-id'?: string;
        /**
         * The program’s public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: string;
        /**
         * The start date >= of the CreateUTC field of the message record.
         */
        'start-utc'?: string;
        /**
         * The end date <= of the CreateUTC field of the message record.
         */
        'end-utc'?: string;
        /**
         * Before ID for message history
         */
        'before-id'?: number;
        /**
         * After ID for message history
         */
        'after-id'?: number;
        /**
         * Limit of the number of messages returned
         */
        limit?: number;
    };
    url: '/message-history/query';
};

export type ExamineeQuery1Responses = {
    /**
     * OK
     */
    200: Array<Message>;
};

export type ExamineeQuery1Response = ExamineeQuery1Responses[keyof ExamineeQuery1Responses];

export type OrderQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. If supplied, all events linked to this institution or its children will be returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique ITS database identifier of the order. Multiple supported.
         */
        'order-id'?: Array<number>;
        /**
         * The program-assigned, alpha-numeric identifier of the order. Multiple supported.
         */
        'order-code'?: Array<string>;
        /**
         * The program-assigned, alpha-numeric identifier of the package. Multiple supported.
         */
        'package-code'?: Array<string>;
        /**
         * If specified, orders created on or after this date in UTC are returned. This parameter cannot be used if `ordered-before-utc` is supplied.
         */
        'ordered-after-utc'?: string;
        /**
         * If specified, orders created on or before this date in UTC are returned. This parameter cannot be used if `ordered-after-utc` is supplied.
         */
        'ordered-before-utc'?: string;
    };
    url: '/order/Query';
};

export type OrderQueryResponses = {
    /**
     * OK
     */
    200: Array<Order>;
};

export type OrderQueryResponse = OrderQueryResponses[keyof OrderQueryResponses];

export type OrderCreateData = {
    body?: OrderRequest;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. This identifier is required for all institution tests. If supplied, the testing event is available only to this institution and its children. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/order/Create';
};

export type OrderCreateResponses = {
    /**
     * OK
     */
    200: Array<OrderResponse>;
};

export type OrderCreateResponse = OrderCreateResponses[keyof OrderCreateResponses];

export type OrderDeleteData = {
    body?: OrderDelete;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. This identifier is required for all institution tests. If supplied, the testing event is available only to this institution and its children. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/order/Delete';
};

export type OrderDeleteResponses = {
    /**
     * OK
     */
    200: Array<OrderResponse>;
};

export type OrderDeleteResponse = OrderDeleteResponses[keyof OrderDeleteResponses];

export type PackageFormsQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Only forms accessible by this institution are returned. The web API client must have access to this institution.
         */
        'program-institution-id': string;
        /**
         * The API will return forms for the `package-code` specified.
         */
        'package-code': string;
        /**
         * If `true`, only accessible forms are returned. If not passed or `false`, accessible and non-accessible forms are returned.
         */
        'accessible-only'?: boolean;
        /**
         * If `true`, only non-secure forms are returned. If not passed or `false`, secure and non-secure forms are returned.
         */
        'non-secure-only'?: boolean;
        /**
         * If `true`, only practice forms are returned. If not passed or `false` and `non-practice-only` is not passed or `false`, then practice and non-practice forms are returned. This parameter cannot be passed if `non-practice-only` is passed as `true`.
         */
        'practice-only'?: boolean;
        /**
         * If `true`, only non-practice forms are returned. If not passed or `false` and `practice-only` is not passed or `false`, then practice and non-practice forms are returned. This parameter cannot be passed if `practice-only` is passed as `true`.
         */
        'non-practice-only'?: boolean;
    };
    url: '/package/forms/Query';
};

export type PackageFormsQueryResponses = {
    /**
     * OK
     */
    200: Array<PackageForm>;
};

export type PackageFormsQueryResponse = PackageFormsQueryResponses[keyof PackageFormsQueryResponses];

export type RegistrationImportCreateData = {
    body?: Array<RegistrationCreateRequest>;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution.  The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/registration/import';
};

export type RegistrationImportCreateResponses = {
    /**
     * OK
     */
    200: Array<RegistrationImportResponse>;
};

export type RegistrationImportCreateResponse = RegistrationImportCreateResponses[keyof RegistrationImportCreateResponses];

export type RegistrationUpdateData = {
    body?: Array<RegistrationCreateUpdateRequest>;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution.  The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/registration/import';
};

export type RegistrationUpdateResponses = {
    /**
     * OK
     */
    200: Array<RegistrationImportResponse>;
};

export type RegistrationUpdateResponse2 = RegistrationUpdateResponses[keyof RegistrationUpdateResponses];

export type PatchRegistrationUpdateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution.  The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * ITS database unique identifier for the examinee.
         */
        'examinee-id'?: number;
        /**
         * Program’s unique public identifier for the examinee.
         */
        'program-examinee-public-id'?: string;
        /**
         * Program’s unique system identifier for the examinee.
         */
        'program-examinee-system-id'?: string;
        /**
         * The program's unique Institutional Examinee identifier. The identifier must be unique within the uniqueness scope as defined for the program. The program-institution-id URL parameter is required when using this identifier.
         */
        'program-examinee-institution-id'?: string;
        /**
         * Program’s registration name.
         */
        'program-registration-id'?: string;
        /**
         * ITS database unique identifier for the registration.
         */
        'registration-id'?: number;
    };
    url: '/registration/update';
};

export type PatchRegistrationUpdateResponses = {
    /**
     * OK
     */
    200: RegistrationUpdateResponse;
};

export type PatchRegistrationUpdateResponse = PatchRegistrationUpdateResponses[keyof PatchRegistrationUpdateResponses];

export type RegistrationQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution.  The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique ITS database identifier of the registration. Multiple registrations can be specified using commas. If there is a value for this parameter, there should not be a value for program-registration-id
         */
        'registration-id'?: Array<number>;
        /**
         * The unique identifier of the registration for the program. Multiple registration can be specified using commas. If there is a value for this parameter, there should not be a value for registration-id.
         */
        'program-registration-id'?: Array<string>;
        /**
         * Unique candidate identifier.
         */
        'examinee-id'?: number;
        /**
         * Program unique public string for the examinee
         */
        'program-examinee-public-id'?: string;
        /**
         * Program unique system string for the examinee
         */
        'program-examinee-system-id'?: string;
        /**
         * The program's unique Institutional Examinee identifier.The identifier must be unique within the uniqueness scope as defined for the program. The program-institution-id URL parameter is required when using this identifier.
         */
        'program-examinee-institution-id'?: string;
        /**
         * Earliest start date matched in UTC
         */
        'start-utc'?: string;
        /**
         * Latest start date matched in UTC.
         */
        'end-utc'?: string;
        /**
         * Unique test identifier.
         */
        'test-id'?: number;
        /**
         * If not provided, then condition is ignored. If False, then only registrations not linked to result are returned. If set to True, then only registrations with started results will be returned.
         */
        started?: boolean;
        /**
         * If not provided, then condition is ignored. If False, then only registrations that are not started or have not been completed are returned. If set to True, then only registrations with completed results will be returned.
         */
        completed?: boolean;
        /**
         * Bit flag.  Set the bits for any information you wish to exclude from each registration
         * (the values in the table can be OR'd to set the desired filter).
         * Bit Information:
         *
         * | Bit Flag                                                                           | Bit Value |
         * | ---------------------------------------------------------------------------------- | --------- |
         * | 1 = All registration information except RegistrationID and ProgramRegistrationID   | 1         |
         * | 2 = RegistrationTests                                                              | 2         |
         *
         */
        'exclude-flag'?: number;
        /**
         * The number of registration objects to return. By default, this call will return a maximum of 1000 registration objects. The limit can be set to any number less than 1000.
         */
        limit?: number;
        /**
         * The registration-id is the pagination ID used for this resource. Registration objects with IDs immediately before this ID are returned. This parameter cannot be used if after-id is used.
         */
        'before-id'?: number;
        /**
         * The registration-id is the pagination ID used for this resource. Registration objects with IDs immediately after this ID are returned. This parameter cannot be used if before-id is used.
         */
        'after-id'?: number;
    };
    url: '/registration/query';
};

export type RegistrationQueryResponses = {
    /**
     * OK
     */
    200: Array<RegistrationQueryResponse>;
};

export type RegistrationQueryResponse2 = RegistrationQueryResponses[keyof RegistrationQueryResponses];

export type RegistrationDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution.  The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the registration. Supports a comma delimited list.
         */
        'registration-id'?: Array<number>;
        /**
         * The program’s unique identifier for the registration. Support a comma delimited list.
         */
        'program-registration-id'?: Array<string>;
        /**
         * Explanation for the removal. Used on all registrations that are being removed.
         */
        Reason: string;
    };
    url: '/registration/delete';
};

export type RegistrationDeleteResponses = {
    /**
     * OK
     */
    200: Array<RegistrationDeleteStatus>;
};

export type RegistrationDeleteResponse = RegistrationDeleteResponses[keyof RegistrationDeleteResponses];

export type RemoteAdminUrlsQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        UserID?: number;
        /**
         * 1 = Direct session access (requires session code to be provided)
         *
         * 2 = Session management (allows proctor to create and visit sessions)
         */
        'url-type': number;
        /**
         * `url-type` = 1. The unique identifier of the session. The `session-code` can refer to both existing, previously used, and new sessions. This is required if `url-type` = 1.
         */
        'session-code'?: string;
        /**
         * Users are redirected to this URL when the remote URL is used after the expiration period (24 hours).
         */
        'redirect-url'?: string;
        'examinee-portal-options'?: number;
        /**
         * `url-type` = 2. Limits proctor to see sessions linked to this `group-identifier`.
         */
        'group-identifier'?: string;
        /**
         * `url-type` = 2. Limits proctor to see sessions created `limit-days` in the past. Set to 0 for same day only. The default is 0.
         */
        'limit-days'?: number;
        /**
         * The unique identifier of the proctor. This ID will be used in session audit logs.
         */
        'proctor-identifier': string;
        /**
         * The proctor name that will be displayed on the session detail and session management pages.
         */
        'proctor-display-name': string;
        /**
         * The first name of the proctor.
         */
        'proctor-first-name': string;
        /**
         * The last name of the proctor.
         */
        'proctor-last-name': string;
        /**
         * The number of examinees participating in the remote-proctored session.
         */
        'reserve-number'?: number;
        /**
         * The start time in UTC of the remoted-proctored session.
         */
        'reserve-time'?: string;
        /**
         * This parameter is only needed in a battery scenario where each subsequent test is delivered in a new session, and the session being created is occurring before the previous session’s reservations have expired. `parent-session-code` allows for all connections of the new session to assume the previous session’s reservations.
         */
        'parent-session-code'?: string;
        /**
         * When set, the session expiration time is extended to the end of the day.
         */
        'resume-session'?: boolean;
        /**
         * Minutes offset from UTC. The session expiration will be at midnight of the current day based on offset, or eight hours after start of session, whichever is later. If not provided, then offset will be EST (-300) / EDT(-240).
         */
        'minutes-offset'?: number;
        /**
         * The expiration date and time of the session. `minutes-offset` will be honored to determine the time zone. If `minutes-offset` is not provided, then offset will be EST (-300) / EDT(-240).
         */
        'session-expiration'?: string;
        'proctor-functions'?: number;
    };
    url: '/remote/admin-urls/Query';
};

export type RemoteAdminUrlsQueryResponses = {
    /**
     * OK
     */
    200: string;
};

export type RemoteAdminUrlsQueryResponse = RemoteAdminUrlsQueryResponses[keyof RemoteAdminUrlsQueryResponses];

export type RemoteExamineeDataQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique identifier of the session.
         */
        'session-code'?: string;
        /**
         * The internal database identifier of the examinee.
         */
        examinee?: Array<number>;
        /**
         * The public identifier of the examinee. For example, a student identifier. Returned if available.
         */
        'program-examinee-public-id'?: string;
        /**
         * The external system identifier for the examinee. This is typically a database identifier. Returned if available.
         */
        'program-examinee-system-id'?: string;
        /**
         * Use the bitflag below to specify what information to return. The default is 31.
         */
        'data-options'?: number;
        /**
         * The number of hours the video, photo, and chat log URLs will be accessible after the URL is generated.
         */
        'url-available-hours'?: number;
    };
    url: '/remote/examinee-data/Query';
};

export type RemoteExamineeDataQueryResponses = {
    /**
     * OK
     */
    200: Array<SessionData>;
};

export type RemoteExamineeDataQueryResponse = RemoteExamineeDataQueryResponses[keyof RemoteExamineeDataQueryResponses];

export type GetRemotePracticeChecksQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * If supplied, the API will return all system checks that originated from this ip-address.  You can request three octets or four octets.  If three octets are requested, the API will return all system checks where the first three octets of the system check ip address matches this ip-address.
         */
        'ip-address'?: string;
        /**
         * The program�s public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: string;
        /**
         * Includes all checks completed on or after this date.
         */
        'start-utc'?: string;
        /**
         * Includes all checks completed before this date.
         */
        'end-utc'?: string;
        /**
         * The program’s unique identifier for the registration.
         */
        'program-registration-id'?: string;
        /**
         * The number of `remote-system-check` objects to return. By default, this call returns a maximum of 100 objects. The limit can be set to any number less than 100.
         */
        limit?: number;
        /**
         * A specific `practice-check-id`. The API returns objects with system-check-ids that precede before-id. This parameter cannot be used if after-id is used.
         */
        'before-id'?: number;
        /**
         * A specific `practice-check-id`. The API returns objects with system-check-ids that follow after-id. This parameter cannot be used if before-id is used.
         */
        'after-id'?: number;
    };
    url: '/remote/practice-checks/Query';
};

export type GetRemotePracticeChecksQueryResponses = {
    /**
     * OK
     */
    200: Array<RemotePracticeCheck>;
};

export type GetRemotePracticeChecksQueryResponse = GetRemotePracticeChecksQueryResponses[keyof GetRemotePracticeChecksQueryResponses];

export type RemoteSessionDataQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique identifier of the session.
         */
        'session-code'?: string;
        /**
         * Use the bitflag below to specify what information to return. The default is 31.
         */
        'data-options'?: number;
        /**
         * If set to `true`, only examinees with at least one flagged video recording will be included in the response object.
         */
        'flagged-only'?: boolean;
        /**
         * The number of hours the video, photo, and chat log URLs will be accessible after the URL is generated.
         */
        'url-available-hours'?: number;
    };
    url: '/remote/session-data/Query';
};

export type RemoteSessionDataQueryResponses = {
    /**
     * OK
     */
    200: Array<SessionData>;
};

export type RemoteSessionDataQueryResponse = RemoteSessionDataQueryResponses[keyof RemoteSessionDataQueryResponses];

export type RemoteSessionCreateData = {
    body?: Array<SessionCreateRequest>;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/remote/sessions/create';
};

export type RemoteSessionCreateResponses = {
    /**
     * OK
     */
    200: Array<SessionResponse>;
};

export type RemoteSessionCreateResponse = RemoteSessionCreateResponses[keyof RemoteSessionCreateResponses];

export type RemoteSessionUpdateData = {
    body?: Array<SessionUpdateRequest>;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/remote/sessions/update';
};

export type RemoteSessionUpdateResponses = {
    /**
     * OK
     */
    200: Array<SessionResponse>;
};

export type RemoteSessionUpdateResponse = RemoteSessionUpdateResponses[keyof RemoteSessionUpdateResponses];

export type RemoteSessionQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique identifier of the remote session. This parameter is required if `start-utc` and `end-utc` are not supplied.
         */
        'session-code'?: string;
        /**
         * Includes all sessions starting on or after this date. This parameter and `end-utc` are required if `session-code` is not supplied.
         */
        'start-utc'?: string;
        /**
         * Includes all sessions ending on or before this date. This parameter and `start-utc` are required if `session-code` is not supplied.
         */
        'end-utc'?: string;
    };
    url: '/remote/sessions/query';
};

export type RemoteSessionQueryResponses = {
    /**
     * OK
     */
    200: Array<Session>;
};

export type RemoteSessionQueryResponse = RemoteSessionQueryResponses[keyof RemoteSessionQueryResponses];

export type RemoteSessionDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique identifier of the remote session.
         */
        'session-code': Array<string>;
    };
    url: '/remote/sessions/delete';
};

export type RemoteSessionDeleteResponses = {
    /**
     * OK
     */
    200: Array<SessionResponse>;
};

export type RemoteSessionDeleteResponse = RemoteSessionDeleteResponses[keyof RemoteSessionDeleteResponses];

export type GetRemoteSystemChecksQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * If supplied, the API will return all system checks that originated from this ip-address. You can request three octets or four octets. If three octets are requested, the API will return all system checks where the first three octets of the system check ip address matches this ip-address.
         */
        'ip-address'?: Array<string>;
        /**
         * Includes all checks completed on or after this date.
         */
        'start-utc'?: string;
        /**
         * Includes all checks completed before this date.
         */
        'end-utc'?: string;
        /**
         * Includes all checks completed before this date.
         */
        limit?: number;
        /**
         * A specific system-check-id. The API returns objects with  system-check-ids that precede before-id. This parameter cannot be used if after-id is used.
         */
        'before-id'?: number;
        /**
         * A specific system-check-id. The API returns objects with system-check-ids that follow after-id. This parameter cannot be used if before-id is used.
         */
        'after-id'?: number;
    };
    url: '/remote/system-checks/Query';
};

export type GetRemoteSystemChecksQueryResponses = {
    /**
     * OK
     */
    200: Array<SystemsCheckRecord>;
};

export type GetRemoteSystemChecksQueryResponse = GetRemoteSystemChecksQueryResponses[keyof GetRemoteSystemChecksQueryResponses];

export type ResultIdentifierQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. The API matches results linked to this institution and the institution’s children. The API client must have access to this institution.
         */
        'program-institution-id'?: Array<string>;
        /**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: Array<number>;
        /**
         * The program's system identifier of the examinee.
         */
        'program-examinee-system-id'?: Array<string>;
        /**
         * The program's public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: Array<string>;
        /**
         * The program's registration identifier.
         */
        'program-registration-id'?: Array<string>;
        /**
         * The program's managed center.
         */
        'program-center-id'?: Array<string>;
        /**
         * The ITS database identifier of the cohort.
         */
        'cohort-id'?: Array<number>;
        /**
         * The ITS database identifier of the event.
         */
        'event-id'?: Array<number>;
        /**
         * The ITS database identifier of the test.
         */
        'test-id'?: Array<number>;
        /**
         * The ITS database identifier of the form.
         */
        'form-id'?: Array<number>;
        /**
         * The unique ITS database identifier of the longitudinal group.
         */
        'longitudinal-group-id'?: Array<number>;
        /**
         * Used in conjunction with the end-utc to give a time range for results with a modified date in that time range, in UTC.
         */
        'start-utc'?: string;
        /**
         * Used in conjunction with the start-utc to give a time range for results with a modified date in that time range, in UTC.
         */
        'end-utc'?: string;
        /**
         * If `true`, only completed results are returned.
         */
        'completed-only'?: boolean;
        /**
         * If `true`, only results linked to equated forms are returned.
         */
        'equated-only'?: boolean;
        /**
         * If `true`, demo results are included.
         */
        'include-demo'?: boolean;
        /**
         * The number of `result-id`s to return. By default, this call returns a maximum of 10,000 identifiers.
         */
        limit?: number;
        /**
         * A specific `result-id`. The API returns `result-id`s that precede `before-id`. This parameter cannot be used if `after-id` is used.
         */
        'before-id'?: number;
        /**
         * A specific `result-id`. The API returns `result-id`s that follow `after-id`. This parameter cannot be used if `before-id` is used.
         */
        'after-id'?: number;
    };
    url: '/result-identifier/Query';
};

export type ResultIdentifierQueryResponses = {
    /**
     * OK
     */
    200: ResultIds;
};

export type ResultIdentifierQueryResponse = ResultIdentifierQueryResponses[keyof ResultIdentifierQueryResponses];

export type ResultQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. The API matches results linked to this institution and the institution’s children. The API client must have access to this institution.
         */
        'program-institution-id'?: Array<string>;
        /**
         * The unique ITS database identifier of the test result.
         */
        'result-id'?: Array<number>;
        /**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: Array<number>;
        /**
         * The program's system identifier of the examinee.
         */
        'program-examinee-system-id'?: Array<string>;
        /**
         * The program's public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: Array<string>;
        /**
         * The program's registration identifier.
         */
        'program-registration-id'?: Array<string>;
        /**
         * The program's managed center.
         */
        'program-center-id'?: Array<string>;
        /**
         * The ITS database identifier of the cohort.
         */
        'cohort-id'?: Array<number>;
        /**
         * The ITS database identifier of the event.
         */
        'event-id'?: Array<number>;
        /**
         * The ITS database identifier of the test.
         */
        'test-id'?: Array<number>;
        /**
         * The ITS database identifier of the form.
         */
        'form-id'?: Array<number>;
        /**
         * The unique ITS database identifier of the longitudinal group.
         */
        'longitudinal-group-id'?: Array<number>;
        /**
         * The start date of results in UTC.
         */
        'start-date'?: string;
        /**
         * The end date of results in UTC. If the complete flag is set, this is based on the completed date of the result. Otherwise, this is based on the last modified date.
         */
        'end-date'?: string;
        /**
         * If `true`, only completed results are returned.
         */
        'completed-only'?: boolean;
        /**
         * If `true`, only results linked to equated forms are returned.
         */
        'equated-only'?: boolean;
        /**
         * If `true`, demo results are included.
         */
        'include-demo'?: boolean;
        /**
         * Bit flag for any information you wish to include in the result. This parameter cannot be used if the `exclude-flag` is used.
         *
         * Bit Information:
         *
         * |     Bit Flag                   |     Bit Value |
         * |--------------------------------|---------------|
         * |     1=Examinee                 |     1         |
         * |     2=Center                   |     2         |
         * |     3=Event                    |     4         |
         * |     4=Actions                  |     8         |
         * |     5=Questions                |     16        |
         * |     6=Groups                   |     32        |
         * |     7=Diagnostics              |     64        |
         * |     8=Sections                 |     128       |
         * |     9=Starts                   |     256       |
         * |     10=Timing                  |     512       |
         * |     11=Survey Questions        |     1024      |
         * |     12=Essays                  |     2048      |
         * |     13=Order Info              |     4096      |
         * |     14=Institution Info        |     8192      |
         * |     15=Cohort Info             |     16384     |
         * |     16=Custom Questions        |     32768     |
         * |     17=Comments                |     65536     |
         * |     18=Accommodations          |     131072    |
         * |     *19=Navigations            |     262144    |
         * |     20=Longitudinal Group Info |     524288    |
         * |     21=Incidents               |     1048576   |
         * |     22=Variables               |     2097152   |
         *
         * * Navigations are not included unless requested with adding Bit 19 to the other Bit Flags requested, if you want all and Navigations use include-flag = 4194303
         */
        'include-flag'?: number;
        /**
         * Bit flag for any information you wish to exclude from the result. This parameter cannot be used if the `include-flag` parameter is used. Use the above table for Bit Values.
         */
        'exclude-flag'?: number;
        /**
         * The number of result objects to return. By default, this call returns a maximum of 25 objects.
         */
        limit?: number;
        /**
         * A specific `result-id`. The API returns objects with `result-id`s that precede `before-id`. This parameter cannot be used if `after-id` is used.
         */
        'before-id'?: number;
        /**
         * A specific `result-id`. The API returns objects with `result-id`s that follow `after-id`. This parameter cannot be used if `before-id` is used.
         */
        'after-id'?: number;
    };
    url: '/result/query';
};

export type ResultQueryResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ResultUpdateData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. The API matches results linked to this institution and the institution’s children. The API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique ITS database identifier of the test result.
         */
        'result-id': Array<number>;
        /**
         * Action - 1 :  Description - Complete result
         */
        'update-action': number;
    };
    url: '/result/update';
};

export type ResultUpdateResponses = {
    /**
     * OK
     */
    200: Array<ResultUpdateResponse>;
};

export type ResultUpdateResponse2 = ResultUpdateResponses[keyof ResultUpdateResponses];

export type SabbaticalQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique ITS database identifier of the examinee.
         */
        'examinee-id'?: number;
        /**
         * The program’s system identifier of the examinee.
         */
        'program-examinee-system-id'?: string;
        /**
         * The program’s public or business identifier of the examinee.
         */
        'program-examinee-public-id'?: string;
        /**
         * The unique ITS database identifier of the examinee’s sabbatical.
         */
        'examinee-sabbatical-id'?: string;
        /**
         * The start date >= of the CreateUTC field of the message record.
         */
        'start-utc'?: string;
        /**
         * The end date <= of the CreateUTC field of the message record.
         */
        'end-utc'?: string;
    };
    url: '/sabbatical/Query';
};

export type SabbaticalQueryResponses = {
    /**
     * OK
     */
    200: Array<Sabbatical>;
};

export type SabbaticalQueryResponse = SabbaticalQueryResponses[keyof SabbaticalQueryResponses];

export type SecureBrowserErrorsQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique identifier for the program.
         */
        'program-id': number;
        /**
         * The ID of the environment to run the query on.
         */
        'environment-id': number;
        /**
         * The customer’s unique Institution Code.
         */
        'program-institution-id'?: string;
        /**
         * The customer’s unique registration ID.
         */
        'external-registration-id'?: string;
        /**
         * The start date to query by.
         */
        'start-utc'?: string;
        /**
         * The end date to query by
         */
        'end-utc'?: string;
        /**
         * The limit of the number of records returned
         */
        limit?: number;
        /**
         * The id to return all records with an id before this point.
         */
        'before-id'?: number;
        /**
         * The id to return all records with an id before this point.
         */
        'end-id'?: number;
    };
    url: '/secure-browser/errors/query';
};

export type SecureBrowserErrorsQueryResponses = {
    /**
     * OK
     */
    200: Array<Error1>;
};

export type SecureBrowserErrorsQueryResponse = SecureBrowserErrorsQueryResponses[keyof SecureBrowserErrorsQueryResponses];

export type SecureBrowserTokensValidateData = {
    body: Token;
    path?: never;
    query: {
        /**
         * The unique identifier for the program.
         */
        'program-id': number;
    };
    url: '/secure-browser/tokens/validate';
};

export type SecureBrowserTokensValidateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type SessionQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The program's unique identifier
         */
        'program-id': number;
        /**
         * The program’s name for the institution that is referenced
         */
        'program-institution-id'?: string;
        /**
         * The unique identifier of the remote session.
         */
        'session-code'?: string;
        /**
         * The start date and time of the session in UTC.
         */
        'start-utc'?: string;
        /**
         * The end date and time of the session in UTC.
         */
        'end-utc'?: string;
    };
    url: '/session/query';
};

export type SessionQueryResponses = {
    /**
     * OK
     */
    200: Array<Session1>;
};

export type SessionQueryResponse = SessionQueryResponses[keyof SessionQueryResponses];

export type SessionCreateData = {
    body: SessionCreateInput;
    path?: never;
    query: {
        'program-id': number;
        'program-institution-id'?: string;
    };
    url: '/session/create';
};

export type SessionCreateResponses = {
    /**
     * OK
     */
    200: SessionResponse1;
};

export type SessionCreateResponse = SessionCreateResponses[keyof SessionCreateResponses];

export type SessionUpdateData = {
    body: SessionUpdateInput;
    path?: never;
    query: {
        'program-id': number;
        'program-institution-id'?: string;
    };
    url: '/session/update';
};

export type SessionUpdateResponses = {
    /**
     * OK
     */
    200: SessionResponse1;
};

export type SessionUpdateResponse = SessionUpdateResponses[keyof SessionUpdateResponses];

export type SessionDeleteData = {
    body?: never;
    path?: never;
    query: {
        'program-id': number;
        'session-code': string;
    };
    url: '/session/delete';
};

export type SessionDeleteResponses = {
    /**
     * OK
     */
    200: Array<SessionResponse1>;
};

export type SessionDeleteResponse = SessionDeleteResponses[keyof SessionDeleteResponses];

export type SignalRDomainQueryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/signalr-domain/query';
};

export type SignalRDomainQueryResponses = {
    /**
     * OK
     */
    200: QuerySignalRDomainQueryResponse;
};

export type SignalRDomainQueryResponse = SignalRDomainQueryResponses[keyof SignalRDomainQueryResponses];

export type StartTestLoginData = {
    body?: StartTestDataHolder;
    path?: never;
    query?: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id'?: number;
        /**
         * The unique program identifier of an institution. The API matches examinees linked to this institution and the institution's children. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/start-test/Login';
};

export type StartTestLoginResponses = {
    /**
     * OK
     */
    200: string;
};

export type StartTestLoginResponse = StartTestLoginResponses[keyof StartTestLoginResponses];

export type StartTestStartData = {
    body?: StartTestDataHolder;
    path?: never;
    query?: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id'?: number;
        /**
         * The unique program identifier of an institution. The API matches examinees linked to this institution and the institution's children. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/start-test/Start';
};

export type StartTestStartResponses = {
    /**
     * OK
     */
    200: string;
};

export type StartTestStartResponse = StartTestStartResponses[keyof StartTestStartResponses];

export type TestFormsQueryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id'?: number;
        /**
         * The unique program identifier of an institution. Only forms accessible by this institution are returned. The web API client must have access to this institution.
         */
        'program-institution-id'?: number;
        /**
         * The unique textual identifier of the test.
         */
        'test-name'?: Array<string>;
        /**
         * The unique database identifier of the test.
         */
        'test-id'?: Array<number>;
        /**
         * The start date and time in UTC that test delivery will occur and forms must be available.
         */
        'start-utc'?: string;
        /**
         * The last date and time in UTC that test delivery will occur and forms must be available.
         */
        'end-utc'?: string;
    };
    url: '/test/forms/Query';
};

export type TestFormsQueryResponses = {
    /**
     * OK
     */
    200: Array<TestFormsQueryResponse>;
};

export type TestFormsQueryResponse2 = TestFormsQueryResponses[keyof TestFormsQueryResponses];

export type TestPretestReferencesQueryData = {
    body?: never;
    path?: never;
    query: {
        'program-id': number;
        'test-id'?: Array<number>;
    };
    url: '/test/pretest-references/Query';
};

export type TestPretestReferencesQueryResponses = {
    /**
     * OK
     */
    200: PretestReferences;
};

export type TestPretestReferencesQueryResponse = TestPretestReferencesQueryResponses[keyof TestPretestReferencesQueryResponses];

export type TestPretestReferencesImportData = {
    body: PretestReferences;
    path?: never;
    query: {
        'program-id': number;
        'test-id': number;
    };
    url: '/test/pretest-references/Import';
};

export type TestPretestReferencesImportResponses = {
    /**
     * OK
     */
    200: string;
};

export type TestPretestReferencesImportResponse = TestPretestReferencesImportResponses[keyof TestPretestReferencesImportResponses];

export type TestQueryData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique textual identifier of the test. Multiple Supported
         */
        'test-name'?: Array<string>;
        /**
         * The unique database identifier of the test. Multiple Supported
         */
        'test-id'?: Array<number>;
        /**
         * A flag indicating whether inactive tests should be returned
         */
        'include-inactive'?: boolean;
        /**
         * A flag indicating whether demo tests should be returned
         */
        'include-demo'?: boolean;
        /**
         * The UTC date/time to find all new or updated tests since that date/time.
         */
        'last-modified-utc'?: string;
        /**
         * The number of test objects to return. By default, this call will return a maximum of 1000 test objects. The limit can be set to any number less than 1000.
         */
        limit?: number;
        /**
         * The test-id is the pagination ID used for this resource. Test-id objects with IDs immediately before this ID are returned. This parameter cannot be used if after-id is used.
         */
        'before-id'?: number;
        /**
         * The test-id is the pagination ID used for this resource. Test objects with IDs immediately after this ID are returned. This parameter cannot be used if before-id is used.
         */
        'after-id'?: number;
        /**
         * Bit flag for any information you wish to include in the test object. If include-flag is not requested, all information is included.
         * Example: To include general form information and informational meta data, use 65 to represent 1+ 64.
         * **Bit Information**
         *
         * | Bit Flag                     | Bit Value |
         * |------------------------------|-----------|
         * | 1 = General Test Information | 1         |
         * | 2 = Test Type                | 2         |
         * | 3 = Audits                   | 4         |
         * | 4 = Form Selection           | 8         |
         * | 5 = Attempts                 | 16        |
         * | 6 = Academic Models          | 32        |
         * | 7 = Live in Application      | 64        |
         * | 8 = Reporting & Exporting    | 128       |
         * | 9 = Test Categories & Groups | 256       |
         * | 10 = Start Test              | 512       |
         * | 11 = Automatic Close         | 1024      |
         * | 12 = Continuous Learning     | 2048      |
         * | 13 = Observational           | 4096      |
         *
         */
        'include-flag'?: number;
    };
    url: '/Test/Query';
};

export type TestQueryResponses = {
    /**
     * OK
     */
    200: Array<TestQueryResult>;
};

export type TestQueryResponse = TestQueryResponses[keyof TestQueryResponses];

export type TestCreateData = {
    body?: TestCreateRequest;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/Test/Create';
};

export type TestCreateResponses = {
    /**
     * OK
     */
    200: TestResponse;
};

export type TestCreateResponse = TestCreateResponses[keyof TestCreateResponses];

export type TestDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique database identifier of the test. Multiple Supported
         */
        'test-id': Array<number>;
    };
    url: '/Test/Delete';
};

export type TestDeleteResponses = {
    /**
     * OK
     */
    200: Array<TestResponse>;
};

export type TestDeleteResponse = TestDeleteResponses[keyof TestDeleteResponses];

export type TestUpdateData = {
    body: TestUpdateRequest;
    path?: never;
    query: {
        /**
         * The unique program identifier provided as part of configuration.
         */
        'program-id': number;
        /**
         * The unique program identifier of an institution. Sessions are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
    };
    url: '/Test/Update';
};

export type TestUpdateResponses = {
    /**
     * OK
     */
    200: TestResponse;
};

export type TestUpdateResponse = TestUpdateResponses[keyof TestUpdateResponses];

export type GetTimezoneQueryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/Timezone/Query';
};

export type GetTimezoneQueryResponses = {
    /**
     * OK
     */
    200: Array<TimeZoneResponse>;
};

export type GetTimezoneQueryResponse = GetTimezoneQueryResponses[keyof GetTimezoneQueryResponses];

export type QueryUserAccessData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The unique database identifier of the vendor.
         */
        'vendor-id'?: number;
        /**
         * The unique database identifier of the sponsor.
         */
        'sponsor-id'?: number;
        /**
         * The unique program identifier provided as part of configuration. If supplied, users with access to the requested programs will be returned.
         */
        'program-id'?: Array<number>;
        /**
         * The program’s unique identifier of an institution. If supplied, users with access to the requested institutions will be returned.
         */
        'program-institution-id'?: Array<string>;
        /**
         * The unique ITS database identifier of the user.
         */
        'user-id'?: Array<number>;
        /**
         * The program’s system-generated unique identifier of the user. Used to link the ITS system with a program’s system for SSO and system-to-system imports.
         */
        'program-user-system-id'?: Array<string>;
        /**
         * The program’s public identifier of a user. For example, the user’s Board ID.
         */
        'program-user-public-id'?: Array<string>;
        /**
         * Determine which types of users to return.
         *
         * | User Type | Description                                                  |
         * | --------- | ------------------------------------------------------------ |
         * | 1         | Returns all user types that match the filter specifications. |
         * | 2         | Returns only vendor users.                                   |
         * | 3         | Returns only sponsor users.                                  |
         * | 4         | Returns only institution users.                              |
         *
         */
        'included-user-types'?: number;
        /**
         * Determine which user statuses to return.
         *
         * | User Type | Description  |
         * | --------- | ------------ |
         * | 1         | Active       |
         * | 2         | Inactive     |
         * | 4         | Deleted      |
         *
         */
        'included-user-statuses'?: UserStatusFlags;
    };
    url: '/user/access/query';
};

export type QueryUserAccessResponses = {
    /**
     * OK
     */
    200: Array<UserAccessQueryResponse>;
};

export type QueryUserAccessResponse = QueryUserAccessResponses[keyof QueryUserAccessResponses];

export type DeleteUserAccessData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * Either a vendor-id or a sponsor-id is required.  The unique database identifier of the vendor.
         */
        'vendor-id'?: number;
        /**
         * The unique database identifier of the sponsor.
         */
        'sponsor-id'?: number;
        /**
         * Either program-id or program-institution-id is required. The unique program identifier provided as part of configuration. If supplied, users with access to the requested programs will be removed.
         */
        'program-id'?: Array<number>;
        /**
         * The program's unique identifier of an institution. If supplied, users with access to the requested institutions will be removed.
         */
        'program-institution-id'?: Array<string>;
        /**
         * One of the following three User IDs are required. The unique ITS database identifier of the user. Multiple supported.
         */
        'user-id'?: Array<number>;
        /**
         * The program's system-generated unique identifier of the user. Used to link the ITS system with a program's system for SSO and system-to-system imports.
         */
        'program-user-system-id'?: Array<string>;
        /**
         * The program's public identifier of a user. For example, the user's Board ID.
         */
        'program-user-public-id'?: Array<string>;
    };
    url: '/user/access/delete';
};

export type DeleteUserAccessResponses = {
    /**
     * OK
     */
    200: Array<UserAccessDeleteResponse>;
};

export type DeleteUserAccessResponse = DeleteUserAccessResponses[keyof DeleteUserAccessResponses];

export type GetUserQueryData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * The unique database identifier of the vendor.
         */
        'vendor-id'?: number;
        /**
         * The unique database identifier of the sponsor.
         */
        'sponsor-id'?: number;
        /**
         * The unique ITS database identifier of the user.
         */
        'user-id'?: Array<number>;
        /**
         * The program's system-generated unique identifier of the user. Used to link the ITS system with a program's system for SSO and system-to-system imports.
         */
        'program-user-system-id'?: Array<string>;
        /**
         * The program's public identifier of a user. For example, the user's Board ID.
         */
        'program-user-public-id'?: Array<string>;
        /**
         * Determine which types of users to return.
         *
         * | User Type | Description                                                  |
         * | --------- | ------------------------------------------------------------ |
         * | 1         | Returns all user types that match the filter specifications. |
         * | 2         | Returns only vendor users.                                   |
         * | 3         | Returns only sponsor users.                                  |
         * | 4         | Returns only institution users.                              |
         *
         */
        'included-user-types'?: number;
        /**
         * Determine which user statuses to return.
         *
         * | User Type | Description  |
         * | --------- | ------------ |
         * | 1         | Active       |
         * | 2         | Inactive     |
         * | 4         | Deleted      |
         *
         */
        'included-user-statuses'?: UserStatusFlags;
    };
    url: '/User/query';
};

export type GetUserQueryResponses = {
    /**
     * OK
     */
    200: Array<UserResponse>;
};

export type GetUserQueryResponse = GetUserQueryResponses[keyof GetUserQueryResponses];

export type DeleteUserDeleteData = {
    body?: never;
    path?: never;
    query: {
        /**
         * The unique identifier of the vendor.
         */
        'vendor-id': number;
        /**
         * The unique program identifier of an institution. Users are linked to this institution. The web API client must have access to this institution.
         */
        'program-institution-id'?: string;
        /**
         * The unique ITS database identifier of the user.
         */
        'user-id'?: Array<number>;
        /**
         * The unique program identifier of the user.
         */
        'program-user-system-id'?: Array<string>;
        /**
         * The unique program public identifier of the user.
         */
        'program-user-public-id'?: Array<string>;
    };
    url: '/User/delete';
};

export type DeleteUserDeleteResponses = {
    /**
     * OK
     */
    200: Array<UsersDeleteResponse>;
};

export type DeleteUserDeleteResponse = DeleteUserDeleteResponses[keyof DeleteUserDeleteResponses];

export type ClientOptions = {
    baseUrl: 'https://api-staging.testsys.io' | (string & {});
};